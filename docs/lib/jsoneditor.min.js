/**
 * Skipped minification because the original files appears to be already minified.
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
/*!
 * /**
 * * @name JSON Editor
 * * @description JSON Schema Based Editor
 * * This library is the continuation of jdorn's great work (see also https://github.com/jdorn/json-editor/issues/800)
 * * @version "2.1.0"
 * * @author Jeremy Dorn
 * * @see https://github.com/jdorn/json-editor/
 * * @see https://github.com/json-editor/json-editor
 * * @license MIT
 * * @example see README.md and docs/ for requirements, examples and usage info
 * * /
 */!(function (t) { const e = {}; function i(s) { if (e[s]) return e[s].exports; const n = e[s] = { i: s, l: !1, exports: {} }; return t[s].call(n.exports, n, n.exports, i), n.l = !0, n.exports; }i.m = t, i.c = e, i.d = function (t, e, s) { i.o(t, e) || Object.defineProperty(t, e, { enumerable: !0, get: s }); }, i.r = function (t) { typeof Symbol !== 'undefined' && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, { value: 'Module' }), Object.defineProperty(t, '__esModule', { value: !0 }); }, i.t = function (t, e) { if (1 & e && (t = i(t)), 8 & e) return t; if (4 & e && typeof t === 'object' && t && t.__esModule) return t; const s = Object.create(null); if (i.r(s), Object.defineProperty(s, 'default', { enumerable: !0, value: t }), 2 & e && typeof t !== 'string') for (const n in t)i.d(s, n, ((e) => t[e]).bind(null, n)); return s; }, i.n = function (t) { const e = t && t.__esModule ? function () { return t.default; } : function () { return t; }; return i.d(e, 'a', e), e; }, i.o = function (t, e) { return Object.prototype.hasOwnProperty.call(t, e); }, i.p = '/dist/', i(i.s = 10); }([function (t, e, i) { let s; const n = function () { return void 0 === s && (s = Boolean(window && document && document.all && !window.atob)), s; }; const r = (function () { const t = {}; return function (e) { if (void 0 === t[e]) { let i = document.querySelector(e); if (window.HTMLIFrameElement && i instanceof window.HTMLIFrameElement) try { i = i.contentDocument.head; } catch (t) { i = null; }t[e] = i; } return t[e]; }; }()); const o = []; function a(t) { for (var e = -1, i = 0; i < o.length; i++) if (o[i].identifier === t) { e = i; break; } return e; } function l(t, e) { for (var i = {}, s = [], n = 0; n < t.length; n++) { const r = t[n]; const l = e.base ? r[0] + e.base : r[0]; const h = i[l] || 0; const d = ''.concat(l, ' ').concat(h); i[l] = h + 1; const c = a(d); const u = { css: r[1], media: r[2], sourceMap: r[3] }; c !== -1 ? (o[c].references++, o[c].updater(u)) : o.push({ identifier: d, updater: b(u, e), references: 1 }), s.push(d); } return s; } function h(t) { const e = document.createElement('style'); const s = t.attributes || {}; if (void 0 === s.nonce) { const n = i.nc; n && (s.nonce = n); } if (Object.keys(s).forEach(((t) => { e.setAttribute(t, s[t]); })), typeof t.insert === 'function')t.insert(e); else { const o = r(t.insert || 'head'); if (!o) throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid."); o.appendChild(e); } return e; } let d; const c = (d = [], function (t, e) { return d[t] = e, d.filter(Boolean).join('\n'); }); function u(t, e, i, s) { const n = i ? '' : s.media ? '@media '.concat(s.media, ' {').concat(s.css, '}') : s.css; if (t.styleSheet)t.styleSheet.cssText = c(e, n); else { const r = document.createTextNode(n); const o = t.childNodes; o[e] && t.removeChild(o[e]), o.length ? t.insertBefore(r, o[e]) : t.appendChild(r); } } function p(t, e, i) { let s = i.css; const n = i.media; const r = i.sourceMap; if (n ? t.setAttribute('media', n) : t.removeAttribute('media'), r && btoa && (s += '\n/*# sourceMappingURL=data:application/json;base64,'.concat(btoa(unescape(encodeURIComponent(JSON.stringify(r)))), ' */')), t.styleSheet)t.styleSheet.cssText = s; else { for (;t.firstChild;)t.removeChild(t.firstChild); t.appendChild(document.createTextNode(s)); } } let m = null; let f = 0; function b(t, e) { let i; let s; let n; if (e.singleton) { const r = f++; i = m || (m = h(e)), s = u.bind(null, i, r, !1), n = u.bind(null, i, r, !0); } else i = h(e), s = p.bind(null, i, e), n = function () { !(function (t) { if (t.parentNode === null) return !1; t.parentNode.removeChild(t); }(i)); }; return s(t), function (e) { if (e) { if (e.css === t.css && e.media === t.media && e.sourceMap === t.sourceMap) return; s(t = e); } else n(); }; }t.exports = function (t, e) { (e = e || {}).singleton || typeof e.singleton === 'boolean' || (e.singleton = n()); let i = l(t = t || [], e); return function (t) { if (t = t || [], Object.prototype.toString.call(t) === '[object Array]') { for (let s = 0; s < i.length; s++) { const n = a(i[s]); o[n].references--; } for (var r = l(t, e), h = 0; h < i.length; h++) { const d = a(i[h]); o[d].references === 0 && (o[d].updater(), o.splice(d, 1)); }i = r; } }; }; }, function (t) { t.exports = JSON.parse('{"je-form-input-label":"display:block;margin-bottom:3px;font-weight:bold","je-form-input-description":"display:inline-block;margin:0;font-size:0.8em;font-style:italic","je-indented-panel":"padding:5px;margin:10px;border-radius:3px;border:1px solid #ddd","je-child-editor-holder":"margin-bottom:8px","je-header-button-holder":"display:inline-block;margin-left:10px;font-size:0.8em;vertical-align:middle","je-table":"margin-bottom:5px;border-bottom:1px solid #ccc",".je-upload-preview img":"float:left;margin:0 0.5rem 0.5rem 0;max-width:100%;max-height:5rem",".je-dropzone":"position:relative;margin:0.5rem 0;border:2px dashed black;width:100%;height:60px;background:teal;transition:all 0.5s",".je-dropzone:before":"position:absolute;content:attr(data-text);color:rgba(0, 0, 0, 0.6);left:50%;top:50%;transform:translate(-50%, -50%)",".je-dropzone.valid-dropzone":"background:green",".je-dropzone.invalid-dropzone":"background:red"}'); }, function (t) { t.exports = JSON.parse('{".jsoneditor-twbs4-text-button":"background:none;padding:0;border:0;color:currentColor","td > .form-group":"margin-bottom:0",".json-editor-btn-upload":"margin-top:1rem",".je-noindent .card":"padding:0;border:0",".je-tooltip:hover::before":"display:block;position:absolute;font-size:0.8em;color:#fff;border-radius:0.2em;content:attr(title);background-color:#000;margin-top:-2.5em;padding:0.3em",".je-tooltip:hover::after":"display:block;position:absolute;font-size:0.8em;color:#fff",".select2-container--default .select2-selection--single":"height:calc(1.5em + 0.75rem + 2px)",".select2-container--default   .select2-selection--single   .select2-selection__arrow":"height:calc(1.5em + 0.75rem + 2px)",".select2-container--default   .select2-selection--single   .select2-selection__rendered":"line-height:calc(1.5em + 0.75rem + 2px)",".selectize-control.form-control":"padding:0",".selectize-dropdown.form-control":"padding:0;height:auto",".je-upload-preview img":"float:left;margin:0 0.5rem 0.5rem 0;max-width:100%;max-height:5rem",".je-dropzone":"position:relative;margin:0.5rem 0;border:2px dashed black;width:100%;height:60px;background:teal;transition:all 0.5s",".je-dropzone:before":"position:absolute;content:attr(data-text);color:rgba(0, 0, 0, 0.6);left:50%;top:50%;transform:translate(-50%, -50%)",".je-dropzone.valid-dropzone":"background:green",".je-dropzone.invalid-dropzone":"background:red"}'); }, function (t) { t.exports = JSON.parse('{".je-upload-preview img":"float:left;margin:0 0.5rem 0.5rem 0;max-width:100%;max-height:5rem",".je-dropzone":"position:relative;margin:0.5rem 0;border:2px dashed black;width:100%;height:60px;background:teal;transition:all 0.5s",".je-dropzone:before":"position:absolute;content:attr(data-text);color:rgba(0, 0, 0, 0.6);left:50%;top:50%;transform:translate(-50%, -50%)",".je-dropzone.valid-dropzone":"background:green",".je-dropzone.invalid-dropzone":"background:red"}'); }, function (t) { t.exports = JSON.parse('{"*":"--primary-color:#5755d9;--gray-color:#bcc3ce;--light-color:#fff",".slider:focus":"box-shadow:none","h4 > label + .btn-group":"margin-left:1rem",".text-right > button":"margin-right:0 !important",".text-left > button":"margin-left:0 !important",".property-selector":"font-size:0.7rem;font-weight:normal;max-height:260px !important;width:395px !important",".property-selector .form-checkbox":"margin:0","textarea":"width:100%;min-height:2rem;resize:vertical","table":"border-collapse:collapse",".table td":"padding:0.4rem 0.4rem",".mr-5":"margin-right:1rem !important","div[data-schematype]:not([data-schematype=\'object\'])":"transition:0.5s","div[data-schematype]:not([data-schematype=\'object\']):hover":"background-color:#eee",".je-table-border td":"border:0.05rem solid #dadee4 !important",".btn-info":"font-size:0.5rem;font-weight:bold;height:0.8rem;padding:0.15rem 0;line-height:0.8;margin:0.3rem 0 0.3rem 0.1rem",".je-label + select":"min-width:5rem",".je-label":"font-weight:600",".btn-action.btn-info":"width:0.8rem",".je-border":"border:0.05rem solid #dadee4",".je-panel":"padding:0.2rem;margin:0.2rem;background-color:rgba(218, 222, 228, 0.1)",".je-panel-top":"padding:0.2rem;margin:0.2rem;background-color:rgba(218, 222, 228, 0.1)",".required:after":"content:\' *\';color:red;font:inherit",".je-align-bottom":"margin-top:auto",".je-desc":"font-size:smaller;margin:0.2rem 0",".je-upload-preview img":"float:left;margin:0 0.5rem 0.5rem 0;max-width:100%;max-height:5rem;border:3px solid white;box-shadow:0px 0px 8px rgba(0, 0, 0, 0.3);box-sizing:border-box",".je-dropzone":"position:relative;margin:0.5rem 0;border:2px dashed black;width:100%;height:60px;background:teal;transition:all 0.5s",".je-dropzone:before":"position:absolute;content:attr(data-text);color:rgba(0, 0, 0, 0.6);left:50%;top:50%;transform:translate(-50%, -50%)",".je-dropzone.valid-dropzone":"background:green",".je-dropzone.invalid-dropzone":"background:red",".columns .container.je-noindent":"padding-left:0;padding-right:0",".selectize-control.multi .item":"background:var(--primary-color) !important",".select2-container--default   .select2-selection--single   .select2-selection__arrow":"display:none",".select2-container--default .select2-selection--single":"border:none",".select2-container .select2-selection--single .select2-selection__rendered":"padding:0",".select2-container .select2-search--inline .select2-search__field":"margin-top:0",".select2-container--default.select2-container--focus   .select2-selection--multiple":"border:0.05rem solid var(--gray-color)",".select2-container--default   .select2-selection--multiple   .select2-selection__choice":"margin:0.4rem 0.2rem 0.2rem 0;padding:2px 5px;background-color:var(--primary-color);color:var(--light-color)",".select2-container--default .select2-search--inline .select2-search__field":"line-height:normal",".choices":"margin-bottom:auto",".choices__list--multiple .choices__item":"border:none;background-color:var(--primary-color);color:var(--light-color)",".choices[data-type*=\'select-multiple\'] .choices__button":"border-left:0.05rem solid #2826a6",".choices__inner":"font-size:inherit;min-height:20px;padding:4px 7.5px 4px 3.75px",".choices[data-type*=\'select-one\'] .choices__inner":"padding-bottom:4px",".choices__list--dropdown .choices__item":"font-size:inherit"}'); }, function (t) { t.exports = JSON.parse('{".slider":"-webkit-appearance:none;-moz-appearance:none;appearance:none;background:transparent;display:block;border:none;height:1.2rem;width:100%",".slider:focus":"box-shadow:0 0 0 0 rgba(87, 85, 217, 0.2);outline:none",".slider.tooltip:not([data-tooltip])::after":"content:attr(value)",".slider::-webkit-slider-thumb":"-webkit-appearance:none;background:#f17405;border-radius:100%;height:0.6rem;margin-top:-0.25rem;transition:transform 0.2s;width:0.6rem",".slider:active::-webkit-slider-thumb":"transform:scale(1.25);outline:none",".slider::-webkit-slider-runnable-track":"background:#b2b4b6;border-radius:0.1rem;height:0.1rem;width:100%","a.tooltips":"position:relative;display:inline","a.tooltips span":"position:absolute;white-space:nowrap;width:auto;padding-left:1rem;padding-right:1rem;color:#ffffff;background:rgba(56, 56, 56, 0.85);height:1.5rem;line-height:1.5rem;text-align:center;visibility:hidden;border-radius:3px","a.tooltips span:after":"content:\'\';position:absolute;top:50%;left:100%;margin-top:-5px;width:0;height:0;border-left:5px solid rgba(56, 56, 56, 0.85);border-top:5px solid transparent;border-bottom:5px solid transparent","a:hover.tooltips span":"visibility:visible;opacity:0.9;font-size:0.8rem;right:100%;top:50%;margin-top:-12px;margin-right:10px;z-index:999",".json-editor-btntype-properties + div":"font-size:0.8rem;font-weight:normal","textarea":"width:100%;min-height:2rem;resize:vertical","table":"width:100%;border-collapse:collapse",".table td":"padding:0rem 0rem","div[data-schematype]:not([data-schematype=\'object\'])":"transition:0.5s","div[data-schematype]:not([data-schematype=\'object\']):hover":"background-color:#e6f4fe","div[data-schemaid=\'root\']":"position:relative;width:inherit;display:inherit;overflow-x:hidden;z-index:10","select[multiple]":"height:auto","select[multiple].from-select":"height:auto",".je-table-zebra:nth-child(even)":"background-color:#f2f2f2",".je-table-border":"border:0.5px solid black",".je-table-hdiv":"border-bottom:1px solid black",".je-border":"border:0.05rem solid #3182ce",".je-panel":"width:inherit;padding:0.2rem;margin:0.2rem;background-color:rgba(218, 222, 228, 0.1)",".je-panel-top":"width:100%;padding:0.2rem;margin:0.2rem;background-color:rgba(218, 222, 228, 0.1)",".required:after":"content:\' *\';color:red;font:inherit;font-weight:bold",".je-desc":"font-size:smaller;margin:0.2rem 0",".container-xl.je-noindent":"padding-left:0;padding-right:0",".json-editor-btntype-add":"color:white;margin:0.3rem;padding:0.3rem 0.8rem;background-color:#4299e1;box-shadow:3px 3px 5px 1px rgba(4, 4, 4, 0.2);-webkit-box-shadow:3px 3px 5px 1px rgba(4, 4, 4, 0.2);-moz-box-shadow:3px 3px 5px 1px rgba(4, 4, 4, 0.2)",".json-editor-btntype-deletelast":"color:white;margin:0.3rem;padding:0.3rem 0.8rem;background-color:#e53e3e;box-shadow:3px 3px 5px 1px rgba(4, 4, 4, 0.2);-webkit-box-shadow:3px 3px 5px 1px rgba(4, 4, 4, 0.2);-moz-box-shadow:3px 3px 5px 1px rgba(4, 4, 4, 0.2)",".json-editor-btntype-deleteall":"color:white;margin:0.3rem;padding:0.3rem 0.8rem;background-color:#000000;box-shadow:3px 3px 5px 1px rgba(4, 4, 4, 0.2);-webkit-box-shadow:3px 3px 5px 1px rgba(4, 4, 4, 0.2);-moz-box-shadow:3px 3px 5px 1px rgba(4, 4, 4, 0.2)",".json-editor-btn-save":"float:right;color:white;margin:0.3rem;padding:0.3rem 0.8rem;background-color:#2b6cb0;box-shadow:3px 3px 5px 1px rgba(4, 4, 4, 0.2);-webkit-box-shadow:3px 3px 5px 1px rgba(4, 4, 4, 0.2);-moz-box-shadow:3px 3px 5px 1px rgba(4, 4, 4, 0.2)",".json-editor-btn-back":"color:white;margin:0.3rem;padding:0.3rem 0.8rem;background-color:#2b6cb0;box-shadow:3px 3px 5px 1px rgba(4, 4, 4, 0.2);-webkit-box-shadow:3px 3px 5px 1px rgba(4, 4, 4, 0.2);-moz-box-shadow:3px 3px 5px 1px rgba(4, 4, 4, 0.2)",".json-editor-btntype-delete":"color:#e53e3e;background-color:rgba(218, 222, 228, 0.1);margin:0.03rem;padding:0.1rem",".json-editor-btntype-move":"color:#000000;background-color:rgba(218, 222, 228, 0.1);margin:0.03rem;padding:0.1rem",".json-editor-btn-collapse":"padding:0em 0.8rem;font-size:1.3rem;color:#e53e3e;background-color:rgba(218, 222, 228, 0.1)",".je-upload-preview img":"float:left;margin:0 0.5rem 0.5rem 0;max-width:100%;max-height:5rem",".je-dropzone":"position:relative;margin:0.5rem 0;border:2px dashed black;width:100%;height:60px;background:teal;transition:all 0.5s",".je-dropzone:before":"position:absolute;content:attr(data-text);color:rgba(0, 0, 0, 0.6);left:50%;top:50%;transform:translate(-50%, -50%)",".je-dropzone.valid-dropzone":"background:green",".je-dropzone.invalid-dropzone":"background:red"}'); }, function (t, e, i) { const s = i(0); let n = i(7); typeof (n = n.__esModule ? n.default : n) === 'string' && (n = [[t.i, n, '']]); const r = { insert: 'head', singleton: !1 }; const o = (s(n, r), n.locals ? n.locals : {}); t.exports = o; }, function (t, e) { t.exports = '.choices>*{box-sizing:border-box}'; }, function (t, e, i) { const s = i(0); let n = i(9); typeof (n = n.__esModule ? n.default : n) === 'string' && (n = [[t.i, n, '']]); const r = { insert: 'head', singleton: !1 }; const o = (s(n, r), n.locals ? n.locals : {}); t.exports = o; }, function (t, e) { t.exports = '.starrating{direction:rtl;display:inline-block;white-space:nowrap}.starrating>input{display:none}.starrating>label:before{content:"\\2606";margin:1px;font-size:18px;font-style:normal;font-weight:400;line-height:1;font-family:Arial;display:inline-block}.starrating>label{color:#888;cursor:pointer;margin:8px 0 2px}.starrating>label.starrating-display-enabled{margin:1px 0 0}.starrating:not(.readonly)>input:hover~label,.starrating>input:checked~label{color:#ffca08}.starrating:not(.readonly)>input:hover~label:before,.starrating>input:checked~label:before{content:"\\2605";text-shadow:0 0 1px #001414}.starrating .starrating-display{position:relative;direction:rtl;text-align:center;font-size:10px;line-height:0}'; }, function (t, e, i) {
  i.r(e); i(6), i(8); const s = function (t) { return t !== null && (typeof t === 'object' && !t.nodeType && t !== t.window && !(t.constructor && !Object.prototype.hasOwnProperty.call(t.constructor.prototype, 'isPrototypeOf'))); }; var n = function (t) { return s(t) ? r({}, t) : Array.isArray(t) ? t.map(n) : t; }; var r = function (t) { let e; let i; let o; for (i = 1; i < arguments.length; i++) for (o in e = arguments[i])e.hasOwnProperty(o) && (e[o] && s(e[o]) ? (t.hasOwnProperty(o) || (t[o] = {}), r(t[o], e[o])) : Array.isArray(e[o]) ? t[o] = n(e[o]) : t[o] = e[o]); return t; }; const o = function (t, e) { let i; if (t && typeof t === 'object') if (Array.isArray(t) || typeof t.length === 'number' && t.length > 0 && t.length - 1 in t) { for (i = 0; i < t.length; i++) if (!1 === e(i, t[i])) return; } else if (Object.keys) { const s = Object.keys(t); for (i = 0; i < s.length; i++) if (!1 === e(s[i], t[s[i]])) return; } else for (i in t) if (t.hasOwnProperty(i) && !1 === e(i, t[i])) return; }; const a = function (t, e) { const i = document.createEvent('HTMLEvents'); i.initEvent(e, !0, !0), t.dispatchEvent(i); }; let l; let h; var d = (l = !1, h = /xyz/.test((() => { window.postMessage('xyz'); })) ? /\b_super\b/ : /.*/, (d = function () {}).extend = function t(e) { const i = this.prototype; l = !0; const s = new this(); for (const n in l = !1, e)s[n] = typeof e[n] === 'function' && typeof i[n] === 'function' && h.test(e[n]) ? (function (t, e) { return function () { const s = this._super; this._super = i[t]; const n = e.apply(this, arguments); return this._super = s, n; }; }(n, e[n])) : e[n]; function r() { !l && this.init && this.init.apply(this, arguments); } return r.prototype = s, r.prototype.constructor = r, r.extend = t, r; }, d); function c(t, e, i, s) { try { switch (t.format) { case 'ipv4': !(function (t) { const e = t.split('.'); if (e.length !== 4) throw new Error('error_ipv4'); e.forEach(((t) => { if (isNaN(+t) || +t < 0 || +t > 255) throw new Error('error_ipv4'); })); }(e)); break; case 'ipv6': !(function (t) { if (!t.match('^(?:(?:(?:[a-fA-F0-9]{1,4}:){6}|(?=(?:[a-fA-F0-9]{0,4}:){2,6}(?:[0-9]{1,3}.){3}[0-9]{1,3}$)(([0-9a-fA-F]{1,4}:){1,5}|:)((:[0-9a-fA-F]{1,4}){1,5}:|:)|::(?:[a-fA-F0-9]{1,4}:){5})(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9]).){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])|(?:[a-fA-F0-9]{1,4}:){7}[a-fA-F0-9]{1,4}|(?=(?:[a-fA-F0-9]{0,4}:){0,7}[a-fA-F0-9]{0,4}$)(([0-9a-fA-F]{1,4}:){1,7}|:)((:[0-9a-fA-F]{1,4}){1,7}|:)|(?:[a-fA-F0-9]{1,4}:){7}:|:(:[a-fA-F0-9]{1,4}){7})$')) throw new Error('error_ipv6'); }(e)); break; case 'hostname': !(function (t) { if (!t.match('(?=^.{4,253}$)(^((?!-)[a-zA-Z0-9-]{0,62}[a-zA-Z0-9].)+[a-zA-Z]{2,63}$)')) throw new Error('error_hostname'); }(e)); } return []; } catch (t) { return [{ path: i, property: 'format', message: s(t.message) }]; } } const u = d.extend({
    init(t, e, i, s) { this.jsoneditor = t, this.schema = e || this.jsoneditor.schema, this.options = i || {}, this.translate = this.jsoneditor.translate || s.translate, this.defaults = s; },
    fitTest(t, e, i) { i = void 0 === i ? 1e7 : i; const s = { match: 0, extra: 0 }; if (typeof t === 'object' && t !== null) { const n = this._getSchema(e).properties; for (const e in n) if (n.hasOwnProperty(e)) { if (typeof t[e] === 'object' && typeof n[e] === 'object' && typeof n[e].properties === 'object') { const r = this.fitTest(t[e], n[e], i / 100); s.match += r.match, s.extra += r.extra; } void 0 !== t[e] && (s.match += i); } else s.extra += i; } return s; },
    _getSchema(t) { return void 0 === t ? r({}, this.jsoneditor.expandRefs(this.schema)) : t; },
    validate(t) { return this._validateSchema(this.schema, t); },
    _validateSchema(t, e, i) { const s = []; return i = i || 'root', t = r({}, this.jsoneditor.expandRefs(t)), void 0 === e ? this._validateV3Required(t, e, i) : (Object.keys(t).forEach((n) => { this._validateSubSchema[n] && s.push(...this._validateSubSchema[n].call(this, t, e, i)); }), s.push(...this._validateByValueType(t, e, i)), t.links && t.links.forEach((n, r) => { n.rel && n.rel.toLowerCase() === 'describedby' && (t = this._expandSchemaLink(t, r), s.push(...this._validateSchema(t, e, i, this.translate))); }), ['date', 'time', 'datetime-local'].indexOf(t.format) !== -1 && s.push(...this._validateDateTimeSubSchema(t, e, i)), s.push(...this._validateCustomValidator(t, e, i)), this._removeDuplicateErrors(s)); },
    _expandSchemaLink(t, e) { const i = t.links[e].href; const s = this.jsoneditor.root.getValue(); const n = this.jsoneditor.compileTemplate(i, this.jsoneditor.template); const o = document.location.origin + document.location.pathname + n(s); return t.links = t.links.slice(0, e).concat(t.links.slice(e + 1)), r({}, t, this.jsoneditor.refs[o]); },
    _validateV3Required(t, e, i) { return void 0 !== t.required && !0 === t.required || void 0 === t.required && !0 === this.jsoneditor.options.required_by_default ? [{ path: i, property: 'required', message: this.translate('error_notset') }] : []; },
    _validateSubSchema: {
      enum(t, e, i) { const s = JSON.stringify(e); return t.enum.some((t) => s === JSON.stringify(t)) ? [] : [{ path: i, property: 'enum', message: this.translate('error_enum') }]; }, extends(t, e, i) { return t.extends.reduce((t, s) => (t.push(...this._validateSchema(s, e, i)), t), []); }, allOf(t, e, i) { return t.allOf.reduce((t, s) => (t.push(...this._validateSchema(s, e, i)), t), []); }, anyOf(t, e, i) { return t.anyOf.some((t) => !this._validateSchema(t, e, i).length) ? [] : [{ path: i, property: 'anyOf', message: this.translate('error_anyOf') }]; }, oneOf(t, e, i) { let s = 0; const n = []; t.oneOf.forEach((t, r) => { const o = this._validateSchema(t, e, i); o.length || s++, o.forEach((t) => { t.path = `${i}.oneOf[${r}]${t.path.substr(i.length)}`; }), n.push(...o); }); const r = []; return s !== 1 && (r.push({ path: i, property: 'oneOf', message: this.translate('error_oneOf', [s]) }), r.push(...n)), r; }, not(t, e, i) { return this._validateSchema(t.not, e, i).length ? [] : [{ path: i, property: 'not', message: this.translate('error_not') }]; }, type(t, e, i) { if (Array.isArray(t.type)) { if (!t.type.some((t) => this._checkType(t, e))) return [{ path: i, property: 'type', message: this.translate('error_type_union') }]; } else if (['date', 'time', 'datetime-local'].indexOf(t.format) !== -1 && t.type === 'integer') { if (!this._checkType('string', `${e}`)) return [{ path: i, property: 'type', message: this.translate('error_type', [t.format]) }]; } else if (!this._checkType(t.type, e)) return [{ path: i, property: 'type', message: this.translate('error_type', [t.type]) }]; return []; }, disallow(t, e, i) { if (Array.isArray(t.disallow)) { if (t.disallow.some((t) => this._checkType(t, e))) return [{ path: i, property: 'disallow', message: this.translate('error_disallow_union') }]; } else if (this._checkType(t.disallow, e)) return [{ path: i, property: 'disallow', message: this.translate('error_disallow', [t.disallow]) }]; return []; },
    },
    _validateByValueType(t, e, i) { const s = []; const n = this; if (e === null) return s; if (typeof e === 'number')Object.keys(t).forEach((r) => { this._validateNumberSubSchema[r] && s.push(...this._validateNumberSubSchema[r].call(n, t, e, i)); }); else if (typeof e === 'string')Object.keys(t).forEach((r) => { this._validateStringSubSchema[r] && s.push(...this._validateStringSubSchema[r].call(n, t, e, i)); }); else if (Array.isArray(e))Object.keys(t).forEach((r) => { this._validateArraySubSchema[r] && s.push(...this._validateArraySubSchema[r].call(n, t, e, i)); }); else if (typeof e === 'object') { const r = {}; Object.keys(t).forEach((o) => { this._validateObjectSubSchema[o] && s.push(...this._validateObjectSubSchema[o].call(n, t, e, i, r)); }), void 0 !== t.additionalProperties || !this.jsoneditor.options.no_additional_properties || t.oneOf || t.anyOf || (t.additionalProperties = !1), Object.keys(t).forEach((o) => { void 0 !== this._validateObjectSubSchema2[o] && s.push(...this._validateObjectSubSchema2[o].call(n, t, e, i, r)); }); } return s; },
    _validateNumberSubSchema: {
      multipleOf(t, e, i) { return this._validateNumberSubSchemaMultipleDivisible(t, e, i); }, divisibleBy(t, e, i) { return this._validateNumberSubSchemaMultipleDivisible(t, e, i); }, maximum(t, e, i) { let s = t.exclusiveMaximum ? e < t.maximum : e <= t.maximum; return window.math ? s = window.math[t.exclusiveMaximum ? 'smaller' : 'smallerEq'](window.math.bignumber(e), window.math.bignumber(t.maximum)) : window.Decimal && (s = new window.Decimal(e)[t.exclusiveMaximum ? 'lt' : 'lte'](new window.Decimal(t.maximum))), s ? [] : [{ path: i, property: 'maximum', message: this.translate(t.exclusiveMaximum ? 'error_maximum_excl' : 'error_maximum_incl', [t.maximum]) }]; }, minimum(t, e, i) { let s = t.exclusiveMinimum ? e > t.minimum : e >= t.minimum; return window.math ? s = window.math[t.exclusiveMinimum ? 'larger' : 'largerEq'](window.math.bignumber(e), window.math.bignumber(t.minimum)) : window.Decimal && (s = new window.Decimal(e)[t.exclusiveMinimum ? 'gt' : 'gte'](new window.Decimal(t.minimum))), s ? [] : [{ path: i, property: 'minimum', message: this.translate(t.exclusiveMinimum ? 'error_minimum_excl' : 'error_minimum_incl', [t.minimum]) }]; },
    },
    _validateNumberSubSchemaMultipleDivisible(t, e, i) { const s = t.multipleOf || t.divisibleBy; let n = e / s === Math.floor(e / s); return window.math ? n = window.math.mod(window.math.bignumber(e), window.math.bignumber(s)).equals(0) : window.Decimal && (n = new window.Decimal(e).mod(new window.Decimal(s)).equals(0)), n ? [] : [{ path: i, property: t.multipleOf ? 'multipleOf' : 'divisibleBy', message: this.translate('error_multipleOf', [s]) }]; },
    _validateStringSubSchema: { maxLength(t, e, i) { const s = []; return (`${e}`).length > t.maxLength && s.push({ path: i, property: 'maxLength', message: this.translate('error_maxLength', [t.maxLength]) }), s; }, minLength(t, e, i) { return (`${e}`).length < t.minLength ? [{ path: i, property: 'minLength', message: this.translate(t.minLength === 1 ? 'error_notempty' : 'error_minLength', [t.minLength]) }] : []; }, pattern(t, e, i) { return new RegExp(t.pattern).test(e) ? [] : [{ path: i, property: 'pattern', message: t.options && t.options.patternmessage ? t.options.patternmessage : this.translate('error_pattern', [t.pattern]) }]; } },
    _validateArraySubSchema: {
      items(t, e, i) { const s = []; if (Array.isArray(t.items)) for (let n = 0; n < e.length; n++) if (t.items[n])s.push(...this._validateSchema(t.items[n], e[n], `${i}.${n}`)); else { if (!0 === t.additionalItems) break; if (!t.additionalItems) { if (!1 === t.additionalItems) { s.push({ path: i, property: 'additionalItems', message: this.translate('error_additionalItems') }); break; } break; }s.push(...this._validateSchema(t.additionalItems, e[n], `${i}.${n}`)); } else e.forEach((e, n) => { s.push(...this._validateSchema(t.items, e, `${i}.${n}`)); }); return s; }, maxItems(t, e, i) { return e.length > t.maxItems ? [{ path: i, property: 'maxItems', message: this.translate('error_maxItems', [t.maxItems]) }] : []; }, minItems(t, e, i) { return e.length < t.minItems ? [{ path: i, property: 'minItems', message: this.translate('error_minItems', [t.minItems]) }] : []; }, uniqueItems(t, e, i) { const s = {}; for (let t = 0; t < e.length; t++) { const n = JSON.stringify(e[t]); if (s[n]) return [{ path: i, property: 'uniqueItems', message: this.translate('error_uniqueItems') }]; s[n] = !0; } return []; },
    },
    _validateObjectSubSchema: {
      maxProperties(t, e, i) { return Object.keys(e).length > t.maxProperties ? [{ path: i, property: 'maxProperties', message: this.translate('error_maxProperties', [t.maxProperties]) }] : []; }, minProperties(t, e, i) { return Object.keys(e).length < t.minProperties ? [{ path: i, property: 'minProperties', message: this.translate('error_minProperties', [t.minProperties]) }] : []; }, required(t, e, i) { const s = []; return Array.isArray(t.required) && t.required.forEach((t) => { if (void 0 !== e[t]) return; const n = this.jsoneditor.getEditor(`${i}.${t}`); n && ['button', 'info'].indexOf(n.schema.format || n.schema.type) !== -1 || s.push({ path: i, property: 'required', message: this.translate('error_required', [t]) }); }), s; }, properties(t, e, i, s) { const n = []; return Object.entries(t.properties).forEach(([t, r]) => { s[t] = !0, n.push(...this._validateSchema(r, e[t], `${i}.${t}`)); }), n; }, patternProperties(t, e, i, s) { const n = []; return Object.entries(t.patternProperties).forEach(([t, r]) => { const o = new RegExp(t); Object.entries(e).forEach(([t, e]) => { o.test(t) && (s[t] = !0, n.push(...this._validateSchema(r, e, `${i}.${t}`))); }); }), n; },
    },
    _validateObjectSubSchema2: { additionalProperties(t, e, i, s) { const n = []; for (const r in e) if (e.hasOwnProperty(r) && !s[r]) { if (!t.additionalProperties) { n.push({ path: i, property: 'additionalProperties', message: this.translate('error_additional_properties', [r]) }); break; } if (!0 === t.additionalProperties) break; n.push(...this._validateSchema(t.additionalProperties, e[r], `${i}.${r}`)); } return n; }, dependencies(t, e, i) { const s = []; return Object.entries(t.dependencies).forEach(([t, n]) => { void 0 !== e[t] && (Array.isArray(n) ? n.forEach((t) => { void 0 === e[t] && s.push({ path: i, property: 'dependencies', message: this.translate('error_dependency', [t]) }); }) : s.push(...this._validateSchema(n, e, i))); }), s; } },
    _validateDateTimeSubSchema(t, e, i) { const s = (t, e, i) => (1 * e < 1 ? [{ path: i, property: 'format', message: this.translate('error_invalid_epoch') }] : e !== Math.abs(parseInt(e)) ? [{ path: i, property: 'format', message: this.translate(`error_${t.format.replace(/-/g, '_')}`, [a]) }] : []); const n = (t, e, i, s) => { if (e !== '') { let t; if (s.flatpickr.config.mode !== 'single') { const e = s.flatpickr.config.mode === 'range' ? s.flatpickr.l10n.rangeSeparator : ', '; t = s.flatpickr.selectedDates.map((t) => s.flatpickr.formatDate(t, s.flatpickr.config.dateFormat)).join(e); } try { if (t) { if (t !== e) throw new Error(`${s.flatpickr.config.mode} mismatch`); } else if (s.flatpickr.formatDate(s.flatpickr.parseDate(e, s.flatpickr.config.dateFormat), s.flatpickr.config.dateFormat) !== e) throw new Error('mismatch'); } catch (t) { const e = void 0 !== s.flatpickr.config.errorDateFormat ? s.flatpickr.config.errorDateFormat : s.flatpickr.config.dateFormat; return [{ path: i, property: 'format', message: this.translate(`error_${s.format.replace(/-/g, '_')}`, [e]) }]; } } return []; }; const r = { date: /^(\d{4}\D\d{2}\D\d{2})?$/, time: /^(\d{2}:\d{2}(?::\d{2})?)?$/, 'datetime-local': /^(\d{4}\D\d{2}\D\d{2}[ T]\d{2}:\d{2}(?::\d{2})?)?$/ }; const o = this.jsoneditor.getEditor(i); const a = o && o.flatpickr ? o.flatpickr.config.dateFormat : { date: '"YYYY-MM-DD"', time: '"HH:MM"', 'datetime-local': '"YYYY-MM-DD HH:MM"' }[t.format]; if (t.type === 'integer') return s(t, e, i); if (o && o.flatpickr) { if (o) return n(0, e, i, o); } else if (!r[t.format].test(e)) return [{ path: i, property: 'format', message: this.translate(`error_${t.format.replace(/-/g, '_')}`, [a]) }]; return []; },
    _validateCustomValidator(t, e, i) { const s = []; s.push(...c.call(this, t, e, i, this.translate)); const n = (n) => { s.push(...n.call(this, t, e, i)); }; return this.defaults.custom_validators.forEach(n), this.options.custom_validators && this.options.custom_validators.forEach(n), s; },
    _removeDuplicateErrors(t) { return t.reduce((t, e) => { let i = !0; return t || (t = []), t.forEach((t) => { t.message === e.message && t.path === e.path && t.property === e.property && (t.errorcount++, i = !1); }), i && (e.errorcount = 1, t.push(e)), t; }, []); },
    _checkType(t, e) {
      const i = {
        string: (t) => typeof t === 'string', number: (t) => typeof t === 'number', integer: (t) => typeof t === 'number' && t === Math.floor(t), boolean: (t) => typeof t === 'boolean', array: (t) => Array.isArray(t), object: (t) => t !== null && !Array.isArray(t) && typeof t === 'object', null: (t) => t === null,
      }; return typeof t === 'string' ? !i[t] || i[t](e) : !this._validateSchema(t, e).length;
    },
  }); const p = d.extend({
    init(t) { this.options = t || {}, this.refs = this.options.refs || {}, this.refs_with_info = {}, this.refs_prefix = '#/counter/', this.refs_counter = 1; },
    load(t, e, i, s) { this._loadExternalRefs(t, () => { this._getDefinitions(t, `${i}#/definitions/`), e(this.expandRefs(t)); }, i, this._getFileBase(s)); },
    expandRefs(t, e) {
      const i = r({}, t); if (!i.$ref) return i; const s = this.refs_with_info[i.$ref]; delete i.$ref; const n = s.$ref.startsWith('#') ? s.fetchUrl : ''; const
        o = this._getRef(n, s); if (this.refs[o]) { if (e && this.refs[o].hasOwnProperty('allOf')) { const t = this.refs[o].allOf; Object.keys(t).forEach((e) => { t[e] = this.expandRefs(t[e], !0); }); } } else console.warn(`reference:'${o}' not found!`); return this.extendSchemas(i, this.expandSchema(this.refs[o]));
    },
    expandSchema(t, e) { Object.entries(this._subSchema1).forEach(([e, i]) => { t[e] && i.call(this, t); }); let i = r({}, t); return Object.entries(this._subSchema2).forEach(([e, s]) => { t[e] && (i = s.call(this, t, i)); }), this.expandRefs(i); },
    _subSchema1: {
      type(t) { typeof t.type === 'object' && (t.type = this._expandSubSchema(t.type)); }, disallow(t) { typeof t.disallow === 'object' && (t.disallow = this._expandSubSchema(t.disallow)); }, anyOf(t) { Object.entries(t.anyOf).forEach(([e, i]) => { t.anyOf[e] = this.expandSchema(i); }); }, dependencies(t) { Object.entries(t.dependencies).forEach(([e, i]) => { typeof i !== 'object' || Array.isArray(i) || (t.dependencies[e] = this.expandSchema(i)); }); }, not(t) { t.not = this.expandSchema(t.not); },
    },
    _subSchema2: { allOf(t, e) { let i = r({}, e); return Object.entries(t.allOf).forEach(([e, s]) => { t.allOf[e] = this.expandRefs(s, !0), i = this.extendSchemas(i, this.expandSchema(s)); }), delete i.allOf, i; }, extends(t, e) { let i; return i = Array.isArray(t.extends) ? t.extends.reduce((t, e, i) => this.extendSchemas(t, this.expandSchema(e)), e) : this.extendSchemas(e, this.expandSchema(t.extends)), delete i.extends, i; }, oneOf(t, e) { const i = r({}, e); return delete i.oneOf, t.oneOf.reduce((t, e, s) => (t.oneOf[s] = this.extendSchemas(this.expandSchema(e), i), t), e), e; } },
    _getRef(t, e) { const i = t + e; return this.refs[i] ? i : t + decodeURIComponent(e.$ref); },
    _expandSubSchema(t) { return Array.isArray(t) ? t.map((t) => (typeof value === 'object' ? this.expandSchema(t) : t)) : this.expandSchema(t); },
    _getDefinitions(t, e) { t.definitions && Object.keys(t.definitions).forEach((i) => { this.refs[e + i] = t.definitions[i], t.definitions[i].definitions && this._getDefinitions(t.definitions[i], `${e + i}/definitions/`); }); },
    _getExternalRefs(t, e) { const i = {}; const s = (t) => { Object.keys(t).forEach((t) => { i[t] = !0; }); }; if (t.$ref && typeof t.$ref !== 'object') { const s = this.refs_prefix + this.refs_counter++; t.$ref.substr(0, 1) === '#' || this.refs[t.$ref] || (i[t.$ref] = !0), this.refs_with_info[s] = { fetchUrl: e, $ref: t.$ref }, t.$ref = s; } return Object.values(t).forEach((t) => { t && typeof t === 'object' && (Array.isArray(t) ? Object.values(t).forEach((t) => { t && typeof t === 'object' && s(this._getExternalRefs(t, e)); }) : s(this._getExternalRefs(t, e))); }), i; },
    _getFileBase(t) { let e = this.options.ajaxBase; return void 0 === e && (e = this._getFileBaseFromFileLocation(t)), e; },
    _getFileBaseFromFileLocation(t) { const e = t.split('/'); return e.pop(), `${e.join('/')}/`; },
    _isLocalUrl(t, e) { return e !== t.substr(0, e.length) && t.substr(0, 4) !== 'http' && t.substr(0, 1) !== '/'; },
    _loadExternalRefs(t, e, i, s) { const n = this._getExternalRefs(t, i); let r = 0; let o = 0; let a = !1; Object.keys(n).forEach((t) => { if (this.refs[t]) return; if (!this.options.ajax) throw new Error(`Must set ajax option to true to load external ref ${t}`); this.refs[t] = 'loading', o++; const i = this._isLocalUrl(s, t) ? s + t : t; const n = new XMLHttpRequest(); n.overrideMimeType('application/json'), n.open('GET', i, !0), this.options.ajaxCredentials && (n.withCredentials = this.options.ajaxCredentials), n.onreadystatechange = () => { if (n.readyState === 4) { if (n.status !== 200) throw window.console.log(n), new Error(`Failed to fetch ref via ajax- ${t}`); { let s; try { s = JSON.parse(n.responseText); } catch (t) { throw window.console.log(t), new Error(`Failed to parse external ref ${i}`); } if (typeof s !== 'boolean' && typeof s !== 'object' || s === null || Array.isArray(s)) throw new Error(`External ref does not contain a valid schema - ${i}`); this.refs[t] = s; const l = this._getFileBaseFromFileLocation(i); this._getDefinitions(s, `${i}#/definitions/`), this._loadExternalRefs(s, () => { r++, r >= o && !a && (a = !0, e()); }, i, l); } } }, n.send(); }), o || e(); },
    extendSchemas(t, e) { t = r({}, t), e = r({}, e); const i = {}; const s = (t, s) => { ((t, e) => (t === 'required' || t === 'defaultProperties') && typeof e === 'object' && Array.isArray(e))(t, s) ? i[t] = s.concat(e[t]).reduce((t, e) => (t.indexOf(e) < 0 && t.push(e), t), []) : t !== 'type' || typeof s !== 'string' && !Array.isArray(s) ? typeof s !== 'object' || Array.isArray(s) || s === null ? i[t] = s : i[t] = this.extendSchemas(s, e[t]) : n(s); }; const n = (t) => { typeof t === 'string' && (t = [t]), typeof e.type === 'string' && (e.type = [e.type]), e.type && e.type.length ? i.type = t.filter((t) => e.type.indexOf(t) !== -1) : i.type = t, i.type.length === 1 && typeof i.type[0] === 'string' ? i.type = i.type[0] : i.type.length === 0 && delete i.type; }; return Object.entries(t).forEach(([t, n]) => { void 0 !== e[t] ? s(t, n) : i[t] = n; }), Object.entries(e).forEach(([e, s]) => { void 0 === t[e] && (i[e] = s); }), i; },
  }); let m; const f = (m = document.documentElement).matches ? 'matches' : m.webkitMatchesSelector ? 'webkitMatchesSelector' : m.mozMatchesSelector ? 'mozMatchesSelector' : m.msMatchesSelector ? 'msMatchesSelector' : m.oMatchesSelector ? 'oMatchesSelector' : void 0; const b = d.extend({
    init(t) { this.jsoneditor = t; },
    options: { disable_theme_rules: !1 },
    rules: { '.je-upload-preview img': 'float:left;margin:0 0.5rem 0.5rem 0;max-width:100%;max-height:100px' },
    getContainer() { return document.createElement('div'); },
    getFloatRightLinkHolder() { const t = document.createElement('div'); return t.style = t.style || {}, t.style.cssFloat = 'right', t.style.marginLeft = '10px', t; },
    getModal() { const t = document.createElement('div'); return t.style.backgroundColor = 'white', t.style.border = '1px solid black', t.style.boxShadow = '3px 3px black', t.style.position = 'absolute', t.style.zIndex = '10', t.style.display = 'none', t; },
    getGridContainer() { return document.createElement('div'); },
    getGridRow() { const t = document.createElement('div'); return t.classList.add('row'), t; },
    getGridColumn() { return document.createElement('div'); },
    setGridColumnSize(t, e) {},
    getLink(t) { const e = document.createElement('a'); return e.setAttribute('href', '#'), e.appendChild(document.createTextNode(t)), e; },
    disableHeader(t) { t.style.color = '#ccc'; },
    disableLabel(t) { t.style.color = '#ccc'; },
    enableHeader(t) { t.style.color = ''; },
    enableLabel(t) { t.style.color = ''; },
    getInfoButton(t) { const e = document.createElement('span'); e.innerText = 'ⓘ', e.style.fontSize = '16px', e.style.fontWeight = 'bold', e.style.padding = '.25rem', e.style.position = 'relative', e.style.display = 'inline-block'; const i = document.createElement('span'); return i.style.fontSize = '12px', e.style.fontWeight = 'normal', i.style['font-family'] = 'sans-serif', i.style.visibility = 'hidden', i.style['background-color'] = 'rgba(50, 50, 50, .75)', i.style.margin = '0 .25rem', i.style.color = '#FAFAFA', i.style.padding = '.5rem 1rem', i.style['border-radius'] = '.25rem', i.style.width = '20rem', i.style.position = 'absolute', i.innerText = t, e.onmouseover = function () { i.style.visibility = 'visible'; }, e.onmouseleave = function () { i.style.visibility = 'hidden'; }, e.appendChild(i), e; },
    getFormInputLabel(t, e) { const i = document.createElement('label'); return i.appendChild(document.createTextNode(t)), e && i.classList.add('required'), i; },
    getHeader(t) { const e = document.createElement('h3'); return typeof t === 'string' ? e.textContent = t : e.appendChild(t), e; },
    getCheckbox() { const t = this.getFormInputField('checkbox'); return t.style.display = 'inline-block', t.style.width = 'auto', t; },
    getCheckboxLabel(t, e) { const i = document.createElement('label'); return i.appendChild(document.createTextNode(` ${t}`)), e && i.classList.add('required'), i; },
    getMultiCheckboxHolder(t, e, i, s) { const n = document.createElement('div'); for (const r in n.classList.add('control-group'), e && (e.style.display = 'block', n.appendChild(e), s && e.appendChild(s)), t)t.hasOwnProperty(r) && (t[r].style.display = 'inline-block', t[r].style.marginRight = '20px', n.appendChild(t[r])); return i && n.appendChild(i), n; },
    getFormCheckboxControl(t, e, i) { const s = document.createElement('div'); return s.appendChild(t), e.style.width = 'auto', t.insertBefore(e, t.firstChild), i && this.applyStyles(s, { display: 'inline-block', marginRight: '1rem' }), s; },
    getFormRadio(t) { const e = this.getFormInputField('radio'); for (const i in t)e.setAttribute(i, t[i]); return e.style.display = 'inline-block', e.style.width = 'auto', e; },
    getFormRadioLabel(t, e) { const i = document.createElement('label'); return i.appendChild(document.createTextNode(` ${t}`)), e && i.classList.add('required'), i; },
    getFormRadioControl(t, e, i) { const s = document.createElement('div'); return s.appendChild(t), e.style.width = 'auto', t.insertBefore(e, t.firstChild), i && this.applyStyles(s, { display: 'inline-block', marginRight: '1rem' }), s; },
    getSelectInput(t, e) { const i = document.createElement('select'); return t && this.setSelectOptions(i, t), i; },
    getSwitcher(t) { const e = this.getSelectInput(t, !1); return e.style.backgroundColor = 'transparent', e.style.display = 'inline-block', e.style.fontStyle = 'italic', e.style.fontWeight = 'normal', e.style.height = 'auto', e.style.marginBottom = 0, e.style.marginLeft = '5px', e.style.padding = '0 0 0 3px', e.style.width = 'auto', e; },
    getSwitcherOptions(t) { return t.getElementsByTagName('option'); },
    setSwitcherOptions(t, e, i) { this.setSelectOptions(t, e, i); },
    setSelectOptions(t, e, i) { i = i || [], t.innerHTML = ''; for (let s = 0; s < e.length; s++) { const n = document.createElement('option'); n.setAttribute('value', e[s]), n.textContent = i[s] || e[s], t.appendChild(n); } },
    getTextareaInput() { const t = document.createElement('textarea'); return t.style = t.style || {}, t.style.width = '100%', t.style.height = '300px', t.style.boxSizing = 'border-box', t; },
    getRangeInput(t, e, i) { const s = this.getFormInputField('range'); return s.setAttribute('min', t), s.setAttribute('max', e), s.setAttribute('step', i), s; },
    getRangeOutput(t, e) { const i = document.createElement('output'); i.value = e || 0; const s = function () { i.value = this.value; }; return t.addEventListener('change', s, !1), t.addEventListener('input', s, !1), i; },
    getRangeControl(t, e) { const i = document.createElement('div'); return i.style.textAlign = 'center', e && i.appendChild(e), i.appendChild(t), i; },
    getFormInputField(t) { const e = document.createElement('input'); return e.setAttribute('type', t), e; },
    afterInputReady(t) {},
    getFormControl(t, e, i, s) { const n = document.createElement('div'); return n.classList.add('form-control'), t && n.appendChild(t), e.type !== 'checkbox' && e.type !== 'radio' || !t ? (s && t && t.appendChild(s), n.appendChild(e)) : (e.style.width = 'auto', t.insertBefore(e, t.firstChild), s && t.appendChild(s)), i && n.appendChild(i), n; },
    getIndentedPanel() { const t = document.createElement('div'); return t.style = t.style || {}, t.style.paddingLeft = '10px', t.style.marginLeft = '10px', t.style.borderLeft = '1px solid #ccc', t; },
    getTopIndentedPanel() { const t = document.createElement('div'); return t.style = t.style || {}, t.style.paddingLeft = '10px', t.style.marginLeft = '10px', t; },
    getChildEditorHolder() { return document.createElement('div'); },
    getDescription(t) { const e = document.createElement('p'); return window.DOMPurify ? e.innerHTML = window.DOMPurify.sanitize(t) : e.textContent = this.cleanText(t), e; },
    getCheckboxDescription(t) { return this.getDescription(t); },
    getFormInputDescription(t) { return this.getDescription(t); },
    getButtonHolder() { return document.createElement('span'); },
    getHeaderButtonHolder() { return this.getButtonHolder(); },
    getFormButtonHolder(t) { return this.getButtonHolder(); },
    getButton(t, e, i) { const s = document.createElement('button'); return s.type = 'button', this.setButtonText(s, t, e, i), s; },
    getFormButton(t, e, i) { return this.getButton(t, e, i); },
    setButtonText(t, e, i, s) { for (;t.firstChild;)t.removeChild(t.firstChild); if (i && (t.appendChild(i), e = ` ${e}`), !this.jsoneditor.options.iconlib || !this.jsoneditor.options.remove_button_labels || !i) { const n = document.createElement('span'); n.appendChild(document.createTextNode(e)), t.appendChild(n); }s && t.setAttribute('title', s); },
    getTable() { return document.createElement('table'); },
    getTableRow() { return document.createElement('tr'); },
    getTableHead() { return document.createElement('thead'); },
    getTableBody() { return document.createElement('tbody'); },
    getTableHeaderCell(t) { const e = document.createElement('th'); return e.textContent = t, e; },
    getTableCell() { return document.createElement('td'); },
    getErrorMessage(t) { const e = document.createElement('p'); return e.style = e.style || {}, e.style.color = 'red', e.appendChild(document.createTextNode(t)), e; },
    addInputError(t, e) {},
    removeInputError(t) {},
    addTableRowError(t) {},
    removeTableRowError(t) {},
    getTabHolder(t) { const e = void 0 === t ? '' : t; const i = document.createElement('div'); return i.innerHTML = `<div style='float: left; width: 130px;' class='tabs'></div><div class='content' style='margin-left: 120px;' id='${e}'></div><div style='clear:both;'></div>`, i; },
    getTopTabHolder(t) { const e = void 0 === t ? '' : t; const i = document.createElement('div'); return i.innerHTML = `<div class='tabs' style='margin-left: 10px;'></div><div style='clear:both;'></div><div class='content' id='${e}'></div>`, i; },
    applyStyles(t, e) { for (const i in e)e.hasOwnProperty(i) && (t.style[i] = e[i]); },
    closest(t, e) { for (;t && t !== document;) { if (!t[f]) return !1; if (t[f](e)) return t; t = t.parentNode; } return !1; },
    insertBasicTopTab(t, e) { e.firstChild.insertBefore(t, e.firstChild.firstChild); },
    getTab(t, e) {
      const i = document.createElement('div'); return i.appendChild(t), i.id = e, i.style = i.style || {}, this.applyStyles(i, {
        border: '1px solid #ccc', borderWidth: '1px 0 1px 1px', textAlign: 'center', lineHeight: '30px', borderRadius: '5px', borderBottomRightRadius: 0, borderTopRightRadius: 0, fontWeight: 'bold', cursor: 'pointer',
      }), i;
    },
    getTopTab(t, e) {
      const i = document.createElement('div'); return i.id = e, i.appendChild(t), i.style = i.style || {}, this.applyStyles(i, {
        float: 'left', border: '1px solid #ccc', borderWidth: '1px 1px 0px 1px', textAlign: 'center', lineHeight: '30px', borderRadius: '5px', paddingLeft: '5px', paddingRight: '5px', borderBottomRightRadius: 0, borderBottomLeftRadius: 0, fontWeight: 'bold', cursor: 'pointer',
      }), i;
    },
    getTabContentHolder(t) { return t.children[1]; },
    getTopTabContentHolder(t) { return t.children[1]; },
    getTabContent() { return this.getIndentedPanel(); },
    getTopTabContent() { return this.getTopIndentedPanel(); },
    markTabActive(t) { this.applyStyles(t.tab, { opacity: 1, background: 'white' }), void 0 !== t.rowPane ? t.rowPane.style.display = '' : t.container.style.display = ''; },
    markTabInactive(t) { this.applyStyles(t.tab, { opacity: 0.5, background: '' }), void 0 !== t.rowPane ? t.rowPane.style.display = 'none' : t.container.style.display = 'none'; },
    addTab(t, e) { t.children[0].appendChild(e); },
    addTopTab(t, e) { t.children[0].appendChild(e); },
    getBlockLink() { const t = document.createElement('a'); return t.style.display = 'block', t; },
    getBlockLinkHolder() { return document.createElement('div'); },
    getLinksHolder() { return document.createElement('div'); },
    createMediaLink(t, e, i) { t.appendChild(e), i.style.width = '100%', t.appendChild(i); },
    createImageLink(t, e, i) { t.appendChild(e), e.appendChild(i); },
    getFirstTab(t) { return t.firstChild.firstChild; },
    getInputGroup(t, e) {},
    cleanText(t) { const e = document.createElement('div'); return e.innerHTML = t, e.textContent || e.innerText; },
    getDropZone(t) { const e = document.createElement('div'); return e.setAttribute('data-text', t), e.classList.add('je-dropzone'), e; },
    getUploadPreview(t, e, i) { const s = document.createElement('div'); if (s.classList.add('je-upload-preview'), t.mimeType.substr(0, 5) === 'image') { const n = document.createElement('img'); n.src = i, s.appendChild(n); } const r = document.createElement('div'); r.innerHTML += `<strong>Name:</strong> ${t.name}<br><strong>Type:</strong> ${t.type}<br><strong>Size:</strong> ${t.formattedSize}`, s.appendChild(r), s.appendChild(e); const o = document.createElement('div'); return o.style.clear = 'left', s.appendChild(o), s; },
    getProgressBar() { const t = document.createElement('progress'); return t.setAttribute('max', 100), t.setAttribute('value', 0), t; },
    updateProgressBar(t, e) { t && t.setAttribute('value', e); },
    updateProgressBarUnknown(t) { t && t.removeAttribute('value'); },
  }); const g = d.extend({
    mapping: {
      collapse: '', expand: '', delete: '', edit: '', add: '', cancel: '', save: '', moveup: '', movedown: '',
    },
    icon_prefix: '',
    getIconClass(t) { return this.mapping[t] ? this.icon_prefix + this.mapping[t] : null; },
    getIcon(t) { const e = this.getIconClass(t); if (!e) return null; const i = document.createElement('i'); return i.classList.add.apply(i.classList, e.split(' ')), i; },
  }); const _ = i(1); const v = b.extend({
    options: { disable_theme_rules: !1 }, rules: _, getFormInputLabel(t, e) { const i = this._super(t, e); return i.classList.add('je-form-input-label'), i; }, getFormInputDescription(t) { const e = this._super(t); return e.classList.add('je-form-input-label'), e; }, getIndentedPanel() { const t = this._super(); return t.classList.add('je-indented-panel'), t; }, getTopIndentedPanel() { return this.getIndentedPanel(); }, getChildEditorHolder() { const t = this._super(); return t.classList.add('je-child-editor-holder'), t; }, getHeaderButtonHolder() { const t = this.getButtonHolder(); return t.classList.add('je-header-button-holder'), t; }, getTable() { const t = this._super(); return t.classList.add('je-table'), t; }, addInputError(t, e) { if (t.style.borderColor = 'red', t.errmsg)t.errmsg.style.display = 'block'; else { const i = this.closest(t, '.form-control'); t.errmsg = document.createElement('div'), t.errmsg.setAttribute('class', 'errmsg'), t.errmsg.style = t.errmsg.style || {}, t.errmsg.style.color = 'red', i.appendChild(t.errmsg); }t.errmsg.innerHTML = '', t.errmsg.appendChild(document.createTextNode(e)); }, removeInputError(t) { t.style && (t.style.borderColor = ''), t.errmsg && (t.errmsg.style.display = 'none'); },
  }); const y = i(2); const w = b.extend({
    options: {
      disable_theme_rules: !1, input_size: 'normal', custom_forms: !1, object_indent: !0, object_background: 'bg-light', object_text: '', table_border: !1, table_zebrastyle: !1, tooltip: 'bootstrap',
    },
    rules: y,
    getSelectInput(t, e) { const i = this._super(t); return i.classList.add('form-control'), !1 === this.options.custom_forms ? (this.options.input_size === 'small' && i.classList.add('form-control-sm'), this.options.input_size === 'large' && i.classList.add('form-control-lg')) : (i.classList.remove('form-control'), i.classList.add('custom-select'), this.options.input_size === 'small' && i.classList.add('custom-select-sm'), this.options.input_size === 'large' && i.classList.add('custom-select-lg')), i; },
    getContainer() { const t = document.createElement('div'); return this.options.object_indent || t.classList.add('je-noindent'), t; },
    setGridColumnSize(t, e, i) { t.classList.add(`col-md-${e}`), i && t.classList.add(`offset-md-${i}`); },
    afterInputReady(t) { if (!t.controlgroup) { const e = t.name; t.id = e; const i = t.parentNode.parentNode.getElementsByTagName('label')[0]; i && (i.htmlFor = e), t.controlgroup = this.closest(t, '.form-group'); } },
    getTextareaInput() { const t = document.createElement('textarea'); return t.classList.add('form-control'), this.options.input_size === 'small' && t.classList.add('form-control-sm'), this.options.input_size === 'large' && t.classList.add('form-control-lg'), t; },
    getRangeInput(t, e, i) { const s = this._super(t, e, i); return !0 === this.options.custom_forms && (s.classList.remove('form-control'), s.classList.add('custom-range')), s; },
    getFormInputField(t) { const e = this._super(t); return t !== 'checkbox' && t !== 'radio' && t !== 'file' && (e.classList.add('form-control'), this.options.input_size === 'small' && e.classList.add('form-control-sm'), this.options.input_size === 'large' && e.classList.add('form-control-lg')), t === 'file' && e.classList.add('form-control-file'), e; },
    getFormControl(t, e, i, s) { const n = document.createElement('div'); if (n.classList.add('form-group'), !t || e.type !== 'checkbox' && e.type !== 'radio')t && (n.appendChild(t), s && n.appendChild(s)), n.appendChild(e); else { const r = document.createElement('div'); !1 === this.options.custom_forms ? (r.classList.add('form-check'), e.classList.add('form-check-input'), t.classList.add('form-check-label')) : (r.classList.add('custom-control'), e.classList.add('custom-control-input'), t.classList.add('custom-control-label'), e.type === 'checkbox' ? r.classList.add('custom-checkbox') : r.classList.add('custom-radio')), r.appendChild(e), r.appendChild(t), s && r.appendChild(s), n.appendChild(r); } return i && n.appendChild(i), n; },
    getInfoButton(t) { const e = document.createElement('button'); e.type = 'button', e.classList.add('ml-3', 'jsoneditor-twbs4-text-button'), e.setAttribute('data-toggle', 'tooltip'), e.setAttribute('data-placement', 'auto'), e.title = t; const i = document.createTextNode('ⓘ'); return e.appendChild(i), this.options.tooltip === 'bootstrap' ? window.jQuery && window.jQuery().tooltip ? window.jQuery(e).tooltip() : console.warn('Could not find popper jQuery plugin of Bootstrap.') : this.options.tooltip === 'css' && e.classList.add('je-tooltip'), e; },
    getCheckbox() { return this.getFormInputField('checkbox'); },
    getMultiCheckboxHolder(t, e, i, s) { const n = document.createElement('div'); n.classList.add('form-group'), e && (n.appendChild(e), s && e.appendChild(s)); const r = document.createElement('div'); for (const o in t) if (t.hasOwnProperty(o)) { const a = t[o].firstChild; r.appendChild(a); } return n.appendChild(r), i && n.appendChild(i), n; },
    getFormRadio(t) { const e = this.getFormInputField('radio'); for (const i in t)e.setAttribute(i, t[i]); return !1 === this.options.custom_forms ? e.classList.add('form-check-input') : e.classList.add('custom-control-input'), e; },
    getFormRadioLabel(t, e) { const i = document.createElement('label'); return !1 === this.options.custom_forms ? i.classList.add('form-check-label') : i.classList.add('custom-control-label'), i.appendChild(document.createTextNode(t)), i; },
    getFormRadioControl(t, e, i) { const s = document.createElement('div'); return !1 === this.options.custom_forms ? s.classList.add('form-check') : s.classList.add('custom-control', 'custom-radio'), s.appendChild(e), s.appendChild(t), i && (!1 === this.options.custom_forms ? s.classList.add('form-check-inline') : s.classList.add('custom-control-inline')), s; },
    getIndentedPanel() { const t = document.createElement('div'); return t.classList.add('card', 'card-body', 'mb-3'), this.options.object_background && t.classList.add(this.options.object_background), this.options.object_text && t.classList.add(this.options.object_text), t; },
    getFormInputDescription(t) { const e = document.createElement('small'); return e.classList.add('form-text'), window.DOMPurify ? e.innerHTML = window.DOMPurify.sanitize(t) : e.textContent = this.cleanText(t), e; },
    getHeader(t) { const e = document.createElement('h3'); return e.classList.add('card-title'), typeof t === 'string' ? e.textContent = t : e.appendChild(t), e; },
    getHeaderButtonHolder() { return this.getButtonHolder(); },
    getButtonHolder() { const t = document.createElement('span'); return t.classList.add('btn-group'), t; },
    getFormButtonHolder(t) { const e = this.getButtonHolder(); return e.classList.add('d-block'), t === 'center' ? e.classList.add('text-center') : t === 'right' && e.classList.add('text-right'), e; },
    getButton(t, e, i) { const s = this._super(t, e, i); return s.classList.add('btn', 'btn-secondary', 'btn-sm'), s; },
    getTable() { const t = document.createElement('table'); return t.classList.add('table', 'table-sm'), this.options.table_border && t.classList.add('table-bordered'), this.options.table_zebrastyle && t.classList.add('table-striped'), t; },
    getErrorMessage(t) { const e = document.createElement('div'); return e.classList.add('alert', 'alert-danger'), e.setAttribute('role', 'alert'), e.appendChild(document.createTextNode(t)), e; },
    addInputError(t, e) { t.controlgroup && (t.classList.add('is-invalid'), t.errmsg ? t.errmsg.style.display = '' : (t.errmsg = document.createElement('p'), t.errmsg.classList.add('invalid-feedback'), t.controlgroup.appendChild(t.errmsg)), t.errmsg.textContent = e); },
    removeInputError(t) { t.errmsg && (t.errmsg.style.display = 'none', t.classList.remove('is-invalid')); },
    getTabHolder(t) { const e = document.createElement('div'); const i = void 0 === t ? '' : t; return e.innerHTML = `<div class='col-md-2' id='${i}'><ul class='nav flex-column nav-pills'></ul></div><div class='col-md-10'><div class='tab-content' id='${i}'></div></div>`, e.classList.add('row'), e; },
    addTab(t, e) { t.children[0].children[0].appendChild(e); },
    getTabContentHolder(t) { return t.children[1].children[0]; },
    getTopTabHolder(t) { const e = void 0 === t ? '' : t; const i = document.createElement('div'); return i.classList.add('card'), i.innerHTML = `<div class='card-header'><ul class='nav nav-tabs card-header-tabs' id='${e}'></ul></div><div class='card-body'><div class='tab-content' id='${e}'></div></div>`, i; },
    getTab(t, e) { const i = document.createElement('li'); i.classList.add('nav-item'); const s = document.createElement('a'); return s.classList.add('nav-link'), s.setAttribute('href', `#${e}`), s.setAttribute('data-toggle', 'tab'), s.appendChild(t), i.appendChild(s), i; },
    getTopTab(t, e) { const i = document.createElement('li'); i.classList.add('nav-item'); const s = document.createElement('a'); return s.classList.add('nav-link'), s.setAttribute('href', `#${e}`), s.setAttribute('data-toggle', 'tab'), s.appendChild(t), i.appendChild(s), i; },
    getTabContent() { const t = document.createElement('div'); return t.classList.add('tab-pane'), t.setAttribute('role', 'tabpanel'), t; },
    getTopTabContent() { const t = document.createElement('div'); return t.classList.add('tab-pane'), t.setAttribute('role', 'tabpanel'), t; },
    markTabActive(t) { t.tab.firstChild.classList.add('active'), void 0 !== t.rowPane ? t.rowPane.classList.add('active') : t.container.classList.add('active'); },
    markTabInactive(t) { t.tab.firstChild.classList.remove('active'), void 0 !== t.rowPane ? t.rowPane.classList.remove('active') : t.container.classList.remove('active'); },
    insertBasicTopTab(t, e) { e.children[0].children[0].insertBefore(t, e.children[0].children[0].firstChild); },
    addTopTab(t, e) { t.children[0].children[0].appendChild(e); },
    getTopTabContentHolder(t) { return t.children[1].children[0]; },
    getProgressBar() { const t = document.createElement('div'); t.classList.add('progress'); const e = document.createElement('div'); return e.classList.add('progress-bar'), e.setAttribute('role', 'progressbar'), e.setAttribute('aria-valuenow', 0), e.setAttribute('aria-valuemin', 0), e.setAttribute('aria-valuenax', 100), e.innerHTML = '0%', t.appendChild(e), t; },
    updateProgressBar(t, e) { if (t) { const i = t.firstChild; const s = `${e}%`; i.setAttribute('aria-valuenow', e), i.style.width = s, i.innerHTML = s; } },
    updateProgressBarUnknown(t) { if (t) { const e = t.firstChild; t.classList.add('progress', 'progress-striped', 'active'), e.removeAttribute('aria-valuenow'), e.style.width = '100%', e.innerHTML = ''; } },
    getBlockLink() { const t = document.createElement('a'); return t.classList.add('mb-3', 'd-inline-block'), t; },
    getLinksHolder() { return document.createElement('div'); },
    getInputGroup(t, e) { if (t) { const i = document.createElement('div'); i.classList.add('input-group'), i.appendChild(t); const s = document.createElement('div'); s.classList.add('input-group-append'), i.appendChild(s); for (let n = 0; n < e.length; n++)e[n].classList.remove('mr-2', 'btn-secondary'), e[n].classList.add('btn-outline-secondary'), s.appendChild(e[n]); return i; } },
  }); const x = b.extend({
    options: { disable_theme_rules: !1 }, rules: { 'div[data-schemaid="root"]:after': 'position:relative;color:red;margin:10px 0;font-weight:600;display:block;width:100%;text-align:center;content:"This is an old JSON-Editor 1.x Theme and might not display elements correctly when used with the 2.x version"' }, getTable() { const t = this._super(); return t.setAttribute('cellpadding', 5), t.setAttribute('cellspacing', 0), t; }, getTableHeaderCell(t) { const e = this._super(t); return e.classList.add('ui-state-active'), e.style.fontWeight = 'bold', e; }, getTableCell() { const t = this._super(); return t.classList.add('ui-widget-content'), t; }, getHeaderButtonHolder() { const t = this.getButtonHolder(); return t.style.marginLeft = '10px', t.style.fontSize = '.6em', t.style.display = 'inline-block', t; }, getFormInputDescription(t) { const e = this.getDescription(t); return e.style.marginLeft = '10px', e.style.display = 'inline-block', e; }, getFormControl(t, e, i, s) { const n = this._super(t, e, i, s); return e.type === 'checkbox' ? (n.style.lineHeight = '25px', n.style.padding = '3px 0') : n.style.padding = '4px 0 8px 0', n; }, getDescription(t) { const e = document.createElement('span'); return e.style.fontSize = '.8em', e.style.fontStyle = 'italic', window.DOMPurify ? e.innerHTML = window.DOMPurify.sanitize(t) : e.textContent = this.cleanText(t), e; }, getButtonHolder() { const t = document.createElement('div'); return t.classList.add('ui-buttonset'), t.style.fontSize = '.7em', t; }, getFormInputLabel(t, e) { const i = document.createElement('label'); return i.style.fontWeight = 'bold', i.style.display = 'block', i.textContent = t, e && i.classList.add('required'), i; }, getButton(t, e, i) { const s = document.createElement('button'); s.classList.add('ui-button', 'ui-widget', 'ui-state-default', 'ui-corner-all'), e && !t ? (s.classList.add('ui-button-icon-only'), e.classList.add('ui-button-icon-primary', 'ui-icon-primary'), s.appendChild(e)) : e ? (s.classList.add('ui-button-text-icon-primary'), e.classList.add('ui-button-icon-primary', 'ui-icon-primary'), s.appendChild(e)) : s.classList.add('ui-button-text-only'); const n = document.createElement('span'); return n.classList.add('ui-button-text'), n.textContent = t || i || '.', s.appendChild(n), s.setAttribute('title', i), s; }, setButtonText(t, e, i, s) { t.innerHTML = '', t.classList.add('ui-button', 'ui-widget', 'ui-state-default', 'ui-corner-all'), i && !e ? (t.classList.add('ui-button-icon-only'), i.classList.add('ui-button-icon-primary', 'ui-icon-primary'), t.appendChild(i)) : i ? (t.classList.add('ui-button-text-icon-primary'), i.classList.add('ui-button-icon-primary', 'ui-icon-primary'), t.appendChild(i)) : t.classList.add('ui-button-text-only'); const n = document.createElement('span'); n.classList.add('ui-button-text'), n.textContent = e || s || '.', t.appendChild(n), t.setAttribute('title', s); }, getIndentedPanel() { const t = document.createElement('div'); return t.classList.add('ui-widget-content', 'ui-corner-all'), t.style.padding = '1em 1.4em', t.style.marginBottom = '20px', t; }, afterInputReady(t) { if (!t.controls && (t.controls = this.closest(t, '.form-control'), this.queuedInputErrorText)) { const e = this.queuedInputErrorText; delete this.queuedInputErrorText, this.addInputError(t, e); } }, addInputError(t, e) { t.controls ? (t.errmsg ? t.errmsg.style.display = '' : (t.errmsg = document.createElement('div'), t.errmsg.classList.add('ui-state-error'), t.controls.appendChild(t.errmsg)), t.errmsg.textContent = e) : this.queuedInputErrorText = e; }, removeInputError(t) { t.controls || delete this.queuedInputErrorText, t.errmsg && (t.errmsg.style.display = 'none'); }, markTabActive(t) { t.tab.classList.remove('ui-widget-header'), t.tab.classList.add('ui-state-active'), void 0 !== t.rowPane ? t.rowPane.style.display = '' : t.container.style.display = ''; }, markTabInactive(t) { t.tab.classList.add('ui-widget-header'), t.tab.classList.remove('ui-state-active'), void 0 !== t.rowPane ? t.rowPane.style.display = 'none' : t.container.style.display = 'none'; },
  }); const C = i(3); const k = b.extend({
    options: { disable_theme_rules: !1 }, rules: C, addInputError(t, e) { if (t.errmsg)t.errmsg.style.display = 'block'; else { const i = this.closest(t, '.form-control'); t.errmsg = document.createElement('div'), t.errmsg.setAttribute('class', 'errmsg'), i.appendChild(t.errmsg); }t.errmsg.innerHTML = '', t.errmsg.appendChild(document.createTextNode(e)); }, removeInputError(t) { t.style && (t.style.borderColor = ''), t.errmsg && (t.errmsg.style.display = 'none'); },
  }); const L = i(4); const j = b.extend({
    options: {
      disable_theme_rules: !1, label_bold: !0, align_bottom: !1, object_indent: !1, object_border: !1, table_border: !1, table_zebrastyle: !1, input_size: 'normal',
    },
    rules: L,
    setGridColumnSize(t, e, i) { t.classList.add(`col-${e}`), i && t.classList.add('col-mx-auto'); },
    getGridContainer() { const t = document.createElement('div'); return t.classList.add('container'), this.options.object_indent || t.classList.add('je-noindent'), t; },
    getGridRow() { const t = document.createElement('div'); return t.classList.add('columns'), t; },
    getGridColumn() { const t = document.createElement('div'); return t.classList.add('column'), this.options.align_bottom && t.classList.add('je-align-bottom'), t; },
    getIndentedPanel() { const t = document.createElement('div'); return t.classList.add('je-panel'), this.options.object_border && t.classList.add('je-border'), t; },
    getTopIndentedPanel() { const t = document.createElement('div'); return t.classList.add('je-panel-top'), this.options.object_border && t.classList.add('je-border'), t; },
    getHeaderButtonHolder() { return this.getButtonHolder(); },
    getButtonHolder() { const t = this._super(); return t.classList.add('btn-group'), t; },
    getFormButtonHolder(t) { const e = this._super(); return e.classList.remove('btn-group'), e.classList.add('d-block'), t === 'center' ? e.classList.add('text-center') : t === 'right' ? e.classList.add('text-right') : e.classList.add('text-left'), e; },
    getFormButton(t, e, i) { const s = this._super(t, e, i); return s.classList.add('btn', 'btn-primary', 'mx-2', 'my-1'), this.options.input_size !== 'small' && s.classList.remove('btn-sm'), this.options.input_size === 'large' && s.classList.add('btn-lg'), s; },
    getButton(t, e, i) { const s = this._super(t, e, i); return s.classList.add('btn', 'btn-sm', 'btn-primary', 'mr-2', 'my-1'), s; },
    getHeader(t) { const e = document.createElement('h4'); return typeof t === 'string' ? e.textContent = t : e.appendChild(t), e; },
    getFormInputDescription(t) { const e = this._super(t); return e.classList.add('je-desc', 'hide-sm'), e; },
    getFormInputLabel(t, e) { const i = this._super(t, e); return this.options.label_bold && i.classList.add('je-label'), i; },
    getCheckbox() { return this.getFormInputField('checkbox'); },
    getCheckboxLabel(t, e) { const i = this._super(t, e); const s = document.createElement('i'); return s.classList.add('form-icon'), i.classList.add('form-checkbox', 'mr-5'), i.insertBefore(s, i.firstChild), i; },
    getFormCheckboxControl(t, e, i) { return t.insertBefore(e, t.firstChild), i && t.classList.add('form-inline'), t; },
    getMultiCheckboxHolder(t, e, i, s) { return console.log('mul'), this._super(t, e, i, s); },
    getFormRadio(t) { const e = this.getFormInputField('radio'); for (const i in t)e.setAttribute(i, t[i]); return e; },
    getFormRadioLabel(t, e) { const i = this._super(t, e); const s = document.createElement('i'); return s.classList.add('form-icon'), i.classList.add('form-radio'), i.insertBefore(s, i.firstChild), i; },
    getFormRadioControl(t, e, i) { return t.insertBefore(e, t.firstChild), i && t.classList.add('form-inline'), t; },
    getFormInputField(t) { const e = this._super(t); return ['checkbox', 'radio'].indexOf(t) < 0 && e.classList.add('form-input'), e; },
    getRangeInput(t, e, i) { const s = this.getFormInputField('range'); return s.classList.add('slider'), s.classList.remove('form-input'), s.setAttribute('oninput', 'this.setAttribute("value", this.value)'), s.setAttribute('min', t), s.setAttribute('max', e), s.setAttribute('step', i), s; },
    getRangeControl(t, e) { const i = this._super(t, e); return i.classList.add('text-center'), i; },
    getSelectInput(t, e) { const i = this._super(t); return i.classList.add('form-select'), i; },
    getTextareaInput() { const t = document.createElement('textarea'); return t.classList.add('form-input'), t; },
    getFormControl(t, e, i, s) { const n = document.createElement('div'); return n.classList.add('form-group'), t && (e.type === 'checkbox' && (t = this.getFormCheckboxControl(t, e, !1)), t.classList.add('form-label'), n.appendChild(t), s && n.insertBefore(s, n.firstChild)), this.options.input_size === 'small' ? e.classList.add('input-sm', 'select-sm') : this.options.input_size === 'large' && e.classList.add('input-lg', 'select-lg'), e.type !== 'checkbox' && n.appendChild(e), i && n.appendChild(i), n; },
    getInputGroup(t, e) { if (t) { const i = document.createElement('div'); i.classList.add('input-group'), i.appendChild(t); for (let s = 0; s < e.length; s++)e[s].classList.add('input-group-btn'), e[s].classList.remove('btn-sm', 'mr-2', 'my-1'), i.appendChild(e[s]); return i; } },
    getInfoButton(t) { const e = document.createElement('div'); e.classList.add('popover', 'popover-left', 'float-right'); const i = document.createElement('button'); i.classList.add('btn', 'btn-secondary', 'btn-info', 'btn-action', 's-circle'), i.setAttribute('tabindex', '-1'), e.appendChild(i); const s = document.createTextNode('I'); i.appendChild(s); const n = document.createElement('div'); n.classList.add('popover-container'), e.appendChild(n); const r = document.createElement('div'); r.classList.add('card'), n.appendChild(r); const o = document.createElement('div'); return o.classList.add('card-body'), o.innerHTML = t, r.appendChild(o), e; },
    getTable() { const t = this._super(); return t.classList.add('table', 'table-scroll'), this.options.table_border && t.classList.add('je-table-border'), this.options.table_zebrastyle && t.classList.add('table-striped'), t; },
    getProgressBar() { const t = this._super(); return t.classList.add('progress'), t; },
    getTabHolder(t) { const e = void 0 === t ? '' : t; const i = document.createElement('div'); return i.classList.add('columns'), i.innerHTML = `<div class="column col-2"></div><div class="column col-10 content" id="${e}"></div>`, i; },
    getTopTabHolder(t) { const e = void 0 === t ? '' : t; const i = document.createElement('div'); return i.innerHTML = `<ul class="tab"></ul><div class="content" id="${e}"></div>`, i; },
    getTab(t, e) { const i = document.createElement('a'); return i.classList.add('btn', 'btn-secondary', 'btn-block'), i.id = e, i.innerHTML = t.innerHTML, i; },
    getTopTab(t, e) { const i = document.createElement('li'); i.id = e, i.classList.add('tab-item'); const s = document.createElement('a'); return s.href = '#', s.innerHTML = t.innerHTML, i.appendChild(s), i; },
    markTabActive(t) { t.tab.classList.add('active'), void 0 !== t.rowPane ? t.rowPane.style.display = '' : t.container.style.display = ''; },
    markTabInactive(t) { t.tab.classList.remove('active'), void 0 !== t.rowPane ? t.rowPane.style.display = 'none' : t.container.style.display = 'none'; },
    afterInputReady(t) { if (t.localName === 'select') if (t.classList.contains('selectized')) { const e = t.nextSibling; e && (e.classList.remove('form-select'), o(e.querySelectorAll('.form-select'), ((t, e) => { e.classList.remove('form-select'); }))); } else if (t.classList.contains('select2-hidden-accessible')) { const i = t.nextSibling; i && i.querySelector('.select2-selection--single') && i.classList.add('form-select'); }t.controlgroup || (t.controlgroup = this.closest(t, '.form-group'), this.closest(t, '.compact') && (t.controlgroup.style.marginBottom = 0)); },
    addInputError(t, e) { t.controlgroup && (t.controlgroup.classList.add('has-error'), t.errmsg || (t.errmsg = document.createElement('p'), t.errmsg.classList.add('form-input-hint'), t.controlgroup.appendChild(t.errmsg)), t.errmsg.classList.remove('d-hide'), t.errmsg.textContent = e); },
    removeInputError(t) { t.errmsg && (t.errmsg.classList.add('d-hide'), t.controlgroup.classList.remove('has-error')); },
  }); const E = i(5); const T = b.extend({
    options: {
      disable_theme_rules: !1, label_bold: !1, object_panel_default: !0, object_indent: !0, object_border: !1, table_border: !1, table_hdiv: !1, table_zebrastyle: !1, input_size: 'small', enable_compact: !1,
    },
    rules: E,
    getGridContainer() { const t = document.createElement('div'); return t.classList.add('flex', 'flex-col', 'w-full'), this.options.object_indent || t.classList.add('je-noindent'), t; },
    getGridRow() { const t = document.createElement('div'); return t.classList.add('flex', 'flex-wrap', 'w-full'), t; },
    getGridColumn() { const t = document.createElement('div'); return t.classList.add('flex', 'flex-col'), t; },
    setGridColumnSize(t, e, i) { e > 0 && e < 12 ? t.classList.add(`w-${e}/12`, 'px-1') : t.classList.add('w-full', 'px-1'), i && (t.style.marginLeft = `${100 / 12 * i}%`); },
    getIndentedPanel() { const t = document.createElement('div'); return this.options.object_panel_default ? t.classList.add('w-full', 'p-1') : t.classList.add('relative', 'flex', 'flex-col', 'rounded', 'break-words', 'border', 'bg-white', 'border-0', 'border-blue-400', 'p-1', 'shadow-md'), this.options.object_border && t.classList.add('je-border'), t; },
    getTopIndentedPanel() { const t = document.createElement('div'); return this.options.object_panel_default ? t.classList.add('w-full', 'm-2') : t.classList.add('relative', 'flex', 'flex-col', 'rounded', 'break-words', 'border', 'bg-white', 'border-0', 'border-blue-400', 'p-1', 'shadow-md'), this.options.object_border && t.classList.add('je-border'), t; },
    getTitle() { return this.schema.title; },
    getSelectInput(t, e) { const i = this._super(t); return e ? i.classList.add('form-multiselect', 'block', 'py-0', 'h-auto', 'w-full', 'px-1', 'text-sm', 'text-black', 'leading-normal', 'bg-white', 'border', 'border-grey', 'rounded') : i.classList.add('form-select', 'block', 'py-0', 'h-6', 'w-full', 'px-1', 'text-sm', 'text-black', 'leading-normal', 'bg-white', 'border', 'border-grey', 'rounded'), this.options.enable_compact && i.classList.add('compact'), i; },
    afterInputReady(t) { t.controlgroup || (t.controlgroup = this.closest(t, '.form-group'), this.closest(t, '.compact') && (t.controlgroup.style.marginBottom = 0)); },
    getTextareaInput() { const t = this._super(); return t.classList.add('block', 'w-full', 'px-1', 'text-sm', 'leading-normal', 'bg-white', 'text-black', 'border', 'border-grey', 'rounded'), this.options.enable_compact && t.classList.add('compact'), t.style.height = 0, t; },
    getRangeInput(t, e, i) { const s = this.getFormInputField('range'); return s.classList.add('slider'), this.options.enable_compact && s.classList.add('compact'), s.setAttribute('oninput', 'this.setAttribute("value", this.value)'), s.setAttribute('min', t), s.setAttribute('max', e), s.setAttribute('step', i), s; },
    getRangeControl(t, e) { const i = this._super(t, e); return i.classList.add('text-center', 'text-black'), i; },
    getCheckbox() { const t = this.getFormInputField('checkbox'); return t.classList.add('form-checkbox', 'text-red-600'), t; },
    getCheckboxLabel(t, e) { const i = this._super(t, e); return i.classList.add('inline-flex', 'items-center'), i; },
    getFormCheckboxControl(t, e, i) { return t.insertBefore(e, t.firstChild), i && t.classList.add('inline-flex flex-row'), t; },
    getMultiCheckboxHolder(t, e, i, s) { const n = this._super(t, e, i, s); return n.classList.add('inline-flex', 'flex-col'), n; },
    getFormRadio(t) { const e = this.getFormInputField('radio'); for (const i in e.classList.add('form-radio', 'text-red-600'), t)e.setAttribute(i, t[i]); return e; },
    getFormRadioLabel(t, e) { const i = this._super(t, e); return i.classList.add('inline-flex', 'items-center', 'mr-2'), i; },
    getFormRadioControl(t, e, i) { return t.insertBefore(e, t.firstChild), i && t.classList.add('form-radio'), t; },
    getRadioHolder(t, e, i, s, n) { const r = this._super(e, i, s, n); return t.options.layout === 'h' ? r.classList.add('inline-flex', 'flex-row') : r.classList.add('inline-flex', 'flex-col'), r; },
    getFormInputLabel(t, e) { const i = this._super(t, e); return this.options.label_bold ? i.classList.add('font-bold') : i.classList.add('required'), i; },
    getFormInputField(t) { const e = this._super(t); return ['checkbox', 'radio'].indexOf(t) < 0 && e.classList.add('block', 'w-full', 'px-1', 'text-black', 'text-sm', 'leading-normal', 'bg-white', 'border', 'border-grey', 'rounded'), this.options.enable_compact && e.classList.add('compact'), e; },
    getFormInputDescription(t) { const e = document.createElement('p'); return e.classList.add('block', 'mt-1', 'text-xs'), window.DOMPurify ? e.innerHTML = window.DOMPurify.sanitize(t) : e.textContent = this.cleanText(t), e; },
    getFormControl(t, e, i, s) { const n = document.createElement('div'); return n.classList.add('form-group', 'mb-1', 'w-full'), t && (t.classList.add('text-xs'), e.type === 'checkbox' && (e.classList.add('form-checkbox', 'text-xs', 'text-red-600', 'mr-1'), t.classList.add('items-center', 'flex'), t = this.getFormCheckboxControl(t, e, !1, s)), e.type === 'radio' && (e.classList.add('form-radio', 'text-red-600', 'mr-1'), t.classList.add('items-center', 'flex'), t = this.getFormRadioControl(t, e, !1, s)), n.appendChild(t), ['checkbox', 'radio'].indexOf(e.type) < 0 && s && n.appendChild(s)), ['checkbox', 'radio'].indexOf(e.type) < 0 && (this.options.input_size === 'small' ? e.classList.add('text-xs') : this.options.input_size === 'normal' ? e.classList.add('text-base') : this.options.input_size === 'large' && e.classList.add('text-xl'), n.appendChild(e)), i && n.appendChild(i), n; },
    getHeaderButtonHolder() { const t = this.getButtonHolder(); return t.classList.add('text-sm'), t; },
    getButtonHolder() { const t = document.createElement('div'); return t.classList.add('flex', 'relative', 'inline-flex', 'align-middle'), t; },
    getButton(t, e, i) { const s = this._super(t, e, i); return s.classList.add('inline-block', 'align-middle', 'text-center', 'text-sm', 'bg-blue-700', 'text-white', 'py-1', 'pr-1', 'm-2', 'shadow', 'select-none', 'whitespace-no-wrap', 'rounded'), s; },
    getInfoButton(t) { const e = document.createElement('a'); e.classList.add('tooltips', 'float-right'), e.innerHTML = 'ⓘ'; const i = document.createElement('span'); return i.innerHTML = t, e.appendChild(i), e; },
    getTable() { const t = this._super(); return this.options.table_border ? t.classList.add('je-table-border') : t.classList.add('table', 'border', 'p-0'), t; },
    getTableRow() { const t = this._super(); return this.options.table_border && t.classList.add('je-table-border'), this.options.table_zebrastyle && t.classList.add('je-table-zebra'), t; },
    getTableHeaderCell(t) { const e = this._super(t); return this.options.table_border ? e.classList.add('je-table-border') : this.options.table_hdiv ? e.classList.add('je-table-hdiv') : e.classList.add('text-xs', 'border', 'p-0', 'm-0'), e; },
    getTableCell() { const t = this._super(); return this.options.table_border ? t.classList.add('je-table-border') : this.options.table_hdiv ? t.classList.add('je-table-hdiv') : t.classList.add('border-0', 'p-0', 'm-0'), t; },
    addInputError(t, e) { t.controlgroup && (t.controlgroup.classList.add('has-error'), t.classList.add('bg-red-600'), t.errmsg ? t.errmsg.style.display = '' : (t.errmsg = document.createElement('p'), t.errmsg.classList.add('block', 'mt-1', 'text-xs', 'text-red'), t.controlgroup.appendChild(t.errmsg)), t.errmsg.textContent = e); },
    removeInputError(t) { t.errmsg && (t.errmsg.style.display = 'none', t.classList.remove('bg-red-600'), t.controlgroup.classList.remove('has-error')); },
    getTabHolder(t) { const e = document.createElement('div'); const i = void 0 === t ? '' : t; return e.innerHTML = `<div class='w-2/12' id='${i}'><ul class='list-reset pl-0 mb-0'></ul></div><div class='w-10/12' id='${i}'></div>`, e.classList.add('flex'), e; },
    addTab(t, e) { t.children[0].children[0].appendChild(e); },
    getTopTabHolder(t) { const e = void 0 === t ? '' : t; const i = document.createElement('div'); return i.innerHTML = `<ul class='nav-tabs flex list-reset pl-0 mb-0 border-b border-grey-light' id='${e}'></ul><div class='p-6 block' id='${e}'></div>`, i; },
    getTab(t, e) { const i = document.createElement('li'); i.classList.add('nav-item', 'flex-col', 'text-center', 'text-white', 'bg-blue-500', 'shadow-md', 'border', 'p-2', 'mb-2', 'mr-2', 'hover:bg-blue-400', 'rounded'); const s = document.createElement('a'); return s.classList.add('nav-link', 'text-center'), s.setAttribute('href', `#${e}`), s.setAttribute('data-toggle', 'tab'), s.appendChild(t), i.appendChild(s), i; },
    getTopTab(t, e) { const i = document.createElement('li'); i.classList.add('nav-item', 'flex', 'border-l', 'border-t', 'border-r'); const s = document.createElement('a'); return s.classList.add('nav-link', '-mb-px', 'flex-row', 'text-center', 'bg-white', 'p-2', 'hover:bg-blue-400', 'rounded-t'), s.setAttribute('href', `#${e}`), s.setAttribute('data-toggle', 'tab'), s.appendChild(t), i.appendChild(s), i; },
    getTabContent() { const t = document.createElement('div'); return t.setAttribute('role', 'tabpanel'), t; },
    getTopTabContent() { const t = document.createElement('div'); return t.setAttribute('role', 'tabpanel'), t; },
    markTabActive(t) { t.tab.firstChild.classList.add('block'), !0 === t.tab.firstChild.classList.contains('border-b') ? (t.tab.firstChild.classList.add('border-b-0'), t.tab.firstChild.classList.remove('border-b')) : t.tab.firstChild.classList.add('border-b-0'), !0 === t.container.classList.contains('hidden') ? (t.container.classList.remove('hidden'), t.container.classList.add('block')) : t.container.classList.add('block'); },
    markTabInactive(t) { !0 === t.tab.firstChild.classList.contains('border-b-0') ? (t.tab.firstChild.classList.add('border-b'), t.tab.firstChild.classList.remove('border-b-0')) : t.tab.firstChild.classList.add('border-b'), !0 === t.container.classList.contains('block') && (t.container.classList.remove('block'), t.container.classList.add('hidden')); },
    getProgressBar() { const t = document.createElement('div'); t.classList.add('progress'); const e = document.createElement('div'); return e.classList.add('bg-blue', 'leading-none', 'py-1', 'text-xs', 'text-center', 'text-white'), e.setAttribute('role', 'progressbar'), e.setAttribute('aria-valuenow', 0), e.setAttribute('aria-valuemin', 0), e.setAttribute('aria-valuenax', 100), e.innerHTML = '0%', t.appendChild(e), t; },
    updateProgressBar(t, e) { if (t) { const i = t.firstChild; const s = `${e}%`; i.setAttribute('aria-valuenow', e), i.style.width = s, i.innerHTML = s; } },
    updateProgressBarUnknown(t) { if (t) { const e = t.firstChild; t.classList.add('progress', 'bg-blue', 'leading-none', 'py-1', 'text-xs', 'text-center', 'text-white', 'block'), e.removeAttribute('aria-valuenow'), e.classList.add('w-full'), e.innerHTML = ''; } },
    getInputGroup(t, e) { if (t) { const i = document.createElement('div'); i.classList.add('relative', 'items-stretch', 'w-full'), i.appendChild(t); const s = document.createElement('div'); s.classList.add('-mr-1'), i.appendChild(s); for (let n = 0; n < e.length; n++)s.appendChild(e[n]); return i; } },
  }); const O = d.extend({
    onChildEditorChange(t) { this.onChange(!0); },
    notify() { this.path && this.jsoneditor.notifyWatchers(this.path); },
    change() { this.parent ? this.parent.onChildEditorChange(this) : this.jsoneditor && this.jsoneditor.onChange(); },
    onChange(t) { this.notify(), this.watch_listener && this.watch_listener(), t && this.change(); },
    register() { this.jsoneditor.registerEditor(this), this.onChange(); },
    unregister() { this.jsoneditor && this.jsoneditor.unregisterEditor(this); },
    getNumColumns() { return 12; },
    isActive() { return this.active; },
    activate() { this.active = !0, this.optInCheckbox.checked = !0, this.enable(), this.change(); },
    deactivate() { this.isRequired() || (this.active = !1, this.optInCheckbox.checked = !1, this.disable(), this.change()); },
    init(t, e) { this.defaults = e, this.jsoneditor = t.jsoneditor, this.theme = this.jsoneditor.theme, this.template_engine = this.jsoneditor.template, this.iconlib = this.jsoneditor.iconlib, this.translate = this.jsoneditor.translate || this.defaults.translate, this.original_schema = t.schema, this.schema = this.jsoneditor.expandSchema(this.original_schema), this.active = !0, this.options = r({}, this.options || {}, this.schema.options || {}, t.schema.options || {}, t), t.path || this.schema.id || (this.schema.id = 'root'), this.path = t.path || 'root', this.formname = t.formname || this.path.replace(/\.([^.]+)/g, '[$1]'), this.jsoneditor.options.form_name_root && (this.formname = this.formname.replace(/^root\[/, `${this.jsoneditor.options.form_name_root}[`)), this.parent = t.parent, this.key = void 0 !== this.parent ? this.path.split('.').slice(this.parent.path.split('.').length).join('.') : this.path, this.link_watchers = [], this.watchLoop = !1, t.container && this.setContainer(t.container), this.registerDependencies(); },
    registerDependencies() { this.dependenciesFulfilled = !0; const t = this.options.dependencies; if (t) { const e = this; Object.keys(t).forEach(((i) => { let s = e.path.split('.'); s[s.length - 1] = i, s = s.join('.'); const n = t[i]; e.jsoneditor.watch(s, (() => { e.checkDependency(s, n); })); })); } },
    checkDependency(t, e) { const i = this.container || this.control; if (this.path !== t && i && this.jsoneditor !== null) { const s = this; const n = this.jsoneditor.getEditor(t); const r = n ? n.getValue() : void 0; const o = this.dependenciesFulfilled; this.dependenciesFulfilled = !1, n && n.dependenciesFulfilled ? Array.isArray(e) ? e.some(((t) => { if (r === t) return s.dependenciesFulfilled = !0, !0; })) : typeof e === 'object' ? typeof r !== 'object' ? this.dependenciesFulfilled = e === r : Object.keys(e).some(((t) => !!e.hasOwnProperty(t) && (r.hasOwnProperty(t) && e[t] === r[t] ? void (s.dependenciesFulfilled = !0) : (s.dependenciesFulfilled = !1, !0)))) : typeof e === 'string' || typeof e === 'number' ? this.dependenciesFulfilled = r === e : typeof e === 'boolean' && (this.dependenciesFulfilled = e ? r || r.length > 0 : !r || r.length === 0) : this.dependenciesFulfilled = !1, this.dependenciesFulfilled !== o && this.notify(); const a = this.dependenciesFulfilled ? 'block' : 'none'; if (i.tagName === 'TD') for (const l in i.childNodes)i.childNodes.hasOwnProperty(l) && (i.childNodes[l].style.display = a); else i.style.display = a; } },
    setContainer(t) { this.container = t, this.schema.id && this.container.setAttribute('data-schemaid', this.schema.id), this.schema.type && typeof this.schema.type === 'string' && this.container.setAttribute('data-schematype', this.schema.type), this.container.setAttribute('data-schemapath', this.path); },
    setOptInCheckbox(t) { const e = this; this.optInCheckbox = document.createElement('input'), this.optInCheckbox.setAttribute('type', 'checkbox'), this.optInCheckbox.setAttribute('style', 'margin: 0 10px 0 0;'), this.optInCheckbox.classList.add('json-editor-opt-in'), this.optInCheckbox.addEventListener('click', (() => { e.isActive() ? e.deactivate() : e.activate(); })), (this.jsoneditor.options.show_opt_in || this.options.show_opt_in) && this.parent && this.parent.schema.type === 'object' && !this.isRequired() && this.header && (this.header.appendChild(this.optInCheckbox), this.header.insertBefore(this.optInCheckbox, this.header.firstChild)); },
    preBuild() {},
    build() {},
    postBuild() { this.setupWatchListeners(), this.addLinks(), this.setValue(this.getDefault(), !0), this.updateHeaderText(), this.register(), this.onWatchedFieldChange(); },
    setupWatchListeners() { const t = this; if (this.watched = {}, this.schema.vars && (this.schema.watch = this.schema.vars), this.watched_values = {}, this.watch_listener = function () { t.refreshWatchedFieldValues() && t.onWatchedFieldChange(); }, this.schema.hasOwnProperty('watch')) { let e; let i; let s; let n; let r; const o = t.container.getAttribute('data-schemapath'); for (const a in this.schema.watch) if (this.schema.watch.hasOwnProperty(a)) { if (e = this.schema.watch[a], Array.isArray(e)) { if (e.length < 2) continue; i = [e[0]].concat(e[1].split('.')); } else i = e.split('.'), t.theme.closest(t.container, `[data-schemaid="${i[0]}"]`) || i.unshift('#'); if ((s = i.shift()) === '#' && (s = t.jsoneditor.schema.id || 'root'), !(n = t.theme.closest(t.container, `[data-schemaid="${s}"]`))) throw new Error(`Could not find ancestor node with id ${s}`); r = `${n.getAttribute('data-schemapath')}.${i.join('.')}`, o.startsWith(r) && (t.watchLoop = !0), t.jsoneditor.watch(r, t.watch_listener), t.watched[a] = r; } } this.schema.headerTemplate && (this.header_template = this.jsoneditor.compileTemplate(this.schema.headerTemplate, this.template_engine)); },
    addLinks() { if (!this.no_link_holder && (this.link_holder = this.theme.getLinksHolder(), void 0 !== this.description ? this.description.parentNode.insertBefore(this.link_holder, this.description) : this.container.appendChild(this.link_holder), this.schema.links)) for (let t = 0; t < this.schema.links.length; t++) this.addLink(this.getLink(this.schema.links[t])); },
    onMove() {},
    getButton(t, e, i) { const s = `json-editor-btn-${e}`; !(e = this.iconlib ? this.iconlib.getIcon(e) : null) && i && (t = i, i = null); const n = this.theme.getButton(t, e, i); return n.classList.add(s), n; },
    setButtonText(t, e, i, s) { return !(i = this.iconlib ? this.iconlib.getIcon(i) : null) && s && (e = s, s = null), this.theme.setButtonText(t, e, i, s); },
    addLink(t) { this.link_holder && this.link_holder.appendChild(t); },
    getLink(t) { let e; let i; const s = (t.mediaType || 'application/javascript').split('/')[0]; const n = this.jsoneditor.compileTemplate(t.href, this.template_engine); const r = this.jsoneditor.compileTemplate(t.rel ? t.rel : t.href, this.template_engine); let o = null; if (t.download && (o = t.download), o && !0 !== o && (o = this.jsoneditor.compileTemplate(o, this.template_engine)), s === 'image') { e = this.theme.getBlockLinkHolder(), (i = document.createElement('a')).setAttribute('target', '_blank'); const a = document.createElement('img'); this.theme.createImageLink(e, i, a), this.link_watchers.push(((t) => { const e = n(t); const s = r(t); i.setAttribute('href', e), i.setAttribute('title', s || e), a.setAttribute('src', e); })); } else if (['audio', 'video'].indexOf(s) >= 0) { e = this.theme.getBlockLinkHolder(), (i = this.theme.getBlockLink()).setAttribute('target', '_blank'); const l = document.createElement(s); l.setAttribute('controls', 'controls'), this.theme.createMediaLink(e, i, l), this.link_watchers.push(((t) => { const e = n(t); const s = r(t); i.setAttribute('href', e), i.textContent = s || e, l.setAttribute('src', e); })); } else i = e = this.theme.getBlockLink(), e.setAttribute('target', '_blank'), e.textContent = t.rel, e.style.display = 'none', this.link_watchers.push(((t) => { const i = n(t); const s = r(t); i && (e.style.display = ''), e.setAttribute('href', i), e.textContent = s || i; })); return o && i && (!0 === o ? i.setAttribute('download', '') : this.link_watchers.push(((t) => { i.setAttribute('download', o(t)); }))), t.class && i.classList.add(t.class), e; },
    refreshWatchedFieldValues() { if (this.watched_values) { let t; let e; const i = {}; let s = !1; if (this.watched) for (const n in this.watched) this.watched.hasOwnProperty(n) && (t = (e = this.jsoneditor.getEditor(this.watched[n])) ? e.getValue() : null, this.watched_values[n] !== t && (s = !0), i[n] = t); return i.self = this.getValue(), this.watched_values.self !== i.self && (s = !0), this.watched_values = i, s; } },
    getWatchedFieldValues() { return this.watched_values; },
    updateHeaderText() { if (this.header) { const t = this.getHeaderText(); if (this.header.children.length) { for (let e = 0; e < this.header.childNodes.length; e++) if (this.header.childNodes[e].nodeType === 3) { this.header.childNodes[e].nodeValue = this.cleanText(t); break; } } else window.DOMPurify ? this.header.innerHTML = window.DOMPurify.sanitize(t) : this.header.textContent = this.cleanText(t); } },
    getHeaderText(t) { return this.header_text ? this.header_text : t ? this.schema.title : this.getTitle(); },
    cleanText(t) { const e = document.createElement('div'); return e.innerHTML = t, e.textContent || e.innerText; },
    onWatchedFieldChange() {
      let t; if (this.header_template) {
        t = r(this.getWatchedFieldValues(), {
          key: this.key, i: this.key, i0: 1 * this.key, i1: 1 * this.key + 1, title: this.getTitle(),
        }); const e = this.header_template(t); e !== this.header_text && (this.header_text = e, this.updateHeaderText(), this.notify());
      } if (this.link_watchers.length) { t = this.getWatchedFieldValues(); for (let i = 0; i < this.link_watchers.length; i++) this.link_watchers[i](t); }
    },
    setValue(t) { this.value = t; },
    getValue() { if (this.dependenciesFulfilled) return this.value; },
    refreshValue() {},
    getChildEditors() { return !1; },
    destroy() { const t = this; this.unregister(this), o(this.watched, ((e, i) => { t.jsoneditor.unwatch(i, t.watch_listener); })), this.watched = null, this.watched_values = null, this.watch_listener = null, this.header_text = null, this.header_template = null, this.value = null, this.container && this.container.parentNode && this.container.parentNode.removeChild(this.container), this.container = null, this.jsoneditor = null, this.schema = null, this.path = null, this.key = null, this.parent = null; },
    getDefault() { if (void 0 !== this.schema.default) return this.schema.default; if (void 0 !== this.schema.enum) return this.schema.enum[0]; let t = this.schema.type || this.schema.oneOf; if (t && Array.isArray(t) && (t = t[0]), t && typeof t === 'object' && (t = t.type), t && Array.isArray(t) && (t = t[0]), typeof t === 'string') { if (t === 'number') return 0; if (t === 'boolean') return !1; if (t === 'integer') return 0; if (t === 'string') return ''; if (t === 'object') return {}; if (t === 'array') return []; } return null; },
    getTitle() { return this.schema.title || this.key; },
    enable() { this.disabled = !1; },
    disable() { this.disabled = !0; },
    isEnabled() { return !this.disabled; },
    isRequired() { return typeof this.schema.required === 'boolean' ? this.schema.required : this.parent && this.parent.schema && Array.isArray(this.parent.schema.required) ? this.parent.schema.required.indexOf(this.key) > -1 : !!this.jsoneditor.options.required_by_default; },
    getDisplayText(t) { const e = []; const i = {}; o(t, ((t, e) => { e.title && (i[e.title] = i[e.title] || 0, i[e.title]++), e.description && (i[e.description] = i[e.description] || 0, i[e.description]++), e.format && (i[e.format] = i[e.format] || 0, i[e.format]++), e.type && (i[e.type] = i[e.type] || 0, i[e.type]++); })), o(t, ((t, s) => { let n; n = typeof s === 'string' ? s : s.title && i[s.title] <= 1 ? s.title : s.format && i[s.format] <= 1 ? s.format : s.type && i[s.type] <= 1 ? s.type : s.description && i[s.description] <= 1 ? s.descripton : s.title ? s.title : s.format ? s.format : s.type ? s.type : s.description ? s.description : JSON.stringify(s).length < 500 ? JSON.stringify(s) : 'type', e.push(n); })); const s = {}; return o(e, ((t, n) => { s[n] = s[n] || 0, s[n]++, i[n] > 1 && (e[t] = `${n} ${s[n]}`); })), e; },
    getValidId(t) { return (t = void 0 === t ? '' : t.toString()).replace(/\s+/g, '-'); },
    setInputAttributes(t) { if (this.schema.options && this.schema.options.inputAttributes) { const e = this.schema.options.inputAttributes; const i = ['name', 'type'].concat(t); for (const s in e)e.hasOwnProperty(s) && i.indexOf(s.toLowerCase()) === -1 && this.input.setAttribute(s, e[s]); } },
    expandCallbacks(t, e) { for (const i in e)e.hasOwnProperty(i) && e[i] === Object(e[i]) ? e[i] = this.expandCallbacks(t, e[i]) : e.hasOwnProperty(i) && typeof e[i] === 'string' && typeof this.defaults.callbacks[t] === 'object' && typeof this.defaults.callbacks[t][e[i]] === 'function' && (e[i] = this.defaults.callbacks[t][e[i]].bind(null, this)); return e; },
    showValidationErrors(t) {},
  }); const A = O.extend({
    register() { this._super(), this.input && this.input.setAttribute('name', this.formname); }, unregister() { this._super(), this.input && this.input.removeAttribute('name'); }, setValue(t, e, i) { if ((!this.template || i) && (t == null ? t = '' : typeof t === 'object' ? t = JSON.stringify(t) : typeof t !== 'string' && (t = `${t}`), t !== this.serialized)) { const s = this.sanitize(t); if (this.input.value !== s) { this.input.value = s; const n = i || this.getValue() !== t; return this.refreshValue(), e ? this.is_dirty = !1 : this.jsoneditor.options.show_errors === 'change' && (this.is_dirty = !0), this.adjust_height && this.adjust_height(this.input), this.onChange(n), { changed: n, value: s }; } } }, getNumColumns() { let t; const e = Math.ceil(Math.max(this.getTitle().length, this.schema.maxLength || 0, this.schema.minLength || 0) / 5); return t = this.input_type === 'textarea' ? 6 : ['text', 'email'].indexOf(this.input_type) >= 0 ? 4 : 2, Math.min(12, Math.max(e, t)); }, build() { const t = this; if (this.options.compact || (this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired())), this.schema.description && (this.description = this.theme.getFormInputDescription(this.schema.description)), this.options.infoText && (this.infoButton = this.theme.getInfoButton(this.options.infoText)), this.format = this.schema.format, !this.format && this.schema.media && this.schema.media.type && (this.format = this.schema.media.type.replace(/(^(application|text)\/(x-)?(script\.)?)|(-source$)/g, '')), !this.format && this.options.default_format && (this.format = this.options.default_format), this.options.format && (this.format = this.options.format), this.format) if (this.format === 'textarea') this.input_type = 'textarea', this.input = this.theme.getTextareaInput(); else if (this.format === 'range') { this.input_type = 'range'; let e = this.schema.minimum || 0; let i = this.schema.maximum || Math.max(100, e + 1); let s = 1; this.schema.multipleOf && (e % this.schema.multipleOf && (e = Math.ceil(e / this.schema.multipleOf) * this.schema.multipleOf), i % this.schema.multipleOf && (i = Math.floor(i / this.schema.multipleOf) * this.schema.multipleOf), s = this.schema.multipleOf), this.input = this.theme.getRangeInput(e, i, s); } else this.input_type = 'text', ['button', 'checkbox', 'color', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'].indexOf(this.format) > -1 && (this.input_type = this.format), this.input = this.theme.getFormInputField(this.input_type); else this.input_type = 'text', this.input = this.theme.getFormInputField(this.input_type); void 0 !== this.schema.maxLength && this.input.setAttribute('maxlength', this.schema.maxLength), void 0 !== this.schema.pattern ? this.input.setAttribute('pattern', this.schema.pattern) : void 0 !== this.schema.minLength && this.input.setAttribute('pattern', `.{${this.schema.minLength},}`), this.options.compact ? this.container.classList.add('compact') : this.options.input_width && (this.input.style.width = this.options.input_width), (this.schema.readOnly || this.schema.readonly || this.schema.template) && (this.always_disabled = !0, this.input.setAttribute('readonly', 'true')), this.setInputAttributes(['maxlength', 'pattern', 'readonly', 'min', 'max', 'step']), this.input.addEventListener('change', (function (e) { if (e.preventDefault(), e.stopPropagation(), t.schema.template) this.value = t.value; else { const i = this.value; const s = t.sanitize(i); i !== s && (this.value = s), t.is_dirty = !0, t.refreshValue(), t.onChange(!0); } })), this.options.input_height && (this.input.style.height = this.options.input_height), this.options.expand_height && (this.adjust_height = function (t) { if (t) { let e; let i = t.offsetHeight; if (t.offsetHeight < t.scrollHeight) for (e = 0; t.offsetHeight < t.scrollHeight + 3 && !(e > 100);)e++, i++, t.style.height = `${i}px`; else { for (e = 0; t.offsetHeight >= t.scrollHeight + 3 && !(e > 100);)e++, i--, t.style.height = `${i}px`; t.style.height = `${i + 1}px`; } } }, this.input.addEventListener('keyup', (function (e) { t.adjust_height(this); })), this.input.addEventListener('change', (function (e) { t.adjust_height(this); })), this.adjust_height()), this.format && this.input.setAttribute('data-schemaformat', this.format); let n = this.input; if (this.format === 'range' && (n = this.theme.getRangeControl(this.input, this.theme.getRangeOutput(this.input, this.schema.default || Math.max(this.schema.minimum || 0, 0)))), this.control = this.theme.getFormControl(this.label, n, this.description, this.infoButton), this.container.appendChild(this.control), window.requestAnimationFrame((() => { t.input.parentNode && t.afterInputReady(), t.adjust_height && t.adjust_height(t.input); })), this.schema.template) { const r = this.expandCallbacks('template', { template: this.schema.template }); typeof r.template === 'function' ? this.template = r.template : this.template = this.jsoneditor.compileTemplate(this.schema.template, this.template_engine), this.refreshValue(); } else this.refreshValue(); }, setupCleave(t) { const e = this.expandCallbacks('cleave', r({}, this.defaults.options.cleave || {}, this.options.cleave || {})); typeof e === 'object' && Object.keys(e).length > 0 && (this.cleave_instance = new window.Cleave(t, e)); }, setupImask(t) { const e = this.expandCallbacks('imask', r({}, this.defaults.options.imask || {}, this.options.imask || {})); typeof e === 'object' && Object.keys(e).length > 0 && (this.imask_instance = window.IMask(t, this.ajustIMaskOptions(e))); }, ajustIMaskOptions(t) { for (const e in t) if (t.hasOwnProperty(e)) if (t[e] === Object(t[e]))t[e] = this.ajustIMaskOptions(t[e]); else if (e === 'mask') if (t[e].substr(0, 6) === 'regex:') { const i = t[e].match(/^regex:\/(.*)\/([gimsuy]*)$/); if (i !== null) try { t[e] = new RegExp(i[1], i[2]); } catch (t) {} } else t[e] = this.getGlobalPropertyFromString(t[e]); return t; }, getGlobalPropertyFromString(t) { if (t.indexOf('.') === -1) { if (void 0 !== window[t]) return window[t]; } else { const e = t.split('.'); const i = e[0]; const s = e[1]; if (void 0 !== window[i] && void 0 !== window[i][s]) return window[i][s]; } return t; }, getValue() { return this.imask_instance && this.dependenciesFulfilled && this.options.imask.returnUnmasked ? this.imask_instance.unmaskedValue : this._super(); }, enable() { this.always_disabled || (this.input.disabled = !1, this._super()); }, disable(t) { t && (this.always_disabled = !0), this.input.disabled = !0, this._super(); }, afterInputReady() { this.theme.afterInputReady(this.input), window.Cleave && !this.cleave_instance ? this.setupCleave(this.input) : window.IMask && !this.imask_instance && this.setupImask(this.input); }, refreshValue() { this.value = this.input.value, typeof this.value !== 'string' && (this.value = ''), this.serialized = this.value; }, destroy() { this.cleave_instance && this.cleave_instance.destroy(), this.imask_instance && this.imask_instance.destroy(), this.template = null, this.input && this.input.parentNode && this.input.parentNode.removeChild(this.input), this.label && this.label.parentNode && this.label.parentNode.removeChild(this.label), this.description && this.description.parentNode && this.description.parentNode.removeChild(this.description), this._super(); }, sanitize(t) { return t; }, onWatchedFieldChange() { let t; this.template && (t = this.getWatchedFieldValues(), this.setValue(this.template(t), !1, !0)), this._super(); }, showValidationErrors(t) { const e = this; if (this.jsoneditor.options.show_errors === 'always');else if (!this.is_dirty && this.previous_error_setting === this.jsoneditor.options.show_errors) return; this.previous_error_setting = this.jsoneditor.options.show_errors; const i = []; o(t, ((t, s) => { s.path === e.path && i.push(s.message); })), i.length ? this.theme.addInputError(this.input, `${i.join('. ')}.`) : this.theme.removeInputError(this.input); },
  }); const I = A.extend({
    setValue(t, e, i) { const s = this._super(t, e, i); void 0 !== s && s.changed && this.ace_editor_instance && (this.ace_editor_instance.setValue(s.value), this.ace_editor_instance.session.getSelection().clearSelection(), this.ace_editor_instance.resize()); }, build() { this.options.format = 'textarea', this._super(), this.input_type = this.schema.format, this.input.setAttribute('data-schemaformat', this.input_type); }, afterInputReady() { let t; const e = this; if (window.ace) { let i = this.input_type; i !== 'cpp' && i !== 'c++' && i !== 'c' || (i = 'c_cpp'), t = this.expandCallbacks('ace', r({}, { selectionStyle: 'text', minLines: 30, maxLines: 30 }, this.defaults.options.ace || {}, this.options.ace || {}, { mode: `ace/mode/${i}` })), this.ace_container = document.createElement('div'), this.ace_container.style.width = '100%', this.ace_container.style.position = 'relative', this.input.parentNode.insertBefore(this.ace_container, this.input), this.input.style.display = 'none', this.ace_editor_instance = window.ace.edit(this.ace_container, t), this.ace_editor_instance.setValue(this.getValue()), this.ace_editor_instance.session.getSelection().clearSelection(), this.ace_editor_instance.resize(), (this.schema.readOnly || this.schema.readonly || this.schema.template) && this.ace_editor_instance.setReadOnly(!0), this.ace_editor_instance.on('change', (() => { e.input.value = e.ace_editor_instance.getValue(), e.refreshValue(), e.is_dirty = !0, e.onChange(!0); })), this.theme.afterInputReady(e.input); } else this._super(); }, getNumColumns() { return 6; }, enable() { !this.always_disabled && this.ace_editor_instance && this.ace_editor_instance.setReadOnly(!1), this._super(); }, disable(t) { this.ace_editor_instance && this.ace_editor_instance.setReadOnly(!0), this._super(t); }, destroy() { this.ace_editor_instance && (this.ace_editor_instance.destroy(), this.ace_editor_instance = null), this._super(); },
  }); const S = O.extend({
    askConfirmation() { return !0 !== this.jsoneditor.options.prompt_before_delete || !1 !== window.confirm('Are you sure you want to remove this node?'); },
    getDefault() { return this.schema.default || []; },
    register() { if (this._super(), this.rows) for (let t = 0; t < this.rows.length; t++) this.rows[t].register(); },
    unregister() { if (this._super(), this.rows) for (let t = 0; t < this.rows.length; t++) this.rows[t].unregister(); },
    getNumColumns() { const t = this.getItemInfo(0); return this.tabs_holder && this.schema.format !== 'tabs-top' ? Math.max(Math.min(12, t.width + 2), 4) : t.width; },
    enable() { if (!this.always_disabled) { if (this.add_row_button && (this.add_row_button.disabled = !1), this.remove_all_rows_button && (this.remove_all_rows_button.disabled = !1), this.delete_last_row_button && (this.delete_last_row_button.disabled = !1), this.copy_button && (this.copy_button.disabled = !1), this.delete_button && (this.delete_button.disabled = !1), this.moveup_button && (this.moveup_button.disabled = !1), this.movedown_button && (this.movedown_button.disabled = !1), this.rows) for (let t = 0; t < this.rows.length; t++) this.rows[t].enable(), this.rows[t].add_row_button && (this.rows[t].add_row_button.disabled = !1), this.rows[t].remove_all_rows_button && (this.rows[t].remove_all_rows_button.disabled = !1), this.rows[t].delete_last_row_button && (this.rows[t].delete_last_row_button.disabled = !1), this.rows[t].copy_button && (this.rows[t].copy_button.disabled = !1), this.rows[t].delete_button && (this.rows[t].delete_button.disabled = !1), this.rows[t].moveup_button && (this.rows[t].moveup_button.disabled = !1), this.rows[t].movedown_button && (this.rows[t].movedown_button.disabled = !1); this._super(); } },
    disable(t) { if (t && (this.always_disabled = !0), this.add_row_button && (this.add_row_button.disabled = !0), this.remove_all_rows_button && (this.remove_all_rows_button.disabled = !0), this.delete_last_row_button && (this.delete_last_row_button.disabled = !0), this.copy_button && (this.copy_button.disabled = !0), this.delete_button && (this.delete_button.disabled = !0), this.moveup_button && (this.moveup_button.disabled = !0), this.movedown_button && (this.movedown_button.disabled = !0), this.rows) for (let e = 0; e < this.rows.length; e++) this.rows[e].disable(t), this.rows[e].add_row_button && (this.rows[e].add_row_button.disabled = !0), this.rows[e].remove_all_rows_button && (this.rows[e].remove_all_rows_button.disabled = !0), this.rows[e].delete_last_row_button && (this.rows[e].delete_last_row_button.disabled = !0), this.rows[e].copy_button && (this.rows[e].copy_button.disabled = !0), this.rows[e].delete_button && (this.rows[e].delete_button.disabled = !0), this.rows[e].moveup_button && (this.rows[e].moveup_button.disabled = !0), this.rows[e].movedown_button && (this.rows[e].movedown_button.disabled = !0); this._super(); },
    preBuild() { this._super(), this.rows = [], this.row_cache = [], this.hide_delete_buttons = this.options.disable_array_delete || this.jsoneditor.options.disable_array_delete, this.hide_delete_all_rows_buttons = this.hide_delete_buttons || this.options.disable_array_delete_all_rows || this.jsoneditor.options.disable_array_delete_all_rows, this.hide_delete_last_row_buttons = this.hide_delete_buttons || this.options.disable_array_delete_last_row || this.jsoneditor.options.disable_array_delete_last_row, this.hide_move_buttons = this.options.disable_array_reorder || this.jsoneditor.options.disable_array_reorder, this.hide_add_button = this.options.disable_array_add || this.jsoneditor.options.disable_array_add, this.show_copy_button = this.options.enable_array_copy || this.jsoneditor.options.enable_array_copy, this.array_controls_top = this.options.array_controls_top || this.jsoneditor.options.array_controls_top; },
    build() { this.options.compact ? (this.title = this.theme.getHeader(''), this.container.appendChild(this.title), this.panel = this.theme.getIndentedPanel(), this.container.appendChild(this.panel), this.title_controls = this.theme.getHeaderButtonHolder(), this.title.appendChild(this.title_controls), this.controls = this.theme.getHeaderButtonHolder(), this.title.appendChild(this.controls), this.row_holder = document.createElement('div'), this.panel.appendChild(this.row_holder)) : (this.header = document.createElement('label'), this.header.textContent = this.getTitle(), this.title = this.theme.getHeader(this.header), this.container.appendChild(this.title), this.title_controls = this.theme.getHeaderButtonHolder(), this.title.appendChild(this.title_controls), this.schema.description && (this.description = this.theme.getDescription(this.schema.description), this.container.appendChild(this.description)), this.error_holder = document.createElement('div'), this.container.appendChild(this.error_holder), this.schema.format === 'tabs-top' ? (this.controls = this.theme.getHeaderButtonHolder(), this.title.appendChild(this.controls), this.tabs_holder = this.theme.getTopTabHolder(this.getValidId(this.getItemTitle())), this.container.appendChild(this.tabs_holder), this.row_holder = this.theme.getTopTabContentHolder(this.tabs_holder), this.active_tab = null) : this.schema.format === 'tabs' ? (this.controls = this.theme.getHeaderButtonHolder(), this.title.appendChild(this.controls), this.tabs_holder = this.theme.getTabHolder(this.getValidId(this.getItemTitle())), this.container.appendChild(this.tabs_holder), this.row_holder = this.theme.getTabContentHolder(this.tabs_holder), this.active_tab = null) : (this.panel = this.theme.getIndentedPanel(), this.container.appendChild(this.panel), this.row_holder = document.createElement('div'), this.panel.appendChild(this.row_holder), this.controls = this.theme.getButtonHolder(), this.array_controls_top ? this.title.appendChild(this.controls) : this.panel.appendChild(this.controls))), this.addControls(); },
    onChildEditorChange(t) { this.refreshValue(), this.refreshTabs(!0), this._super(t); },
    getItemTitle() { if (!this.item_title) if (this.schema.items && !Array.isArray(this.schema.items)) { const t = this.jsoneditor.expandRefs(this.schema.items); this.item_title = t.title || this.translate('default_array_item_title'); } else this.item_title = this.translate('default_array_item_title'); return this.cleanText(this.item_title); },
    getItemSchema(t) { return Array.isArray(this.schema.items) ? t >= this.schema.items.length ? !0 === this.schema.additionalItems ? {} : this.schema.additionalItems ? r({}, this.schema.additionalItems) : void 0 : r({}, this.schema.items[t]) : this.schema.items ? r({}, this.schema.items) : {}; },
    getItemInfo(t) {
      let e = this.getItemSchema(t); this.item_info = this.item_info || {}; const i = JSON.stringify(e); return void 0 !== this.item_info[i] || (e = this.jsoneditor.expandRefs(e), this.item_info[i] = {
        title: e.title || this.translate('default_array_item_title'), default: e.default, width: 12, child_editors: e.properties || e.items,
      }), this.item_info[i];
    },
    getElementEditor(t) {
      const e = this.getItemInfo(t); let i = this.getItemSchema(t); (i = this.jsoneditor.expandRefs(i)).title = `${e.title} ${t + 1}`; let s; const n = this.jsoneditor.getEditorClass(i); this.tabs_holder ? (s = this.schema.format === 'tabs-top' ? this.theme.getTopTabContent() : this.theme.getTabContent()).id = `${this.path}.${t}` : s = e.child_editors ? this.theme.getChildEditorHolder() : this.theme.getIndentedPanel(), this.row_holder.appendChild(s); const r = this.jsoneditor.createEditor(n, {
        jsoneditor: this.jsoneditor, schema: i, container: s, path: `${this.path}.${t}`, parent: this, required: !0,
      }); return r.preBuild(), r.build(), r.postBuild(), r.title_controls || (r.array_controls = this.theme.getButtonHolder(), s.appendChild(r.array_controls)), r;
    },
    destroy() { this.empty(!0), this.title && this.title.parentNode && this.title.parentNode.removeChild(this.title), this.description && this.description.parentNode && this.description.parentNode.removeChild(this.description), this.row_holder && this.row_holder.parentNode && this.row_holder.parentNode.removeChild(this.row_holder), this.controls && this.controls.parentNode && this.controls.parentNode.removeChild(this.controls), this.panel && this.panel.parentNode && this.panel.parentNode.removeChild(this.panel), this.rows = this.row_cache = this.title = this.description = this.row_holder = this.panel = this.controls = null, this._super(); },
    empty(t) { if (this.rows) { const e = this; o(this.rows, ((i, s) => { t && (s.tab && s.tab.parentNode && s.tab.parentNode.removeChild(s.tab), e.destroyRow(s, !0), e.row_cache[i] = null), e.rows[i] = null; })), e.rows = [], t && (e.row_cache = []); } },
    destroyRow(t, e) { const i = t.container; e ? (t.destroy(), i.parentNode && i.parentNode.removeChild(i), t.tab && t.tab.parentNode && t.tab.parentNode.removeChild(t.tab)) : (t.tab && (t.tab.style.display = 'none'), i.style.display = 'none', t.unregister()); },
    getMax() { return Array.isArray(this.schema.items) && !1 === this.schema.additionalItems ? Math.min(this.schema.items.length, this.schema.maxItems || 1 / 0) : this.schema.maxItems || 1 / 0; },
    refreshTabs(t) { const e = this; o(this.rows, ((i, s) => { s.tab && (t ? s.tab_text.textContent = s.getHeaderText() : s.tab === e.active_tab ? e.theme.markTabActive(s) : e.theme.markTabInactive(s)); })); },
    setValue(t, e) { if (t = t || [], Array.isArray(t) || (t = [t]), JSON.stringify(t) !== this.serialized) { if (this.schema.minItems) for (;t.length < this.schema.minItems;)t.push(this.getItemInfo(t.length).default); this.getMax() && t.length > this.getMax() && (t = t.slice(0, this.getMax())); const i = this; o(t, ((t, s) => { if (i.rows[t])i.rows[t].setValue(s, e); else if (i.row_cache[t])i.rows[t] = i.row_cache[t], i.rows[t].setValue(s, e), i.rows[t].container.style.display = '', i.rows[t].tab && (i.rows[t].tab.style.display = ''), i.rows[t].register(), i.jsoneditor.trigger('addRow', i.rows[t]); else { const n = i.addRow(s, e); i.jsoneditor.trigger('addRow', n); } })); for (let s = t.length; s < i.rows.length; s++)i.destroyRow(i.rows[s]), i.rows[s] = null; i.rows = i.rows.slice(0, t.length); let n = null; o(i.rows, ((t, e) => { if (e.tab === i.active_tab) return n = e.tab, !1; })), !n && i.rows.length && (n = i.rows[0].tab), i.active_tab = n, i.refreshValue(e), i.refreshTabs(!0), i.refreshTabs(), i.onChange(); } },
    refreshValue(t) { const e = this; const i = this.value ? this.value.length : 0; if (this.value = [], o(this.rows, ((t, i) => { e.value[t] = i.getValue(); })), i !== this.value.length || t) { const s = this.schema.minItems && this.schema.minItems >= this.rows.length; o(this.rows, ((t, i) => { i.movedown_button && (t === e.rows.length - 1 ? i.movedown_button.style.display = 'none' : i.movedown_button.style.display = ''), i.delete_button && (i.delete_button.style.display = s ? 'none' : ''), e.value[t] = i.getValue(); })); let n = !1; this.value.length ? this.value.length === 1 ? (this.remove_all_rows_button.style.display = 'none', s || this.hide_delete_last_row_buttons ? this.delete_last_row_button.style.display = 'none' : (this.delete_last_row_button.style.display = '', n = !0)) : (s || this.hide_delete_last_row_buttons ? this.delete_last_row_button.style.display = 'none' : (this.delete_last_row_button.style.display = '', n = !0), s || this.hide_delete_all_rows_buttons ? this.remove_all_rows_button.style.display = 'none' : (this.remove_all_rows_button.style.display = '', n = !0)) : (this.delete_last_row_button.style.display = 'none', this.remove_all_rows_button.style.display = 'none'), this.getMax() && this.getMax() <= this.rows.length || this.hide_add_button ? this.add_row_button.style.display = 'none' : (this.add_row_button.style.display = '', n = !0), !this.collapsed && n ? this.controls.style.display = 'inline-block' : this.controls.style.display = 'none'; } },
    addRow(t, e) { const i = this; const s = this.rows.length; i.rows[s] = this.getElementEditor(s), i.row_cache[s] = i.rows[s], i.tabs_holder && (i.rows[s].tab_text = document.createElement('span'), i.rows[s].tab_text.textContent = i.rows[s].getHeaderText(), i.schema.format === 'tabs-top' ? (i.rows[s].tab = i.theme.getTopTab(i.rows[s].tab_text, this.getValidId(i.rows[s].path)), i.theme.addTopTab(i.tabs_holder, i.rows[s].tab)) : (i.rows[s].tab = i.theme.getTab(i.rows[s].tab_text, this.getValidId(i.rows[s].path)), i.theme.addTab(i.tabs_holder, i.rows[s].tab)), i.rows[s].tab.addEventListener('click', ((t) => { i.active_tab = i.rows[s].tab, i.refreshTabs(), t.preventDefault(), t.stopPropagation(); }))); const n = i.rows[s].title_controls || i.rows[s].array_controls; return i.hide_delete_buttons || (i.rows[s].delete_button = this.getButton(i.getItemTitle(), 'delete', this.translate('button_delete_row_title', [i.getItemTitle()])), i.rows[s].delete_button.classList.add('delete', 'json-editor-btntype-delete'), i.rows[s].delete_button.setAttribute('data-i', s), i.rows[s].delete_button.addEventListener('click', (function (t) { if (t.preventDefault(), t.stopPropagation(), !i.askConfirmation()) return !1; const e = 1 * this.getAttribute('data-i'); const s = i.getValue(); const n = []; let r = null; o(s, ((t, i) => { t !== e && n.push(i); })); const a = i.rows[e]; i.setValue(n), i.rows[e] ? r = i.rows[e].tab : i.rows[e - 1] && (r = i.rows[e - 1].tab), r && (i.active_tab = r, i.refreshTabs()), i.onChange(!0), i.jsoneditor.trigger('deleteRow', a); })), n && n.appendChild(i.rows[s].delete_button)), i.show_copy_button && (i.rows[s].copy_button = this.getButton(i.getItemTitle(), 'copy', `Copy ${i.getItemTitle()}`), i.rows[s].copy_button.classList.add('copy', 'json-editor-btntype-copy'), i.rows[s].copy_button.setAttribute('data-i', s), i.rows[s].copy_button.addEventListener('click', (function (t) { const e = i.getValue(); t.preventDefault(), t.stopPropagation(); const s = 1 * this.getAttribute('data-i'); o(e, ((t, i) => { t === s && e.push(i); })), i.setValue(e), i.refreshValue(!0), i.onChange(!0); })), n.appendChild(i.rows[s].copy_button)), s && !i.hide_move_buttons && (i.rows[s].moveup_button = this.getButton('', this.schema.format === 'tabs-top' ? 'moveleft' : 'moveup', this.translate('button_move_up_title')), i.rows[s].moveup_button.classList.add('moveup', 'json-editor-btntype-move'), i.rows[s].moveup_button.setAttribute('data-i', s), i.rows[s].moveup_button.addEventListener('click', (function (t) { t.preventDefault(), t.stopPropagation(); const e = 1 * this.getAttribute('data-i'); if (!(e <= 0)) { const s = i.getValue(); const n = s[e - 1]; s[e - 1] = s[e], s[e] = n, i.setValue(s), i.active_tab = i.rows[e - 1].tab, i.refreshTabs(), i.onChange(!0), i.jsoneditor.trigger('moveRow', i.rows[e - 1]); } })), n && n.appendChild(i.rows[s].moveup_button)), i.hide_move_buttons || (i.rows[s].movedown_button = this.getButton('', this.schema.format === 'tabs-top' ? 'moveright' : 'movedown', this.translate('button_move_down_title')), i.rows[s].movedown_button.classList.add('movedown', 'json-editor-btntype-move'), i.rows[s].movedown_button.setAttribute('data-i', s), i.rows[s].movedown_button.addEventListener('click', (function (t) { t.preventDefault(), t.stopPropagation(); const e = 1 * this.getAttribute('data-i'); const s = i.getValue(); if (!(e >= s.length - 1)) { const n = s[e + 1]; s[e + 1] = s[e], s[e] = n, i.setValue(s), i.active_tab = i.rows[e + 1].tab, i.refreshTabs(), i.onChange(!0), i.jsoneditor.trigger('moveRow', i.rows[e + 1]); } })), n && n.appendChild(i.rows[s].movedown_button)), t && i.rows[s].setValue(t, e), i.refreshTabs(), i.rows[s]; },
    addControls() { const t = this; this.collapsed = !1, this.toggle_button = this.getButton('', 'collapse', this.translate('button_collapse')), this.toggle_button.classList.add('json-editor-btntype-toggle'), this.toggle_button.style.margin = '0 10px 0 0', this.title.insertBefore(this.toggle_button, this.title.childNodes[0]); const e = t.row_holder.style.display; const i = t.controls.style.display; this.toggle_button.addEventListener('click', (function (s) { s.preventDefault(), s.stopPropagation(), t.collapsed ? (t.collapsed = !1, t.panel && (t.panel.style.display = ''), t.row_holder.style.display = e, t.tabs_holder && (t.tabs_holder.style.display = ''), t.controls.style.display = i, t.setButtonText(this, '', 'collapse', t.translate('button_collapse'))) : (t.collapsed = !0, t.row_holder.style.display = 'none', t.tabs_holder && (t.tabs_holder.style.display = 'none'), t.controls.style.display = 'none', t.panel && (t.panel.style.display = 'none'), t.setButtonText(this, '', 'expand', t.translate('button_expand'))); })), this.options.collapsed && a(this.toggle_button, 'click'), this.schema.options && void 0 !== this.schema.options.disable_collapse ? this.schema.options.disable_collapse && (this.toggle_button.style.display = 'none') : this.jsoneditor.options.disable_collapse && (this.toggle_button.style.display = 'none'), this.add_row_button = this.getButton(this.getItemTitle(), 'add', this.translate('button_add_row_title', [this.getItemTitle()])), this.add_row_button.classList.add('json-editor-btntype-add'), this.add_row_button.addEventListener('click', ((e) => { e.preventDefault(), e.stopPropagation(); let i; const s = t.rows.length; t.row_cache[s] ? (i = t.rows[s] = t.row_cache[s], t.rows[s].setValue(t.rows[s].getDefault(), !0), t.rows[s].container.style.display = '', t.rows[s].tab && (t.rows[s].tab.style.display = ''), t.rows[s].register()) : i = t.addRow(), t.active_tab = t.rows[s].tab, t.refreshTabs(), t.refreshValue(), t.onChange(!0), t.jsoneditor.trigger('addRow', i); })), t.controls.appendChild(this.add_row_button), this.delete_last_row_button = this.getButton(this.translate('button_delete_last', [this.getItemTitle()]), 'subtract', this.translate('button_delete_last_title', [this.getItemTitle()])), this.delete_last_row_button.classList.add('json-editor-btntype-deletelast'), this.delete_last_row_button.addEventListener('click', ((e) => { if (e.preventDefault(), e.stopPropagation(), !t.askConfirmation()) return !1; const i = t.getValue(); let s = null; const n = i.pop(); t.setValue(i), t.rows[t.rows.length - 1] && (s = t.rows[t.rows.length - 1].tab), s && (t.active_tab = s, t.refreshTabs()), t.onChange(!0), t.jsoneditor.trigger('deleteRow', n); })), t.controls.appendChild(this.delete_last_row_button), this.remove_all_rows_button = this.getButton(this.translate('button_delete_all'), 'delete', this.translate('button_delete_all_title')), this.remove_all_rows_button.classList.add('json-editor-btntype-deleteall'), this.remove_all_rows_button.addEventListener('click', ((e) => { if (e.preventDefault(), e.stopPropagation(), !t.askConfirmation()) return !1; t.empty(!0), t.setValue([]), t.onChange(!0), t.jsoneditor.trigger('deleteAllRows'); })), t.controls.appendChild(this.remove_all_rows_button), t.tabs && (this.add_row_button.style.width = '100%', this.add_row_button.style.textAlign = 'left', this.add_row_button.style.marginBottom = '3px', this.delete_last_row_button.style.width = '100%', this.delete_last_row_button.style.textAlign = 'left', this.delete_last_row_button.style.marginBottom = '3px', this.remove_all_rows_button.style.width = '100%', this.remove_all_rows_button.style.textAlign = 'left', this.remove_all_rows_button.style.marginBottom = '3px'); },
    showValidationErrors(t) { const e = this; const i = []; const s = []; o(t, ((t, n) => { n.path === e.path ? i.push(n) : s.push(n); })), this.error_holder && (i.length ? (this.error_holder.innerHTML = '', this.error_holder.style.display = '', o(i, ((t, i) => { e.error_holder.appendChild(e.theme.getErrorMessage(i.message)); }))) : this.error_holder.style.display = 'none'), o(this.rows, ((t, e) => { e.showValidationErrors(s); })); },
  }); const N = O.extend({
    onInputChange() { this.value = this.input.value, this.onChange(!0); }, register() { this._super(), this.input && this.input.setAttribute('name', this.formname); }, unregister() { this._super(), this.input && this.input.removeAttribute('name'); }, getNumColumns() { let t = this.getTitle().length; for (const e in this.select_values) this.select_values.hasOwnProperty(e) && (t = Math.max(t, (`${this.select_values[e]}`).length + 4)); return Math.min(12, Math.max(t / 7, 2)); }, preBuild() { let t; this._super(), this.select_options = {}, this.select_values = {}, this.option_keys = [], this.option_titles = []; const e = this.jsoneditor.expandRefs(this.schema.items || {}); const i = e.enum || []; const s = e.options && e.options.enum_titles || []; for (t = 0; t < i.length; t++) this.sanitize(i[t]) === i[t] && (this.option_keys.push(`${i[t]}`), this.option_titles.push(`${s[t] || i[t]}`), this.select_values[`${i[t]}`] = i[t]); }, build() { let t; const e = this; if (this.options.compact || (this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired())), this.schema.description && (this.description = this.theme.getFormInputDescription(this.schema.description)), this.options.infoText && (this.infoButton = this.theme.getInfoButton(this.options.infoText)), this.options.compact && this.container.classList.add('compact'), !this.schema.format && this.option_keys.length < 8 || this.schema.format === 'checkbox') { for (this.input_type = 'checkboxes', this.inputs = {}, this.controls = {}, t = 0; t < this.option_keys.length; t++) { this.inputs[this.option_keys[t]] = this.theme.getCheckbox(), this.select_options[this.option_keys[t]] = this.inputs[this.option_keys[t]]; const i = this.theme.getCheckboxLabel(this.option_titles[t]); this.controls[this.option_keys[t]] = this.theme.getFormControl(i, this.inputs[this.option_keys[t]]); } this.control = this.theme.getMultiCheckboxHolder(this.controls, this.label, this.description, this.infoButton), this.inputs.controlgroup = this.inputs.controls = this.control; } else { for (this.input_type = 'select', this.input = this.theme.getSelectInput(this.option_keys, !0), this.theme.setSelectOptions(this.input, this.option_keys, this.option_titles), this.input.setAttribute('multiple', 'multiple'), this.input.size = Math.min(10, this.option_keys.length), t = 0; t < this.option_keys.length; t++) this.select_options[this.option_keys[t]] = this.input.children[t]; this.control = this.theme.getFormControl(this.label, this.input, this.description, this.infoButton); }(this.schema.readOnly || this.schema.readonly) && this.disable(!0), this.container.appendChild(this.control), this.multiselectChangeHandler = function (i) { const s = []; for (t = 0; t < e.option_keys.length; t++)e.select_options[e.option_keys[t]] && (e.select_options[e.option_keys[t]].selected || e.select_options[e.option_keys[t]].checked) && s.push(e.select_values[e.option_keys[t]]); e.updateValue(s), e.onChange(!0); }, this.control.addEventListener('change', this.multiselectChangeHandler, !1), window.requestAnimationFrame((() => { e.afterInputReady(); })); }, postBuild() { this._super(); }, afterInputReady() { this.theme.afterInputReady(this.input || this.inputs); }, setValue(t, e) { let i; for (i in t = t || [], Array.isArray(t) || (t = [t]), t = t.map(((t) => `${t}`)), this.select_options) this.select_options.hasOwnProperty(i) && (this.select_options[i][this.input_type === 'select' ? 'selected' : 'checked'] = t.indexOf(i) !== -1); this.updateValue(t), this.onChange(!0); }, removeValue(t) { t = [].concat(t), this.setValue(this.getValue().filter(((e) => t.indexOf(e) === -1))); }, addValue(t) { this.setValue(this.getValue().concat(t)); }, updateValue(t) { for (var e = !1, i = [], s = 0; s < t.length; s++) if (this.select_options[`${t[s]}`]) { const n = this.sanitize(this.select_values[t[s]]); i.push(n), n !== t[s] && (e = !0); } else e = !0; return this.value = i, e; }, sanitize(t) { return this.schema.items.type === 'boolean' ? !!t : this.schema.items.type === 'number' ? 1 * t || 0 : this.schema.items.type === 'integer' ? Math.floor(1 * t || 0) : `${t}`; }, enable() { if (!this.always_disabled) { if (this.input) this.input.disabled = !1; else if (this.inputs) for (const t in this.inputs) this.inputs.hasOwnProperty(t) && (this.inputs[t].disabled = !1); this._super(); } }, disable(t) { if (t && (this.always_disabled = !0), this.input) this.input.disabled = !0; else if (this.inputs) for (const e in this.inputs) this.inputs.hasOwnProperty(e) && (this.inputs[e].disabled = !0); this._super(); }, destroy() { this._super(); }, escapeRegExp(t) { return t.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); }, showValidationErrors(t) { const e = new RegExp(`^${this.escapeRegExp(this.path)}(\\.\\d+)?$`); const i = []; o(t, ((t, s) => { s.path.match(e) && i.push(s.message); })), i.length ? this.theme.addInputError(this.input || this.inputs, `${i.join('. ')}.`) : this.theme.removeInputError(this.input || this.inputs); },
  }); const P = N.extend({
    setValue(t, e) { this.choices_instance ? (t = [].concat(t).map(((t) => `${t}`)), this.updateValue(t), this.choices_instance.removeActiveItems(), this.choices_instance.setChoiceByValue(this.value), this.onChange(!0)) : this._super(t, e); }, afterInputReady() { if (window.Choices && !this.choices_instance) { let t; const e = this; t = this.expandCallbacks('choices', r({}, { removeItems: !0, removeItemButton: !0 }, this.defaults.options.choices || {}, this.options.choices || {}, { addItems: !0, editItems: !1, duplicateItemsAllowed: !1 })), this.newEnumAllowed = !1, this.choices_instance = new window.Choices(this.input, t), this.control.removeEventListener('change', this.multiselectChangeHandler), this.multiselectChangeHandler = function (t) { const i = e.choices_instance.getValue(!0); e.updateValue(i), e.onChange(!0); }, this.control.addEventListener('change', this.multiselectChangeHandler, !1); } this._super(); }, updateValue(t) { t = [].concat(t); for (var e = !1, i = [], s = 0; s < t.length; s++) { if (!this.select_values[`${t[s]}`]) { if (e = !0, !this.newEnumAllowed) continue; if (!this.addNewOption(t[s])) continue; } const n = this.sanitize(this.select_values[t[s]]); i.push(n), n !== t[s] && (e = !0); } return this.value = i, e; }, addNewOption(t) { return this.option_keys.push(`${t}`), this.option_titles.push(`${t}`), this.select_values[`${t}`] = t, this.schema.items.enum.push(t), this.choices_instance.setChoices([{ value: `${t}`, label: `${t}` }], 'value', 'label', !1), !0; }, enable() { !this.always_disabled && this.choices_instance && this.choices_instance.enable(), this._super(); }, disable(t) { this.choices_instance && this.choices_instance.disable(), this._super(t); }, destroy() { this.choices_instance && (this.choices_instance.destroy(), this.choices_instance = null), this._super(); },
  }); const B = N.extend({
    setValue(t, e) { this.select2_instance ? (t = [].concat(t).map(((t) => `${t}`)), this.updateValue(t), this.select2v4 ? this.select2_instance.val(this.value).change() : this.select2_instance.select2('val', this.value), this.onChange(!0)) : this._super(t, e); }, afterInputReady() { let t; const e = this; window.jQuery && window.jQuery.fn && window.jQuery.fn.select2 && !this.select2_instance && (t = this.expandCallbacks('select2', r({}, { tags: !0, width: '100%' }, this.defaults.options.select2 || {}, this.options.select2 || {})), this.newEnumAllowed = t.tags = !!t.tags && this.schema.items && this.schema.items.type === 'string', this.select2_instance = window.jQuery(this.input).select2(t), this.select2v4 = this.select2_instance.select2.hasOwnProperty('amd'), this.selectChangeHandler = function () { const t = e.select2v4 ? e.select2_instance.val() : e.select2_instance.select2('val'); e.updateValue(t), e.onChange(!0); }, this.select2_instance.on('select2-blur', this.selectChangeHandler), this.select2_instance.on('change', this.selectChangeHandler)), this._super(); }, updateValue(t) { t = [].concat(t); for (var e = !1, i = [], s = 0; s < t.length; s++) { if (!this.select_values[`${t[s]}`]) { if (e = !0, !this.newEnumAllowed) continue; if (!this.addNewOption(t[s])) continue; } const n = this.sanitize(this.select_values[t[s]]); i.push(n), n !== t[s] && (e = !0); } return this.value = i, e; }, addNewOption(t) { this.option_keys.push(`${t}`), this.option_titles.push(`${t}`), this.select_values[`${t}`] = t, this.schema.items.enum.push(t); const e = this.input.querySelector(`option[value="${t}"]`); return e ? e.removeAttribute('data-select2-tag') : this.input.appendChild(new Option(t, t, !1, !1)).trigger('change'), !0; }, enable() { !this.always_disabled && this.select2_instance && (this.select2v4 ? this.select2_instance.prop('disabled', !1) : this.select2_instance.select2('enable', !0)), this._super(); }, disable(t) { this.select2_instance && (this.select2v4 ? this.select2_instance.prop('disabled', !0) : this.select2_instance.select2('enable', !1)), this._super(); }, destroy() { this.select2_instance && (this.select2_instance.select2('destroy'), this.select2_instance = null), this._super(); },
  }); const V = N.extend({
    setValue(t, e) { this.selectize_instance ? (t = [].concat(t).map(((t) => `${t}`)), this.updateValue(t), this.selectize_instance.setValue(this.value), this.onChange(!0)) : this._super(t, e); },
    afterInputReady() {
      let t; const e = this; window.jQuery && window.jQuery.fn && window.jQuery.fn.selectize && !this.selectize_instance && (t = this.expandCallbacks('selectize', r({}, {
        plugins: ['remove_button'], delimiter: !1, createOnBlur: !0, create: !0,
      }, this.defaults.options.selectize || {}, this.options.selectize || {})), this.newEnumAllowed = t.create = !!t.create && this.schema.items && this.schema.items.type === 'string', this.selectize_instance = window.jQuery(this.input).selectize(t)[0].selectize, this.control.removeEventListener('change', this.multiselectChangeHandler), this.multiselectChangeHandler = function (t) { const i = e.selectize_instance.getValue(); e.updateValue(i), e.onChange(!0); }, this.selectize_instance.on('change', this.multiselectChangeHandler)), this._super();
    },
    updateValue(t) { t = [].concat(t); for (var e = !1, i = [], s = 0; s < t.length; s++) { if (!this.select_values[`${t[s]}`]) { if (e = !0, !this.newEnumAllowed) continue; if (!this.addNewOption(t[s])) continue; } const n = this.sanitize(this.select_values[t[s]]); i.push(n), n !== t[s] && (e = !0); } return this.value = i, e; },
    addNewOption(t) { return this.option_keys.push(`${t}`), this.option_titles.push(`${t}`), this.select_values[`${t}`] = t, this.schema.items.enum.push(t), this.selectize_instance.addOption({ text: t, value: t }), !0; },
    enable() { !this.always_disabled && this.selectize_instance && this.selectize_instance.unlock(), this._super(); },
    disable(t) { this.selectize_instance && this.selectize_instance.lock(), this._super(t); },
    destroy() { this.selectize_instance && (this.selectize_instance.destroy(), this.selectize_instance = null), this._super(); },
  }); const H = A.extend({ postBuild() { window.Autocomplete && (this.autocomplete_wrapper = document.createElement('div'), this.input.parentNode.insertBefore(this.autocomplete_wrapper, this.input.nextSibling), this.autocomplete_wrapper.appendChild(this.input), this.autocomplete_dropdown = document.createElement('ul'), this.input.parentNode.insertBefore(this.autocomplete_dropdown, this.input.nextSibling)), this._super(); }, afterInputReady() { let t; window.Autocomplete && !this.autocomplete_instance && (t = this.expandCallbacks('autocomplete', r({}, { search: function (t, e) { return console.log(`No "search" callback defined for autocomplete in property "${t.key}"`), []; }.bind(null, this), baseClass: 'autocomplete' }, this.defaults.options.autocomplete || {}, this.options.autocomplete || {})), this.autocomplete_wrapper.classList.add(t.baseClass), this.autocomplete_dropdown.classList.add(`${t.baseClass}-result-list`), this.autocomplete_instance = new window.Autocomplete(this.autocomplete_wrapper, t)), this._super(); }, destroy() { this.autocomplete_instance && (this.input && this.input.parentNode && this.input.parentNode.removeChild(this.input), this.autocomplete_dropdown && this.autocomplete_dropdown.parentNode && this.autocomplete_dropdown.parentNode.removeChild(this.autocomplete_dropdown), this.autocomplete_wrapper && this.autocomplete_wrapper.parentNode && this.autocomplete_wrapper.parentNode.removeChild(this.autocomplete_wrapper), this.autocomplete_instance = null), this._super(); } }); const F = O.extend({
    getNumColumns() { return 4; }, setFileReaderListener(t) { const e = this; t.addEventListener('load', ((t) => { if (e.count === e.current_item_index)e.value[e.count][e.key] = t.target.result; else { const i = {}; for (const s in e.parent.schema.properties)i[s] = ''; i[e.key] = t.target.result, e.value.splice(e.count, 0, i); }e.count += 1, e.count === e.total + e.current_item_index && e.arrayEditor.setValue(e.value); })); }, build() { const t = this; if (this.title = this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired()), this.options.infoText && (this.infoButton = this.theme.getInfoButton(this.options.infoText)), this.input = this.theme.getFormInputField('hidden'), this.container.appendChild(this.input), !this.schema.readOnly && !this.schema.readonly) { if (!window.FileReader) throw new Error('FileReader required for base64 editor'); this.uploader = this.theme.getFormInputField('file'), t.schema.options && t.schema.options.multiple && !0 === t.schema.options.multiple && t.parent && t.parent.schema.type === 'object' && t.parent.parent && t.parent.parent.schema.type === 'array' && this.uploader.setAttribute('multiple', ''), this.uploader.addEventListener('change', (function (e) { if (e.preventDefault(), e.stopPropagation(), this.files && this.files.length) if (this.files.length > 1 && t.schema.options && t.schema.options.multiple && !0 === t.schema.options.multiple && t.parent && t.parent.schema.type === 'object' && t.parent.parent && t.parent.parent.schema.type === 'array') { t.arrayEditor = t.jsoneditor.getEditor(t.parent.parent.path), t.value = t.arrayEditor.getValue(), t.total = this.files.length, t.current_item_index = parseInt(t.parent.key), t.count = t.current_item_index; for (let i = 0; i < t.total; i++) { const s = new FileReader(); t.setFileReaderListener(s), s.readAsDataURL(this.files[i]); } } else { let n = new FileReader(); n.onload = function (e) { t.value = e.target.result, t.refreshPreview(), t.onChange(!0), n = null; }, n.readAsDataURL(this.files[0]); } })); } this.preview = this.theme.getFormInputDescription(this.schema.description), this.container.appendChild(this.preview), this.control = this.theme.getFormControl(this.label, this.uploader || this.input, this.preview, this.infoButton), this.container.appendChild(this.control); }, refreshPreview() { if (this.last_preview !== this.value && (this.last_preview = this.value, this.preview.innerHTML = '', this.value)) { let t = this.value.match(/^data:([^;,]+)[;,]/); if (t && (t = t[1]), t) { if (this.preview.innerHTML = `<strong>Type:</strong> ${t}, <strong>Size:</strong> ${Math.floor((this.value.length - this.value.split(',')[0].length - 1) / 1.33333)} bytes`, t.substr(0, 5) === 'image') { this.preview.innerHTML += '<br>'; const e = document.createElement('img'); e.style.maxWidth = '100%', e.style.maxHeight = '100px', e.src = this.value, this.preview.appendChild(e); } } else this.preview.innerHTML = '<em>Invalid data URI</em>'; } }, enable() { this.always_disabled || (this.uploader && (this.uploader.disabled = !1), this._super()); }, disable(t) { t && (this.always_disabled = !0), this.uploader && (this.uploader.disabled = !0), this._super(); }, setValue(t) { this.value !== t && (this.value = t, this.input.value = this.value, this.refreshPreview(), this.onChange()); }, destroy() { this.preview && this.preview.parentNode && this.preview.parentNode.removeChild(this.preview), this.title && this.title.parentNode && this.title.parentNode.removeChild(this.title), this.input && this.input.parentNode && this.input.parentNode.removeChild(this.input), this.uploader && this.uploader.parentNode && this.uploader.parentNode.removeChild(this.uploader), this._super(); },
  }); const z = O.extend({
    init(t, e) { this._super(t, e), this.active = !1, this.parent && this.parent.schema && (Array.isArray(this.parent.schema.required) ? this.parent.schema.required.indexOf(this.key) === -1 && this.parent.schema.required.push(this.key) : this.parent.schema.required = [this.key]); },
    build() {
      this.options.compact = !0; const t = this.schema.title || this.key; const e = this.expandCallbacks('button', r({}, {
        icon: '', validated: !1, align: 'left', action: function (t, e) { window.alert(`No button action defined for "${t.path}"`); }.bind(null, this),
      }, this.defaults.options.button || {}, this.options.button || {})); this.input = this.theme.getFormButton(t, e.icon, t), this.input.addEventListener('click', e.action, !1), (this.schema.readOnly || this.schema.readonly || this.schema.template) && (this.always_disabled = !0, this.input.setAttribute('readonly', 'true')), this.setInputAttributes(['readonly']), this.control = this.theme.getFormButtonHolder(e.align), this.control.appendChild(this.input), this.container.appendChild(this.control); const i = this; this.changeHandler = function () { i.jsoneditor.validate(i.jsoneditor.getValue()).length > 0 ? i.disable() : i.enable(); }, e.validated && this.jsoneditor.on('change', this.changeHandler);
    },
    enable() { this.always_disabled || (this.input.disabled = !1, this._super()); },
    disable(t) { t && (this.always_disabled = !0), this.input.disabled = !0, this._super(); },
    getNumColumns() { return 2; },
    activate() { this.active = !1, this.enable(); },
    deactivate() { this.isRequired() || (this.active = !1, this.disable()); },
    destroy() { this.jsoneditor.off('change', this.changeHandler), this.changeHandler = null, this._super(); },
  }); const R = O.extend({
    setValue(t, e) { t = !!t; const i = this.getValue() !== t; this.value = t, this.input.checked = this.value, this.onChange(i); }, register() { this._super(), this.input && this.input.setAttribute('name', this.formname); }, unregister() { this._super(), this.input && this.input.removeAttribute('name'); }, getNumColumns() { return Math.min(12, Math.max(this.getTitle().length / 7, 2)); }, build() { const t = this; this.label = this.header = this.theme.getCheckboxLabel(this.getTitle(), this.isRequired()), this.schema.description && (this.description = this.theme.getFormInputDescription(this.schema.description)), this.options.infoText && !this.options.compact && (this.infoButton = this.theme.getInfoButton(this.options.infoText)), this.options.compact && this.container.classList.add('compact'), this.input = this.theme.getCheckbox(), this.control = this.theme.getFormControl(this.label, this.input, this.description, this.infoButton), (this.schema.readOnly || this.schema.readonly) && (this.always_disabled = !0, this.input.disabled = !0), this.input.addEventListener('change', (function (e) { e.preventDefault(), e.stopPropagation(), t.value = this.checked, t.onChange(!0); })), this.container.appendChild(this.control); }, enable() { this.always_disabled || (this.input.disabled = !1, this._super()); }, disable(t) { t && (this.always_disabled = !0), this.input.disabled = !0, this._super(); }, destroy() { this.label && this.label.parentNode && this.label.parentNode.removeChild(this.label), this.description && this.description.parentNode && this.description.parentNode.removeChild(this.description), this.input && this.input.parentNode && this.input.parentNode.removeChild(this.input), this._super(); }, showValidationErrors(t) { const e = this; if (this.jsoneditor.options.show_errors === 'always');else if (!this.is_dirty && this.previous_error_setting === this.jsoneditor.options.show_errors) return; this.previous_error_setting = this.jsoneditor.options.show_errors; const i = []; o(t, ((t, s) => { s.path === e.path && i.push(s.message); })), this.input.controlgroup = this.control, i.length ? this.theme.addInputError(this.input, `${i.join('. ')}.`) : this.theme.removeInputError(this.input); },
  }); const M = O.extend({
    setValue(t, e) { let i = this.typecast(t || ''); this.enum_values.indexOf(i) < 0 && (i = this.enum_values[0]), this.value !== i && (e ? this.is_dirty = !1 : this.jsoneditor.options.show_errors === 'change' && (this.is_dirty = !0), this.input.value = this.enum_options[this.enum_values.indexOf(i)], this.value = i, this.onChange(), this.change()); }, register() { this._super(), this.input && this.input.setAttribute('name', this.formname); }, unregister() { this._super(), this.input && this.input.removeAttribute('name'); }, getNumColumns() { if (!this.enum_options) return 3; for (var t = this.getTitle().length, e = 0; e < this.enum_options.length; e++)t = Math.max(t, this.enum_options[e].length + 4); return Math.min(12, Math.max(t / 7, 2)); }, typecast(t) { return this.schema.type === 'boolean' ? t === 'undefined' || void 0 === t ? void 0 : !!t : this.schema.type === 'number' ? 1 * t || 0 : this.schema.type === 'integer' ? Math.floor(1 * t || 0) : `${t}`; }, getValue() { if (this.dependenciesFulfilled) return this.typecast(this.value); }, preBuild() { let t; let e; const i = this; if (this.input_type = 'select', this.enum_options = [], this.enum_values = [], this.enum_display = [], this.schema.enum) { const s = this.schema.options && this.schema.options.enum_titles || []; o(this.schema.enum, ((t, e) => { i.enum_options[t] = `${e}`, i.enum_display[t] = `${s[t] || e}`, i.enum_values[t] = i.typecast(e); })), this.isRequired() || (i.enum_display.unshift(' '), i.enum_options.unshift('undefined'), i.enum_values.unshift(void 0)); } else if (this.schema.type === 'boolean')i.enum_display = this.schema.options && this.schema.options.enum_titles || ['true', 'false'], i.enum_options = ['1', ''], i.enum_values = [!0, !1], this.isRequired() || (i.enum_display.unshift(' '), i.enum_options.unshift('undefined'), i.enum_values.unshift(void 0)); else { if (!this.schema.enumSource) throw new Error("'select' editor requires the enum property to be set."); if (this.enumSource = [], this.enum_display = [], this.enum_options = [], this.enum_values = [], Array.isArray(this.schema.enumSource)) for (t = 0; t < this.schema.enumSource.length; t++) typeof this.schema.enumSource[t] === 'string' ? this.enumSource[t] = { source: this.schema.enumSource[t] } : Array.isArray(this.schema.enumSource[t]) ? this.enumSource[t] = this.schema.enumSource[t] : this.enumSource[t] = r({}, this.schema.enumSource[t]); else this.schema.enumValue ? this.enumSource = [{ source: this.schema.enumSource, value: this.schema.enumValue }] : this.enumSource = [{ source: this.schema.enumSource }]; for (t = 0; t < this.enumSource.length; t++) this.enumSource[t].value && (typeof (e = this.expandCallbacks('template', { template: this.enumSource[t].value })).template === 'function' ? this.enumSource[t].value = e.template : this.enumSource[t].value = this.jsoneditor.compileTemplate(this.enumSource[t].value, this.template_engine)), this.enumSource[t].title && (typeof (e = this.expandCallbacks('template', { template: this.enumSource[t].title })).template === 'function' ? this.enumSource[t].title = e.template : this.enumSource[t].title = this.jsoneditor.compileTemplate(this.enumSource[t].title, this.template_engine)), this.enumSource[t].filter && this.enumSource[t].value && (typeof (e = this.expandCallbacks('template', { template: this.enumSource[t].filter })).template === 'function' ? this.enumSource[t].filter = e.template : this.enumSource[t].filter = this.jsoneditor.compileTemplate(this.enumSource[t].filter, this.template_engine)); } }, build() { const t = this; this.options.compact || (this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired())), this.schema.description && (this.description = this.theme.getFormInputDescription(this.schema.description)), this.options.infoText && (this.infoButton = this.theme.getInfoButton(this.options.infoText)), this.options.compact && this.container.classList.add('compact'), this.input = this.theme.getSelectInput(this.enum_options, !1), this.theme.setSelectOptions(this.input, this.enum_options, this.enum_display), (this.schema.readOnly || this.schema.readonly) && (this.always_disabled = !0, this.input.disabled = !0), this.setInputAttributes([]), this.input.addEventListener('change', ((e) => { e.preventDefault(), e.stopPropagation(), t.onInputChange(); })), this.control = this.theme.getFormControl(this.label, this.input, this.description, this.infoButton), this.container.appendChild(this.control), this.value = this.enum_values[0], window.requestAnimationFrame((() => { t.input.parentNode && t.afterInputReady(); })); }, afterInputReady() { this.theme.afterInputReady(this.input); }, onInputChange() { let t; const e = this.typecast(this.input.value); (t = this.enum_values.indexOf(e) === -1 ? this.enum_values[0] : this.enum_values[this.enum_values.indexOf(e)]) !== this.value && (this.is_dirty = !0, this.value = t, this.onChange(!0)); }, onWatchedFieldChange() { let t; let e; let i = []; let s = []; if (this.enumSource) { t = this.getWatchedFieldValues(); for (let n = 0; n < this.enumSource.length; n++) if (Array.isArray(this.enumSource[n]))i = i.concat(this.enumSource[n]), s = s.concat(this.enumSource[n]); else { let r = []; if (r = Array.isArray(this.enumSource[n].source) ? this.enumSource[n].source : t[this.enumSource[n].source]) { if (this.enumSource[n].slice && (r = Array.prototype.slice.apply(r, this.enumSource[n].slice)), this.enumSource[n].filter) { const o = []; for (e = 0; e < r.length; e++) this.enumSource[n].filter({ i: e, item: r[e], watched: t }) && o.push(r[e]); r = o; } const a = []; const l = []; for (e = 0; e < r.length; e++) { const h = r[e]; this.enumSource[n].value ? l[e] = this.typecast(this.enumSource[n].value({ i: e, item: h })) : l[e] = r[e], this.enumSource[n].title ? a[e] = this.enumSource[n].title({ i: e, item: h }) : a[e] = l[e]; } this.enumSource[n].sort && function (t, e, i) { t.map(((t, i) => ({ v: t, t: e[i] }))).sort(((t, e) => (t.v < e.v ? -i : t.v === e.v ? 0 : i))).forEach(((i, s) => { t[s] = i.v, e[s] = i.t; })); }.bind(null, l, a, this.enumSource[n].sort === 'desc' ? 1 : -1)(), i = i.concat(l), s = s.concat(a); } } const d = this.value; this.theme.setSelectOptions(this.input, i, s), this.enum_options = i, this.enum_display = s, this.enum_values = i, i.indexOf(d) !== -1 || !1 !== this.jsoneditor.options.enum_source_value_auto_select ? (this.input.value = d, this.value = d) : (this.input.value = i[0], this.value = this.typecast(i[0] || ''), this.parent && !this.watchLoop ? this.parent.onChildEditorChange(this) : this.jsoneditor.onChange(), this.jsoneditor.notifyWatchers(this.path)); } this._super(); }, enable() { this.always_disabled || (this.input.disabled = !1), this._super(); }, disable(t) { t && (this.always_disabled = !0), this.input.disabled = !0, this._super(t); }, destroy() { this.label && this.label.parentNode && this.label.parentNode.removeChild(this.label), this.description && this.description.parentNode && this.description.parentNode.removeChild(this.description), this.input && this.input.parentNode && this.input.parentNode.removeChild(this.input), this._super(); }, showValidationErrors(t) { const e = this; this.previous_error_setting = this.jsoneditor.options.show_errors; const i = []; o(t, ((t, s) => { s.path === e.path && i.push(s.message); })), i.length ? this.theme.addInputError(this.input, `${i.join('. ')}.`) : this.theme.removeInputError(this.input); },
  }); const D = M.extend({
    setValue(t, e) { if (this.choices_instance) { let i = this.typecast(t || ''); if (this.enum_values.indexOf(i) < 0 && (i = this.enum_values[0]), this.value === i) return; e ? this.is_dirty = !1 : this.jsoneditor.options.show_errors === 'change' && (this.is_dirty = !0), this.input.value = this.enum_options[this.enum_values.indexOf(i)], this.choices_instance.setChoiceByValue(this.input.value), this.value = i, this.onChange(); } else this._super(t, e); }, afterInputReady() { let t; window.Choices && !this.choices_instance && (t = this.expandCallbacks('choices', r({}, this.defaults.options.choices || {}, this.options.choices || {})), this.choices_instance = new window.Choices(this.input, t)); this._super(); }, onWatchedFieldChange() { if (this._super(), this.choices_instance) { const t = this; const e = this.enum_options.map(((e, i) => ({ value: e, label: t.enum_display[i] }))); this.choices_instance.setChoices(e, 'value', 'label', !0), this.choices_instance.setChoiceByValue(`${this.value}`); } }, enable() { !this.always_disabled && this.choices_instance && this.choices_instance.enable(), this._super(); }, disable(t) { this.choices_instance && this.choices_instance.disable(), this._super(t); }, destroy() { this.choices_instance && (this.choices_instance.destroy(), this.choices_instance = null), this._super(); },
  }); const q = A.extend({
    build() { if (this._super(), this.input && window.flatpickr && typeof this.options.flatpickr === 'object') { this.options.flatpickr.enableTime = this.schema.format !== 'date', this.options.flatpickr.noCalendar = this.schema.format === 'time', this.schema.type === 'integer' && (this.options.flatpickr.mode = 'single'), this.input.setAttribute('data-input', ''); let t = this.input; if (!0 === this.options.flatpickr.wrap) { const e = []; if (!1 !== this.options.flatpickr.showToggleButton) { const i = this.getButton('', this.schema.format === 'time' ? 'time' : 'calendar', this.translate('flatpickr_toggle_button')); i.setAttribute('data-toggle', ''), e.push(i); } if (!1 !== this.options.flatpickr.showClearButton) { const s = this.getButton('', 'clear', this.translate('flatpickr_clear_button')); s.setAttribute('data-clear', ''), e.push(s); } const n = this.input.parentNode; const r = this.input.nextSibling; const o = this.theme.getInputGroup(this.input, e); void 0 !== o ? (this.options.flatpickr.inline = !1, n.insertBefore(o, r), t = o) : this.options.flatpickr.wrap = !1; } this.flatpickr = window.flatpickr(t, this.options.flatpickr), !0 === this.options.flatpickr.inline && !0 === this.options.flatpickr.inlineHideInput && this.input.setAttribute('type', 'hidden'); } }, getValue() { if (this.dependenciesFulfilled) { if (this.schema.type === 'string') return this.value; if (this.value !== '' && void 0 !== this.value) { const t = this.schema.format === 'time' ? `1970-01-01 ${this.value}` : this.value; return parseInt(new Date(t).getTime() / 1e3); } } }, setValue(t, e, i) { if (this.schema.type === 'string') this._super(t, e, i), this.flatpickr && this.flatpickr.setDate(t); else if (t > 0) { const s = new Date(1e3 * t); const n = s.getFullYear(); const r = this.zeroPad(s.getMonth() + 1); const o = this.zeroPad(s.getDate()); const a = this.zeroPad(s.getHours()); const l = this.zeroPad(s.getMinutes()); const h = this.zeroPad(s.getSeconds()); const d = [n, r, o].join('-'); const c = [a, l, h].join(':'); let u = `${d}T${c}`; this.schema.format === 'date' ? u = d : this.schema.format === 'time' && (u = c), this.input.value = u, this.refreshValue(), this.flatpickr && this.flatpickr.setDate(u); } }, destroy() { this.flatpickr && this.flatpickr.destroy(), this.flatpickr = null, this._super(); }, zeroPad(t) { return (`0${t}`).slice(-2); },
  }); const G = O.extend({
    register() { if (this.editors) { for (let t = 0; t < this.editors.length; t++) this.editors[t] && this.editors[t].unregister(); this.editors[this.currentEditor] && this.editors[this.currentEditor].register(); } this._super(); },
    unregister() { if (this._super(), this.editors) for (let t = 0; t < this.editors.length; t++) this.editors[t] && this.editors[t].unregister(); },
    getNumColumns() { return this.editors[this.currentEditor] ? Math.max(this.editors[this.currentEditor].getNumColumns(), 4) : 4; },
    enable() { if (this.editors) for (let t = 0; t < this.editors.length; t++) this.editors[t] && this.editors[t].enable(); this._super(); },
    disable() { if (this.editors) for (let t = 0; t < this.editors.length; t++) this.editors[t] && this.editors[t].disable(); this._super(); },
    switchEditor() { const t = this; const e = this.getWatchedFieldValues(); if (e) { const i = document.location.origin + document.location.pathname + this.template(e); this.editors[this.refs[i]] || this.buildChildEditor(i), this.currentEditor = this.refs[i], this.register(), o(this.editors, ((e, i) => { i && (t.currentEditor === e ? i.container.style.display = '' : i.container.style.display = 'none'); })), this.refreshValue(), this.onChange(!0); } },
    buildChildEditor(t) {
      this.refs[t] = this.editors.length; const e = this.theme.getChildEditorHolder(); this.editor_holder.appendChild(e); const i = r({}, this.schema, this.jsoneditor.refs[t]); const s = this.jsoneditor.getEditorClass(i, this.jsoneditor); const n = this.jsoneditor.createEditor(s, {
        jsoneditor: this.jsoneditor, schema: i, container: e, path: this.path, parent: this, required: !0,
      }); this.editors.push(n), n.preBuild(), n.build(), n.postBuild();
    },
    preBuild() { let t; for (this.refs = {}, this.editors = [], this.currentEditor = '', t = 0; t < this.schema.links.length; t++) if (this.schema.links[t].rel.toLowerCase() === 'describedby') { this.template = this.jsoneditor.compileTemplate(this.schema.links[t].href, this.template_engine); break; } this.schema.links = this.schema.links.slice(0, t).concat(this.schema.links.slice(t + 1)), this.schema.links.length === 0 && delete this.schema.links, this.baseSchema = r({}, this.schema); },
    build() { this.editor_holder = document.createElement('div'), this.container.appendChild(this.editor_holder), this.switchEditor(); },
    onWatchedFieldChange() { this.switchEditor(); },
    onChildEditorChange(t) { this.editors[this.currentEditor] && this.refreshValue(), this._super(t); },
    refreshValue() { this.editors[this.currentEditor] && (this.value = this.editors[this.currentEditor].getValue()); },
    setValue(t, e) { this.editors[this.currentEditor] && (this.editors[this.currentEditor].setValue(t, e), this.refreshValue(), this.onChange()); },
    destroy() { o(this.editors, ((t, e) => { e && e.destroy(); })), this.editor_holder && this.editor_holder.parentNode && this.editor_holder.parentNode.removeChild(this.editor_holder), this._super(); },
    showValidationErrors(t) { o(this.editors, ((e, i) => { i && i.showValidationErrors(t); })); },
  }); const J = O.extend({
    getNumColumns() { return 4; }, build() { this.title = this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired()), this.container.appendChild(this.title), this.options.enum_titles = this.options.enum_titles || [], this.enum = this.schema.enum, this.selected = 0, this.select_options = [], this.html_values = []; for (var t = this, e = 0; e < this.enum.length; e++) this.select_options[e] = this.options.enum_titles[e] || `Value ${e + 1}`, this.html_values[e] = this.getHTML(this.enum[e]); this.switcher = this.theme.getSwitcher(this.select_options), this.container.appendChild(this.switcher), this.display_area = this.theme.getIndentedPanel(), this.container.appendChild(this.display_area), this.options.hide_display && (this.display_area.style.display = 'none'), this.switcher.addEventListener('change', (function () { t.selected = t.select_options.indexOf(this.value), t.value = t.enum[t.selected], t.refreshValue(), t.onChange(!0); })), this.value = this.enum[0], this.refreshValue(), this.enum.length === 1 && (this.switcher.style.display = 'none'); }, refreshValue() { const t = this; t.selected = -1; const e = JSON.stringify(this.value); o(this.enum, ((i, s) => { if (e === JSON.stringify(s)) return t.selected = i, !1; })), t.selected < 0 ? t.setValue(t.enum[0]) : (this.switcher.value = this.select_options[this.selected], this.display_area.innerHTML = this.html_values[this.selected]); }, enable() { this.always_disabled || (this.switcher.disabled = !1, this._super()); }, disable(t) { t && (this.always_disabled = !0), this.switcher.disabled = !0, this._super(); }, getHTML(t) { const e = this; if (t === null) return '<em>null</em>'; if (typeof t === 'object') { let i = ''; return o(t, ((s, n) => { let r = e.getHTML(n); Array.isArray(t) || (r = `<div><em>${s}</em>: ${r}</div>`), i += `<li>${r}</li>`; })), i = Array.isArray(t) ? `<ol>${i}</ol>` : `<ul style='margin-top:0;margin-bottom:0;padding-top:0;padding-bottom:0;'>${i}</ul>`; } return typeof t === 'boolean' ? t ? 'true' : 'false' : typeof t === 'string' ? t.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;') : t; }, setValue(t) { this.value !== t && (this.value = t, this.refreshValue(), this.onChange()); }, destroy() { this.display_area && this.display_area.parentNode && this.display_area.parentNode.removeChild(this.display_area), this.title && this.title.parentNode && this.title.parentNode.removeChild(this.title), this.switcher && this.switcher.parentNode && this.switcher.parentNode.removeChild(this.switcher), this._super(); },
  }); const U = O.extend({
    register() { this._super(), this.input && this.input.setAttribute('name', this.formname); }, unregister() { this._super(), this.input && this.input.removeAttribute('name'); }, setValue(t, e, i) { if ((!this.template || i) && (t == null ? t = '' : typeof t === 'object' ? t = JSON.stringify(t) : typeof t !== 'string' && (t = `${t}`), t !== this.serialized)) { const s = this.sanitize(t); if (this.input.value !== s) { this.input.value = s; const n = i || this.getValue() !== t; this.refreshValue(), e ? this.is_dirty = !1 : this.jsoneditor.options.show_errors === 'change' && (this.is_dirty = !0), this.adjust_height && this.adjust_height(this.input), this.onChange(n); } } }, getNumColumns() { return 2; }, enable() { this._super(); }, disable() { this._super(); }, refreshValue() { this.value = this.input.value, typeof this.value !== 'string' && (this.value = ''), this.serialized = this.value; }, destroy() { this.template = null, this.input && this.input.parentNode && this.input.parentNode.removeChild(this.input), this.label && this.label.parentNode && this.label.parentNode.removeChild(this.label), this.description && this.description.parentNode && this.description.parentNode.removeChild(this.description), this._super(); }, sanitize(t) { return t; }, onWatchedFieldChange() { let t; this.template && (t = this.getWatchedFieldValues(), this.setValue(this.template(t), !1, !0)), this._super(); }, build() { if (this.format = this.schema.format, !this.format && this.options.default_format && (this.format = this.options.default_format), this.options.format && (this.format = this.options.format), this.input_type = 'hidden', this.input = this.theme.getFormInputField(this.input_type), this.format && this.input.setAttribute('data-schemaformat', this.format), this.container.appendChild(this.input), this.schema.template) { const t = this.expandCallbacks('template', { template: this.schema.template }); typeof t.template === 'function' ? this.template = t.template : this.template = this.jsoneditor.compileTemplate(this.schema.template, this.template_engine), this.refreshValue(); } else this.refreshValue(); },
  }); const W = z.extend({ build() { this.options.compact = !1, this.header = this.label = this.theme.getFormInputLabel(this.getTitle()), this.description = this.theme.getDescription(this.schema.description || ''), this.control = this.theme.getFormControl(this.label, this.description, null), this.container.appendChild(this.control); }, getTitle() { return this.schema.title; }, getNumColumns() { return 12; } }); const Z = A.extend({
    build() { if (this._super(), void 0 !== this.schema.minimum) { let t = this.schema.minimum; void 0 !== this.schema.exclusiveMinimum && (t += 1), this.input.setAttribute('min', t); } if (void 0 !== this.schema.maximum) { let e = this.schema.maximum; void 0 !== this.schema.exclusiveMaximum && (e -= 1), this.input.setAttribute('max', e); } if (void 0 !== this.schema.step) { const i = this.schema.step || 1; this.input.setAttribute('step', i); } this.setInputAttributes(['maxlength', 'pattern', 'readonly', 'min', 'max', 'step']); }, sanitize(t) { return (`${t}`).replace(/[^0-9\.\-eE]/g, ''); }, getNumColumns() { return 2; }, getValue() { if (this.dependenciesFulfilled) return this.value === '' ? void 0 : 1 * this.value; },
  }); const $ = Z.extend({ sanitize(t) { return (t += '').replace(/[^0-9\-]/g, ''); }, getNumColumns() { return 2; } }); const Q = A.extend({ preBuild() { if (this._super(), this.schema.options || (this.schema.options = {}), !this.schema.options.cleave) switch (this.format) { case 'ipv6': this.schema.options.cleave = { delimiters: [':'], blocks: [4, 4, 4, 4, 4, 4, 4, 4], uppercase: !0 }; break; case 'ipv4': this.schema.options.cleave = { delimiters: ['.'], blocks: [3, 3, 3, 3], numericOnly: !0 }; } this.options = r(this.options, this.schema.options || {}); } }); const Y = A.extend({
    setValue(t, e, i) { const s = this._super(t, e, i); void 0 !== s && s.changed && this.jodit_instance && this.jodit_instance.setEditorValue(s.value); }, build() { this.options.format = 'textarea', this._super(), this.input_type = this.schema.format, this.input.setAttribute('data-schemaformat', this.input_type); }, afterInputReady() { let t; const e = this; window.Jodit ? (t = this.expandCallbacks('jodit', r({}, { height: 300 }, this.defaults.options.jodit || {}, this.options.jodit || {})), this.jodit_instance = new window.Jodit(this.input, t), (this.schema.readOnly || this.schema.readonly || this.schema.template) && this.jodit_instance.setReadOnly(!0), this.jodit_instance.events.on('change', (() => { e.value = e.jodit_instance.getEditorValue(), e.is_dirty = !0, e.onChange(!0); })), this.theme.afterInputReady(e.input)) : this._super(); }, getNumColumns() { return 6; }, enable() { !this.always_disabled && this.jodit_instance && this.jodit_instance.setReadOnly(!1), this._super(); }, disable(t) { this.jodit_instance && this.jodit_instance.setReadOnly(!0), this._super(t); }, destroy() { this.jodit_instance && (this.jodit_instance.destruct(), this.jodit_instance = null), this._super(); },
  }); const X = O.extend({
    register() { if (this.editors) { for (let t = 0; t < this.editors.length; t++) this.editors[t] && this.editors[t].unregister(); this.editors[this.type] && this.editors[this.type].register(); } this._super(); },
    unregister() { if (this._super(), this.editors) for (let t = 0; t < this.editors.length; t++) this.editors[t] && this.editors[t].unregister(); },
    getNumColumns() { return this.editors[this.type] ? Math.max(this.editors[this.type].getNumColumns(), 4) : 4; },
    enable() { if (!this.always_disabled) { if (this.editors) for (let t = 0; t < this.editors.length; t++) this.editors[t] && this.editors[t].enable(); this.switcher.disabled = !1, this._super(); } },
    disable(t) { if (t && (this.always_disabled = !0), this.editors) for (let e = 0; e < this.editors.length; e++) this.editors[e] && this.editors[e].disable(t); this.switcher.disabled = !0, this._super(); },
    switchEditor(t) { const e = this; this.editors[t] || this.buildChildEditor(t); const i = e.getValue(); e.type = t, e.register(), o(e.editors, ((t, s) => { s && (e.type === t ? (e.keep_values && s.setValue(i, !0), s.container.style.display = '') : s.container.style.display = 'none'); })), e.refreshValue(), e.refreshHeaderText(); },
    buildChildEditor(t) {
      let e; const i = this; const s = this.types[t]; const n = i.theme.getChildEditorHolder(); i.editor_holder.appendChild(n), typeof s === 'string' ? (e = r({}, i.schema)).type = s : (e = r({}, i.schema, s), e = i.jsoneditor.expandRefs(e), s && s.required && Array.isArray(s.required) && i.schema.required && Array.isArray(i.schema.required) && (e.required = i.schema.required.concat(s.required))); const o = i.jsoneditor.getEditorClass(e); i.editors[t] = i.jsoneditor.createEditor(o, {
        jsoneditor: i.jsoneditor, schema: e, container: n, path: i.path, parent: i, required: !0,
      }), i.editors[t].preBuild(), i.editors[t].build(), i.editors[t].postBuild(), i.editors[t].header && (i.editors[t].header.style.display = 'none'), i.editors[t].option = i.switcher_options[t], n.addEventListener('change_header_text', (() => { i.refreshHeaderText(); })), t !== i.type && (n.style.display = 'none');
    },
    preBuild() { if (this.types = [], this.type = 0, this.editors = [], this.validators = [], this.keep_values = !0, void 0 !== this.jsoneditor.options.keep_oneof_values && (this.keep_values = this.jsoneditor.options.keep_oneof_values), void 0 !== this.options.keep_oneof_values && (this.keep_values = this.options.keep_oneof_values), this.schema.oneOf) this.oneOf = !0, this.types = this.schema.oneOf, delete this.schema.oneOf; else if (this.schema.anyOf) this.anyOf = !0, this.types = this.schema.anyOf, delete this.schema.anyOf; else { if (this.schema.type && this.schema.type !== 'any')Array.isArray(this.schema.type) ? this.types = this.schema.type : this.types = [this.schema.type]; else if (this.types = ['string', 'number', 'integer', 'boolean', 'object', 'array', 'null'], this.schema.disallow) { let t = this.schema.disallow; typeof t === 'object' && Array.isArray(t) || (t = [t]); const e = []; o(this.types, ((i, s) => { t.indexOf(s) === -1 && e.push(s); })), this.types = e; } delete this.schema.type; } this.display_text = this.getDisplayText(this.types); },
    build() { const t = this; const e = this.container; this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired()), this.container.appendChild(this.header), this.switcher = this.theme.getSwitcher(this.display_text), e.appendChild(this.switcher), this.switcher.addEventListener('change', (function (e) { e.preventDefault(), e.stopPropagation(), t.switchEditor(t.display_text.indexOf(this.value)), t.onChange(!0); })), this.editor_holder = document.createElement('div'), e.appendChild(this.editor_holder); const i = {}; t.jsoneditor.options.custom_validators && (i.custom_validators = t.jsoneditor.options.custom_validators), this.switcher_options = this.theme.getSwitcherOptions(this.switcher), o(this.types, ((e, s) => { let n; t.editors[e] = !1, typeof s === 'string' ? (n = r({}, t.schema)).type = s : (n = r({}, t.schema, s), s.required && Array.isArray(s.required) && t.schema.required && Array.isArray(t.schema.required) && (n.required = t.schema.required.concat(s.required))), t.validators[e] = new u(t.jsoneditor, n, i, t.defaults); })), this.switchEditor(0); },
    onChildEditorChange(t) { this.editors[this.type] && (this.refreshValue(), this.refreshHeaderText()), this._super(); },
    refreshHeaderText() { const t = this.getDisplayText(this.types); o(this.switcher_options, ((e, i) => { i.textContent = t[e]; })); },
    refreshValue() { this.value = this.editors[this.type].getValue(); },
    setValue(t, e) { const i = this; const s = this.type; let n = { match: 0, extra: 0, i: this.type }; const r = { match: 0, i: null }; o(this.validators, ((e, s) => { let o = null; void 0 !== i.anyOf && i.anyOf && (o = s.fitTest(t), (n.match < o.match || n.match === o.match && n.extra > o.extra) && ((n = o).i = e)), s.validate(t).length || r.i !== null || (r.i = e, o !== null && (r.match = o.match)); })); let a = r.i; void 0 !== i.anyOf && i.anyOf && r.match < n.match && (a = n.i), a === null && (a = this.type), this.type = a, this.switcher.value = this.display_text[a]; const l = this.type !== s; l && this.switchEditor(this.type), this.editors[this.type].setValue(t, e), this.refreshValue(), i.onChange(l); },
    destroy() { o(this.editors, ((t, e) => { e && e.destroy(); })), this.editor_holder && this.editor_holder.parentNode && this.editor_holder.parentNode.removeChild(this.editor_holder), this.switcher && this.switcher.parentNode && this.switcher.parentNode.removeChild(this.switcher), this._super(); },
    showValidationErrors(t) { const e = this; if (this.oneOf || this.anyOf) { const i = this.oneOf ? 'oneOf' : 'anyOf'; o(this.editors, ((s, n) => { if (n) { const a = `${e.path}.${i}[${s}]`; const l = []; o(t, ((t, i) => { if (i.path === a.substr(0, i.path.length)) { const s = r({}, i); s.path = e.path + s.path.substr(a.length), l.push(s); } })), n.showValidationErrors(l); } })); } else o(this.editors, ((e, i) => { i && i.showValidationErrors(t); })); },
  }); const K = O.extend({ getValue() { if (this.dependenciesFulfilled) return null; }, setValue() { this.onChange(); }, getNumColumns() { return 2; } }); const tt = O.extend({
    getDefault() { return r({}, this.schema.default || {}); },
    getChildEditors() { return this.editors; },
    register() { if (this._super(), this.editors) for (const t in this.editors) this.editors.hasOwnProperty(t) && this.editors[t].register(); },
    unregister() { if (this._super(), this.editors) for (const t in this.editors) this.editors.hasOwnProperty(t) && this.editors[t].unregister(); },
    getNumColumns() { return Math.max(Math.min(12, this.maxwidth), 3); },
    enable() { if (!this.always_disabled && (this.editjson_control && (this.editjson_control.disabled = !1), this.addproperty_button && (this.addproperty_button.disabled = !1), this._super(), this.editors)) for (const t in this.editors) this.editors.hasOwnProperty(t) && (this.editors[t].isActive() && this.editors[t].enable(), this.editors[t].optInCheckbox.disabled = !1); },
    disable(t) { if (t && (this.always_disabled = !0), this.editjson_control && (this.editjson_control.disabled = !0), this.addproperty_button && (this.addproperty_button.disabled = !0), this.hideEditJSON(), this._super(), this.editors) for (const e in this.editors) this.editors.hasOwnProperty(e) && (this.editors[e].isActive() && this.editors[e].disable(t), this.editors[e].optInCheckbox.disabled = !0); },
    layoutEditors() {
      let t; let e; const i = this; if (this.row_container) {
        let s; this.property_order = Object.keys(this.editors), this.property_order = this.property_order.sort(((t, e) => { let s = i.editors[t].schema.propertyOrder; let n = i.editors[e].schema.propertyOrder; return typeof s !== 'number' && (s = 1e3), typeof n !== 'number' && (n = 1e3), s - n; })); let n; const r = this.format === 'categories'; const l = []; let h = null; let d = null; if (this.format === 'grid-strict') {
          let c = 0; if (n = [], o(this.property_order, ((t, e) => {
            const s = i.editors[e]; if (!s.property_removed) {
              const r = s.options.hidden ? 0 : s.options.grid_columns || s.getNumColumns(); const o = s.options.hidden ? 0 : s.options.grid_offset || 0; const a = !s.options.hidden && (s.options.grid_break || !1); const h = {
                key: e, width: r, offset: o, height: s.options.hidden ? 0 : s.container.offsetHeight,
              }; n.push(h), l[c] = n, a && (c++, n = []);
            }
          })), this.layout === JSON.stringify(l)) return !1; for (this.layout = JSON.stringify(l), s = document.createElement('div'), t = 0; t < l.length; t++) for (n = this.theme.getGridRow(), s.appendChild(n), e = 0; e < l[t].length; e++)h = l[t][e].key, (d = this.editors[h]).options.hidden ? d.container.style.display = 'none' : this.theme.setGridColumnSize(d.container, l[t][e].width, l[t][e].offset), n.appendChild(d.container);
        } else if (this.format === 'grid') {
          for (o(this.property_order, ((t, e) => {
            const s = i.editors[e]; if (!s.property_removed) {
              for (var n = !1, r = s.options.hidden ? 0 : s.options.grid_columns || s.getNumColumns(), o = s.options.hidden ? 0 : s.container.offsetHeight, a = 0; a < l.length; a++)l[a].width + r <= 12 && (!o || 0.5 * l[a].minh < o && 2 * l[a].maxh > o) && (n = a); !1 === n && (l.push({
                width: 0, minh: 999999, maxh: 0, editors: [],
              }), n = l.length - 1), l[n].editors.push({ key: e, width: r, height: o }), l[n].width += r, l[n].minh = Math.min(l[n].minh, o), l[n].maxh = Math.max(l[n].maxh, o);
            }
          })), t = 0; t < l.length; t++) if (l[t].width < 12) { let u = !1; let p = 0; for (e = 0; e < l[t].editors.length; e++)(!1 === u || l[t].editors[e].width > l[t].editors[u].width) && (u = e), l[t].editors[e].width *= 12 / l[t].width, l[t].editors[e].width = Math.floor(l[t].editors[e].width), p += l[t].editors[e].width; p < 12 && (l[t].editors[u].width += 12 - p), l[t].width = 12; } if (this.layout === JSON.stringify(l)) return !1; for (this.layout = JSON.stringify(l), s = document.createElement('div'), t = 0; t < l.length; t++) for (n = this.theme.getGridRow(), s.appendChild(n), e = 0; e < l[t].editors.length; e++)h = l[t].editors[e].key, (d = this.editors[h]).options.hidden ? d.container.style.display = 'none' : this.theme.setGridColumnSize(d.container, l[t].editors[e].width), n.appendChild(d.container);
        } else { if (s = document.createElement('div'), r) { const m = document.createElement('div'); const f = this.theme.getTopTabHolder(this.schema.title); const b = this.theme.getTopTabContentHolder(f); for (o(this.property_order, ((t, e) => { const s = i.editors[e]; if (!s.property_removed) { const n = i.theme.getTabContent(); const r = s.schema && (s.schema.type === 'object' || s.schema.type === 'array'); n.isObjOrArray = r; const o = i.theme.getGridRow(); s.tab || (void 0 === i.basicPane ? i.addRow(s, f, n) : i.addRow(s, f, i.basicPane)), n.id = i.getValidId(s.tab_text.textContent), r ? (n.appendChild(o), b.appendChild(n), i.theme.addTopTab(f, s.tab)) : (m.appendChild(o), b.childElementCount > 0 ? b.firstChild.isObjOrArray && (n.appendChild(m), b.insertBefore(n, b.firstChild), i.theme.insertBasicTopTab(s.tab, f), s.basicPane = n) : (n.appendChild(m), b.appendChild(n), i.theme.addTopTab(f, s.tab), s.basicPane = n)), s.options.hidden ? s.container.style.display = 'none' : i.theme.setGridColumnSize(s.container, 12), o.appendChild(s.container), s.rowPane = n; } })); this.tabPanesContainer.firstChild;) this.tabPanesContainer.removeChild(this.tabPanesContainer.firstChild); const g = this.tabs_holder.parentNode; g.removeChild(g.firstChild), g.appendChild(f), this.tabPanesContainer = b, this.tabs_holder = f; const _ = this.theme.getFirstTab(this.tabs_holder); return void (_ && a(_, 'click')); }o(this.property_order, ((t, e) => { const r = i.editors[e]; r.property_removed || (n = i.theme.getGridRow(), s.appendChild(n), r.options.hidden ? r.container.style.display = 'none' : i.theme.setGridColumnSize(r.container, 12), n.appendChild(r.container)); })); } for (;this.row_container.firstChild;) this.row_container.removeChild(this.row_container.firstChild); this.row_container.appendChild(s);
      }
    },
    getPropertySchema(t) { let e = this.schema.properties[t] || {}; e = r({}, e); let i = !!this.schema.properties[t]; if (this.schema.patternProperties) for (const s in this.schema.patternProperties) { if (this.schema.patternProperties.hasOwnProperty(s)) new RegExp(s).test(t) && (e.allOf = e.allOf || [], e.allOf.push(this.schema.patternProperties[s]), i = !0); } return !i && this.schema.additionalProperties && typeof this.schema.additionalProperties === 'object' && (e = r({}, this.schema.additionalProperties)), e; },
    preBuild() {
      this._super(), this.editors = {}, this.cached_editors = {}; const t = this; if (this.format = this.options.layout || this.options.object_layout || this.schema.format || this.jsoneditor.options.object_layout || 'normal', this.schema.properties = this.schema.properties || {}, this.minwidth = 0, this.maxwidth = 0, this.options.table_row) {
        o(this.schema.properties, ((e, i) => {
          const s = t.jsoneditor.getEditorClass(i); t.editors[e] = t.jsoneditor.createEditor(s, {
            jsoneditor: t.jsoneditor, schema: i, path: `${t.path}.${e}`, parent: t, compact: !0, required: !0,
          }), t.editors[e].preBuild(); const n = t.editors[e].options.hidden ? 0 : t.editors[e].options.grid_columns || t.editors[e].getNumColumns(); t.minwidth += n, t.maxwidth += n;
        })), this.no_link_holder = !0;
      } else { if (this.options.table) throw new Error('Not supported yet'); this.schema.defaultProperties || (this.jsoneditor.options.display_required_only || this.options.display_required_only ? (this.schema.defaultProperties = [], o(this.schema.properties, ((e, i) => { t.isRequiredObject({ key: e, schema: i }) && t.schema.defaultProperties.push(e); }))) : t.schema.defaultProperties = Object.keys(t.schema.properties)), t.maxwidth += 1, o(this.schema.defaultProperties, ((e, i) => { t.addObjectProperty(i, !0), t.editors[i] && (t.minwidth = Math.max(t.minwidth, t.editors[i].options.grid_columns || t.editors[i].getNumColumns()), t.maxwidth += t.editors[i].options.grid_columns || t.editors[i].getNumColumns()); })); } this.property_order = Object.keys(this.editors), this.property_order = this.property_order.sort(((e, i) => { let s = t.editors[e].schema.propertyOrder; let n = t.editors[i].schema.propertyOrder; return typeof s !== 'number' && (s = 1e3), typeof n !== 'number' && (n = 1e3), s - n; }));
    },
    addTab(t) { const e = this; const i = e.rows[t].schema && (e.rows[t].schema.type === 'object' || e.rows[t].schema.type === 'array'); e.tabs_holder && (e.rows[t].tab_text = document.createElement('span'), e.rows[t].tab_text.textContent = i ? e.rows[t].getHeaderText() : void 0 === e.schema.basicCategoryTitle ? 'Basic' : e.schema.basicCategoryTitle, e.rows[t].tab = e.theme.getTopTab(e.rows[t].tab_text, this.getValidId(e.rows[t].tab_text.textContent)), e.rows[t].tab.addEventListener('click', ((i) => { e.active_tab = e.rows[t].tab, e.refreshTabs(), i.preventDefault(), i.stopPropagation(); }))); },
    addRow(t, e, i) { const s = this.rows.length; const n = t.schema.type === 'object' || t.schema.type === 'array'; this.rows[s] = t, this.rows[s].rowPane = i, n ? (this.addTab(s), this.theme.addTopTab(e, this.rows[s].tab)) : void 0 === this.basicTab ? (this.addTab(s), this.basicTab = s, this.basicPane = i, this.theme.addTopTab(e, this.rows[s].tab)) : (this.rows[s].tab = this.rows[this.basicTab].tab, this.rows[s].tab_text = this.rows[this.basicTab].tab_text, this.rows[s].rowPane = this.rows[this.basicTab].rowPane); },
    refreshTabs(t) { const e = this; const i = void 0 !== e.basicTab; let s = !1; o(this.rows, ((n, r) => { r.tab && r.rowPane && r.rowPane.parentNode && (i && r.tab === e.rows[e.basicTab].tab && s || (t ? r.tab_text.textContent = r.getHeaderText() : (i && r.tab === e.rows[e.basicTab].tab && (s = !0), r.tab === e.active_tab ? e.theme.markTabActive(r) : e.theme.markTabInactive(r)))); })); },
    build() { const t = this; const e = this.format === 'categories'; if (this.rows = [], this.active_tab = null, this.options.table_row) this.editor_holder = this.container, o(this.editors, ((e, i) => { const s = t.theme.getTableCell(); t.editor_holder.appendChild(s), i.setContainer(s), i.build(), i.postBuild(), i.setOptInCheckbox(i.header), t.editors[e].options.hidden && (s.style.display = 'none'), t.editors[e].options.input_width && (s.style.width = t.editors[e].options.input_width); })); else { if (this.options.table) throw new Error('Not supported yet'); this.header = '', this.options.compact || (this.header = document.createElement('label'), this.header.textContent = this.getTitle()), this.title = this.theme.getHeader(this.header), this.controls = this.theme.getButtonHolder(), this.controls.style.margin = '0 0 0 10px', this.container.appendChild(this.title), this.title.appendChild(this.controls), this.container.style.position = 'relative', this.editjson_holder = this.theme.getModal(), this.editjson_textarea = this.theme.getTextareaInput(), this.editjson_textarea.style.height = '170px', this.editjson_textarea.style.width = '300px', this.editjson_textarea.style.display = 'block', this.editjson_save = this.getButton('Save', 'save', 'Save'), this.editjson_save.classList.add('json-editor-btntype-save'), this.editjson_save.addEventListener('click', ((e) => { e.preventDefault(), e.stopPropagation(), t.saveJSON(); })), this.editjson_copy = this.getButton('Copy', 'copy', 'Copy'), this.editjson_copy.classList.add('json-editor-btntype-copy'), this.editjson_copy.addEventListener('click', ((e) => { e.preventDefault(), e.stopPropagation(), t.copyJSON(); })), this.editjson_cancel = this.getButton('Cancel', 'cancel', 'Cancel'), this.editjson_cancel.classList.add('json-editor-btntype-cancel'), this.editjson_cancel.addEventListener('click', ((e) => { e.preventDefault(), e.stopPropagation(), t.hideEditJSON(); })), this.editjson_holder.appendChild(this.editjson_textarea), this.editjson_holder.appendChild(this.editjson_save), this.editjson_holder.appendChild(this.editjson_copy), this.editjson_holder.appendChild(this.editjson_cancel), this.addproperty_holder = this.theme.getModal(), this.addproperty_list = document.createElement('div'), this.addproperty_list.style.width = '295px', this.addproperty_list.style.maxHeight = '160px', this.addproperty_list.style.padding = '5px 0', this.addproperty_list.style.overflowY = 'auto', this.addproperty_list.style.overflowX = 'hidden', this.addproperty_list.style.paddingLeft = '5px', this.addproperty_list.setAttribute('class', 'property-selector'), this.addproperty_add = this.getButton('add', 'add', 'add'), this.addproperty_add.classList.add('json-editor-btntype-add'), this.addproperty_input = this.theme.getFormInputField('text'), this.addproperty_input.setAttribute('placeholder', 'Property name...'), this.addproperty_input.style.width = '220px', this.addproperty_input.style.marginBottom = '0', this.addproperty_input.style.display = 'inline-block', this.addproperty_add.addEventListener('click', ((e) => { if (e.preventDefault(), e.stopPropagation(), t.addproperty_input.value) { if (t.editors[t.addproperty_input.value]) return void window.alert('there is already a property with that name'); t.addObjectProperty(t.addproperty_input.value), t.editors[t.addproperty_input.value] && t.editors[t.addproperty_input.value].disable(), t.onChange(!0); } })), this.addproperty_input.addEventListener('input', ((t) => { t.target.previousSibling.childNodes.forEach(((e) => { e.innerText.indexOf(t.target.value) >= 0 ? e.style.display = '' : e.style.display = 'none'; })); })), this.addproperty_holder.appendChild(this.addproperty_list), this.addproperty_holder.appendChild(this.addproperty_input), this.addproperty_holder.appendChild(this.addproperty_add); const i = document.createElement('div'); i.style.clear = 'both', this.addproperty_holder.appendChild(i), document.addEventListener('click', this.onOutsideModalClick), this.schema.description && (this.description = this.theme.getDescription(this.schema.description), this.container.appendChild(this.description)), this.error_holder = document.createElement('div'), this.container.appendChild(this.error_holder), this.editor_holder = this.theme.getIndentedPanel(), this.container.appendChild(this.editor_holder), this.row_container = this.theme.getGridContainer(), e ? (this.tabs_holder = this.theme.getTopTabHolder(this.getValidId(this.schema.title)), this.tabPanesContainer = this.theme.getTopTabContentHolder(this.tabs_holder), this.editor_holder.appendChild(this.tabs_holder)) : (this.tabs_holder = this.theme.getTabHolder(this.getValidId(this.schema.title)), this.tabPanesContainer = this.theme.getTabContentHolder(this.tabs_holder), this.editor_holder.appendChild(this.row_container)), o(this.editors, ((i, s) => { const n = t.theme.getTabContent(); const r = t.theme.getGridColumn(); const o = !(!s.schema || s.schema.type !== 'object' && s.schema.type !== 'array'); if (n.isObjOrArray = o, e) { if (o) { const a = t.theme.getGridContainer(); a.appendChild(r), n.appendChild(a), t.tabPanesContainer.appendChild(n), t.row_container = a; } else void 0 === t.row_container_basic && (t.row_container_basic = t.theme.getGridContainer(), n.appendChild(t.row_container_basic), t.tabPanesContainer.childElementCount === 0 ? t.tabPanesContainer.appendChild(n) : t.tabPanesContainer.insertBefore(n, t.tabPanesContainer.childNodes[1])), t.row_container_basic.appendChild(r); t.addRow(s, t.tabs_holder, n), n.id = t.getValidId(s.schema.title); } else t.row_container.appendChild(r); s.setContainer(r), s.build(), s.postBuild(), s.setOptInCheckbox(s.header); })), this.rows[0] && a(this.rows[0].tab, 'click'), this.collapsed = !1, this.collapse_control = this.getButton('', 'collapse', this.translate('button_collapse')), this.collapse_control.style.margin = '0 10px 0 0', this.collapse_control.classList.add('json-editor-btntype-toggle'), this.title.insertBefore(this.collapse_control, this.title.childNodes[0]), this.collapse_control.addEventListener('click', ((e) => { e.preventDefault(), e.stopPropagation(), t.collapsed ? (t.editor_holder.style.display = '', t.collapsed = !1, t.setButtonText(t.collapse_control, '', 'collapse', t.translate('button_collapse'))) : (t.editor_holder.style.display = 'none', t.collapsed = !0, t.setButtonText(t.collapse_control, '', 'expand', t.translate('button_expand'))); })), this.options.collapsed && a(this.collapse_control, 'click'), this.schema.options && void 0 !== this.schema.options.disable_collapse ? this.schema.options.disable_collapse && (this.collapse_control.style.display = 'none') : this.jsoneditor.options.disable_collapse && (this.collapse_control.style.display = 'none'), this.editjson_control = this.getButton('JSON', 'edit', 'Edit JSON'), this.editjson_control.classList.add('json-editor-btntype-editjson'), this.editjson_control.addEventListener('click', ((e) => { e.preventDefault(), e.stopPropagation(), t.toggleEditJSON(); })), this.controls.appendChild(this.editjson_control), this.controls.insertBefore(this.editjson_holder, this.controls.childNodes[1]), this.schema.options && void 0 !== this.schema.options.disable_edit_json ? this.schema.options.disable_edit_json && (this.editjson_control.style.display = 'none') : this.jsoneditor.options.disable_edit_json && (this.editjson_control.style.display = 'none'), this.addproperty_button = this.getButton('Properties', 'edit_properties', t.translate('button_object_properties')), this.addproperty_button.classList.add('json-editor-btntype-properties'), this.addproperty_button.addEventListener('click', ((e) => { e.preventDefault(), e.stopPropagation(), t.toggleAddProperty(); })), this.controls.appendChild(this.addproperty_button), this.controls.insertBefore(this.addproperty_holder, this.controls.childNodes[1]), this.refreshAddProperties(), this.deactivateNonRequiredProperties(); } this.options.table_row ? (this.editor_holder = this.container, o(this.property_order, ((e, i) => { t.editor_holder.appendChild(t.editors[i].container); }))) : (this.layoutEditors(), this.layoutEditors()); },
    deactivateNonRequiredProperties() { const t = this; (this.jsoneditor.options.show_opt_in || this.options.show_opt_in) && o(this.editors, ((e, i) => { t.isRequiredObject(i) || t.editors[e].deactivate(); })); },
    showEditJSON() { this.editjson_holder && (this.hideAddProperty(), this.editjson_holder.style.left = `${this.editjson_control.offsetLeft}px`, this.editjson_holder.style.top = `${this.editjson_control.offsetTop + this.editjson_control.offsetHeight}px`, this.editjson_textarea.value = JSON.stringify(this.getValue(), null, 2), this.disable(), this.editjson_holder.style.display = '', this.editjson_control.disabled = !1, this.editing_json = !0); },
    hideEditJSON() { this.editjson_holder && this.editing_json && (this.editjson_holder.style.display = 'none', this.enable(), this.editing_json = !1); },
    copyJSON() { if (this.editjson_holder) { const t = document.createElement('textarea'); t.value = this.editjson_textarea.value, t.setAttribute('readonly', ''), t.style.position = 'absolute', t.style.left = '-9999px', document.body.appendChild(t), t.select(), document.execCommand('copy'), document.body.removeChild(t); } },
    saveJSON() { if (this.editjson_holder) try { const t = JSON.parse(this.editjson_textarea.value); this.setValue(t), this.hideEditJSON(), this.onChange(!0); } catch (t) { throw window.alert('invalid JSON'), t; } },
    toggleEditJSON() { this.editing_json ? this.hideEditJSON() : this.showEditJSON(); },
    insertPropertyControlUsingPropertyOrder(t, e, i) { let s; this.schema.properties[t] && (s = this.schema.properties[t].propertyOrder), typeof s !== 'number' && (s = 1e3), e.propertyOrder = s; for (let n = 0; n < i.childNodes.length; n++) { const r = i.childNodes[n]; if (e.propertyOrder < r.propertyOrder) { this.addproperty_list.insertBefore(e, r), e = null; break; } }e && this.addproperty_list.appendChild(e); },
    addPropertyCheckbox(t) { let e; let i; let s; let n; const r = this; return (e = r.theme.getCheckbox()).style.width = 'auto', s = this.schema.properties[t] && this.schema.properties[t].title ? this.schema.properties[t].title : t, i = r.theme.getCheckboxLabel(s), (n = r.theme.getFormControl(i, e)).style.paddingBottom = n.style.marginBottom = n.style.paddingTop = n.style.marginTop = 0, n.style.height = 'auto', this.insertPropertyControlUsingPropertyOrder(t, n, this.addproperty_list), e.checked = t in this.editors, e.addEventListener('change', (() => { e.checked ? r.addObjectProperty(t) : r.removeObjectProperty(t), r.onChange(!0); })), r.addproperty_checkboxes[t] = e, e; },
    showAddProperty() { this.addproperty_holder && (this.hideEditJSON(), this.addproperty_holder.style.left = `${this.addproperty_button.offsetLeft}px`, this.addproperty_holder.style.top = `${this.addproperty_button.offsetTop + this.addproperty_button.offsetHeight}px`, this.disable(), this.adding_property = !0, this.addproperty_button.disabled = !1, this.addproperty_holder.style.display = '', this.refreshAddProperties()); },
    hideAddProperty() { this.addproperty_holder && this.adding_property && (this.addproperty_holder.style.display = 'none', this.enable(), this.adding_property = !1); },
    toggleAddProperty() { this.adding_property ? this.hideAddProperty() : this.showAddProperty(); },
    removeObjectProperty(t) { this.editors[t] && (this.editors[t].unregister(), delete this.editors[t], this.refreshValue(), this.layoutEditors()); },
    addObjectProperty(t, e) {
      if (!this.editors[t]) {
        if (this.cached_editors[t]) { if (this.editors[t] = this.cached_editors[t], e) return; this.editors[t].register(); } else {
          if (!(this.canHaveAdditionalProperties() || this.schema.properties && this.schema.properties[t])) return; const i = this.getPropertySchema(t); typeof i.propertyOrder !== 'number' && (i.propertyOrder = Object.keys(this.editors).length + 1e3); const s = this.jsoneditor.getEditorClass(i); if (this.editors[t] = this.jsoneditor.createEditor(s, {
            jsoneditor: this.jsoneditor, schema: i, path: `${this.path}.${t}`, parent: this,
          }), this.editors[t].preBuild(), !e) { const n = this.theme.getChildEditorHolder(); this.editor_holder.appendChild(n), this.editors[t].setContainer(n), this.editors[t].build(), this.editors[t].postBuild(), this.editors[t].setOptInCheckbox(s.header), this.editors[t].activate(); } this.cached_editors[t] = this.editors[t];
        }e || (this.refreshValue(), this.layoutEditors());
      }
    },
    onOutsideModalClick(t) { this.addproperty_holder && !this.addproperty_holder.contains(t.target) && this.adding_property && (t.preventDefault(), t.stopPropagation(), this.toggleAddProperty()); },
    onChildEditorChange(t) { this.refreshValue(), this._super(t); },
    canHaveAdditionalProperties() { return typeof this.schema.additionalProperties === 'boolean' ? this.schema.additionalProperties : !this.jsoneditor.options.no_additional_properties; },
    destroy() { o(this.cached_editors, ((t, e) => { e.destroy(); })), this.editor_holder && (this.editor_holder.innerHTML = ''), this.title && this.title.parentNode && this.title.parentNode.removeChild(this.title), this.error_holder && this.error_holder.parentNode && this.error_holder.parentNode.removeChild(this.error_holder), this.editors = null, this.cached_editors = null, this.editor_holder && this.editor_holder.parentNode && this.editor_holder.parentNode.removeChild(this.editor_holder), this.editor_holder = null, document.removeEventListener('click', this.onOutsideModalClick), this._super(); },
    getValue() { if (this.dependenciesFulfilled) { const t = this._super(); if (this.jsoneditor.options.remove_empty_properties || this.options.remove_empty_properties) for (const e in t)t.hasOwnProperty(e) && (void 0 === t[e] || t[e] === '' || t[e] === Object(t[e]) && Object.keys(t[e]).length === 0 && t[e].constructor === Object) && delete t[e]; return t; } },
    refreshValue() { for (const t in this.value = {}, this.editors) this.editors.hasOwnProperty(t) && this.editors[t].isActive() && (this.value[t] = this.editors[t].getValue()); this.adding_property && this.refreshAddProperties(); },
    refreshAddProperties() { if (this.options.disable_properties || !1 !== this.options.disable_properties && this.jsoneditor.options.disable_properties) this.addproperty_button.style.display = 'none'; else { let t; let e; let i = 0; let s = !1; for (e in this.editors) this.editors.hasOwnProperty(e) && i++; for (e in t = this.canHaveAdditionalProperties() && !(void 0 !== this.schema.maxProperties && i >= this.schema.maxProperties), this.addproperty_checkboxes && (this.addproperty_list.innerHTML = ''), this.addproperty_checkboxes = {}, this.cached_editors) this.cached_editors.hasOwnProperty(e) && (this.addPropertyCheckbox(e), this.isRequiredObject(this.cached_editors[e]) && e in this.editors && (this.addproperty_checkboxes[e].disabled = !0), void 0 !== this.schema.minProperties && i <= this.schema.minProperties ? (this.addproperty_checkboxes[e].disabled = this.addproperty_checkboxes[e].checked, this.addproperty_checkboxes[e].checked || (s = !0)) : e in this.editors ? s = !0 : t || this.schema.properties.hasOwnProperty(e) ? (this.addproperty_checkboxes[e].disabled = !1, s = !0) : this.addproperty_checkboxes[e].disabled = !0); for (e in this.canHaveAdditionalProperties() && (s = !0), this.schema.properties) this.schema.properties.hasOwnProperty(e) && (this.cached_editors[e] || (s = !0, this.addPropertyCheckbox(e))); s ? this.canHaveAdditionalProperties() ? this.addproperty_add.disabled = !t : (this.addproperty_add.style.display = 'none', this.addproperty_input.style.display = 'none') : (this.hideAddProperty(), this.addproperty_button.style.display = 'none'); } },
    isRequiredObject(t) { if (t) return typeof t.schema.required === 'boolean' ? t.schema.required : Array.isArray(this.schema.required) ? this.schema.required.indexOf(t.key) > -1 : !!this.jsoneditor.options.required_by_default; },
    setValue(t, e) { const i = this; (typeof (t = t || {}) !== 'object' || Array.isArray(t)) && (t = {}), o(this.cached_editors, ((s, n) => { void 0 !== t[s] ? (i.addObjectProperty(s), n.setValue(t[s], e)) : e || i.isRequiredObject(n) ? n.setValue(n.getDefault(), e) : i.removeObjectProperty(s); })), o(t, ((t, s) => { i.cached_editors[t] || (i.addObjectProperty(t), i.editors[t] && i.editors[t].setValue(s, e)); })), this.refreshValue(), this.layoutEditors(), this.onChange(); },
    showValidationErrors(t) { const e = this; const i = []; const s = []; o(t, ((t, n) => { n.path === e.path ? i.push(n) : s.push(n); })), this.error_holder && (i.length ? (this.error_holder.innerHTML = '', this.error_holder.style.display = '', o(i, ((t, i) => { i.errorcount && i.errorcount > 1 && (i.message += ` (${i.errorcount} errors)`), e.error_holder.appendChild(e.theme.getErrorMessage(i.message)); }))) : this.error_holder.style.display = 'none'), this.options.table_row && (i.length ? this.theme.addTableRowError(this.container) : this.theme.removeTableRowError(this.container)), o(this.editors, ((t, e) => { e.showValidationErrors(s); })); },
  }); const et = M.extend({
    preBuild() { this.schema.required = !0, this._super(); }, build() { const t = this; this.label = '', this.options.compact || (this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired())), this.schema.description && (this.description = this.theme.getFormInputDescription(this.schema.description)), this.options.infoText && (this.infoButton = this.theme.getInfoButton(this.options.infoText)), this.options.compact && this.container.classList.add('compact'), this.radioContainer = document.createElement('div'), this.radioGroup = []; for (let e = function (e) { t.setValue(this.value), t.onChange(!0); }, i = 0; i < this.enum_values.length; i++) { this.input = this.theme.getFormRadio({ name: this.formname, id: `${this.formname}[${i}]`, value: this.enum_values[i] }), this.setInputAttributes(['id', 'value', 'name']), this.input.addEventListener('change', e, !1), this.radioGroup.push(this.input); const s = this.theme.getFormRadioLabel(this.enum_display[i]); s.htmlFor = this.input.id; const n = this.theme.getFormRadioControl(s, this.input, !(this.options.layout !== 'horizontal' && !this.options.compact)); this.radioContainer.appendChild(n); } if (this.schema.readOnly || this.schema.readonly) { this.always_disabled = !0; for (let r = 0; r < this.radioGroup.length; r++) this.radioGroup[r].disabled = !0; this.radioContainer.classList.add('readonly'); } const o = this.theme.getContainer(); o.appendChild(this.radioContainer), o.dataset.containerFor = 'radio', this.input = o, this.control = this.theme.getFormControl(this.label, o, this.description, this.infoButton), this.container.appendChild(this.control), window.requestAnimationFrame((() => { t.input.parentNode && t.afterInputReady(); })); }, enable() { if (!this.always_disabled) { for (let t = 0; t < this.radioGroup.length; t++) this.radioGroup[t].disabled = !1; this.radioContainer.classList.remove('readonly'), this._super(); } }, disable(t) { t && (this.always_disabled = !0); for (let e = 0; e < this.radioGroup.length; e++) this.radioGroup[e].disabled = !0; this.radioContainer.classList.add('readonly'), this._super(); }, destroy() { this.radioContainer.parentNode && this.radioContainer.parentNode.parentNode && this.radioContainer.parentNode.parentNode.removeChild(this.radioContainer.parentNode), this.label && this.label.parentNode && this.label.parentNode.removeChild(this.label), this.description && this.description.parentNode && this.description.parentNode.removeChild(this.description), this._super(); }, getNumColumns() { return 2; }, setValue(t) { for (let e = 0; e < this.radioGroup.length; e++) if (this.radioGroup[e].value === t) { this.radioGroup[e].checked = !0, this.value = t, this.onChange(); break; } },
  }); const it = A.extend({
    setValue(t, e, i) { const s = this._super(t, e, i); void 0 !== s && s.changed && this.sceditor_instance && this.sceditor_instance.val(s.value); },
    build() { this.options.format = 'textarea', this._super(), this.input_type = this.schema.format, this.input.setAttribute('data-schemaformat', this.input_type); },
    afterInputReady() {
      if (window.sceditor) {
        const t = this.expandCallbacks('sceditor', r({}, {
          format: this.input_type, emoticonsEnabled: !1, width: '100%', height: 300, readOnly: this.schema.readOnly || this.schema.readonly || this.schema.template,
        }, this.defaults.options.sceditor || {}, this.options.sceditor || {}, { element: this.input })); const e = window.sceditor.instance(this.input); void 0 === e && window.sceditor.create(this.input, t), this.sceditor_instance = e || window.sceditor.instance(this.input), this.sceditor_instance.blur(() => { this.value = this.sceditor_instance.val(), this.sceditor_instance.updateOriginal(), this.is_dirty = !0, this.onChange(!0); }), this.theme.afterInputReady(this.input);
      } else this._super();
    },
    getNumColumns() { return 6; },
    enable() { !this.always_disabled && this.sceditor_instance && this.sceditor_instance.readOnly(!1), this._super(); },
    disable(t) { this.sceditor_instance && this.sceditor_instance.readOnly(!0), this._super(t); },
    destroy() { this.sceditor_instance && (this.sceditor_instance.destroy(), this.sceditor_instance = null), this._super(); },
  }); const st = M.extend({
    setValue(t, e) { if (this.select2_instance) { e ? this.is_dirty = !1 : this.jsoneditor.options.show_errors === 'change' && (this.is_dirty = !0); const i = this.updateValue(t); this.input.value = i, this.select2v4 ? this.select2_instance.val(i).trigger('change') : this.select2_instance.select2('val', i), this.onChange(!0); } else this._super(t, e); }, afterInputReady() { if (window.jQuery && window.jQuery.fn && window.jQuery.fn.select2 && !this.select2_instance) { const t = this; const e = this.expandCallbacks('select2', r({}, this.defaults.options.select2 || {}, this.options.select2 || {})); this.newEnumAllowed = e.tags = !!e.tags && this.schema.type === 'string', this.select2_instance = window.jQuery(this.input).select2(e), this.select2v4 = this.select2_instance.select2.hasOwnProperty('amd'), this.selectChangeHandler = function () { const e = t.select2v4 ? t.select2_instance.val() : t.select2_instance.select2('val'); t.updateValue(e), t.onChange(!0); }, this.select2_instance.on('change', this.selectChangeHandler), this.select2_instance.on('select2-blur', this.selectChangeHandler); } this._super(); }, updateValue(t) { let e = this.enum_values[0]; return t = this.typecast(t || ''), this.enum_values.indexOf(t) === -1 ? this.newEnumAllowed && (e = this.addNewOption(t) ? t : e) : e = t, this.value = e, e; }, addNewOption(t) { let e; const i = this.typecast(t); let s = !1; return this.enum_values.indexOf(i) < 0 && i !== '' && (this.enum_options.push(`${i}`), this.enum_display.push(`${i}`), this.enum_values.push(i), this.schema.enum.push(i), (e = this.input.querySelector(`option[value="${i}"]`)) ? e.removeAttribute('data-select2-tag') : this.input.appendChild(new Option(i, i, !1, !1)).trigger('change'), s = !0), s; }, enable() { this.always_disabled || this.select2_instance && (this.select2v4 ? this.select2_instance.prop('disabled', !1) : this.select2_instance.select2('enable', !0)), this._super(); }, disable(t) { this.select2_instance && (this.select2v4 ? this.select2_instance.prop('disabled', !0) : this.select2_instance.select2('enable', !1)), this._super(t); }, destroy() { this.select2_instance && (this.select2_instance.select2('destroy'), this.select2_instance = null), this._super(); },
  }); const nt = M.extend({
    setValue(t, e) { if (this.selectize_instance) { e ? this.is_dirty = !1 : this.jsoneditor.options.show_errors === 'change' && (this.is_dirty = !0); const i = this.updateValue(t); this.input.value = i, this.selectize_instance.clear(!0), this.selectize_instance.setValue(i), this.onChange(!0); } else this._super(t, e); }, afterInputReady() { if (window.jQuery && window.jQuery.fn && window.jQuery.fn.selectize && !this.selectize_instance) { const t = this; const e = this.expandCallbacks('selectize', r({}, this.defaults.options.selectize || {}, this.options.selectize || {})); this.newEnumAllowed = e.create = !!e.create && this.schema.type === 'string', this.selectize_instance = window.jQuery(this.input).selectize(e)[0].selectize, this.control.removeEventListener('change', this.multiselectChangeHandler), this.multiselectChangeHandler = function (e) { t.updateValue(e), t.onChange(!0); }, this.selectize_instance.on('change', this.multiselectChangeHandler); } this._super(); }, updateValue(t) { let e = this.enum_values[0]; return t = this.typecast(t || ''), this.enum_values.indexOf(t) === -1 ? this.newEnumAllowed && (e = this.addNewOption(t) ? t : e) : e = t, this.value = e, e; }, addNewOption(t) { const e = this.typecast(t); let i = !1; return this.enum_values.indexOf(e) < 0 && e !== '' && (this.enum_options.push(`${e}`), this.enum_display.push(`${e}`), this.enum_values.push(e), this.schema.enum.push(e), this.selectize_instance.addItem(e), this.selectize_instance.refreshOptions(!1), i = !0), i; }, onWatchedFieldChange() { if (this._super(), this.selectize_instance) { const t = this; this.selectize_instance.clear(!0), this.selectize_instance.clearOptions(!0), this.enum_options.forEach(((e, i) => { t.selectize_instance.addOption({ value: e, text: t.enum_display[i] }); })), this.selectize_instance.addItem(`${this.value}`, !0); } }, enable() { !this.always_disabled && this.selectize_instance && this.selectize_instance.unlock(), this._super(); }, disable(t) { this.selectize_instance && this.selectize_instance.lock(), this._super(t); }, destroy() { this.selectize_instance && (this.selectize_instance.destroy(), this.selectize_instance = null), this._super(); },
  }); const rt = A.extend({ build() { const t = this; this.options.compact || (this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired())), this.schema.description && (this.description = this.theme.getFormInputDescription(this.schema.description)); const e = this.formname.replace(/\W/g, ''); if (typeof SignaturePad === 'function') { this.input = this.theme.getFormInputField('hidden'), this.container.appendChild(this.input); const i = document.createElement('div'); i.classList.add('signature-container'); const s = document.createElement('canvas'); s.setAttribute('name', e), s.classList.add('signature'), i.appendChild(s), t.signaturePad = new window.SignaturePad(s, { onEnd() { t.signaturePad.isEmpty() ? t.input.value = '' : t.input.value = t.signaturePad.toDataURL(), t.is_dirty = !0, t.refreshValue(), t.watch_listener(), t.jsoneditor.notifyWatchers(t.path), t.parent ? t.parent.onChildEditorChange(t) : t.jsoneditor.onChange(); } }); const n = document.createElement('div'); const r = document.createElement('button'); r.classList.add('tiny', 'button'), r.innerHTML = 'Clear signature', n.appendChild(r), i.appendChild(n), this.options.compact && this.container.setAttribute('class', `${this.container.getAttribute('class')} compact`), (this.schema.readOnly || this.schema.readonly) && (this.always_disabled = !0, o(this.inputs, ((t, e) => { s.setAttribute('readOnly', 'readOnly'), e.disabled = !0; }))), r.addEventListener('click', ((e) => { e.preventDefault(), e.stopPropagation(), t.signaturePad.clear(), t.signaturePad.strokeEnd(); })), this.control = this.theme.getFormControl(this.label, i, this.description), this.container.appendChild(this.control), this.refreshValue(), s.width = i.offsetWidth, t.options && t.options.canvas_height ? s.height = t.options.canvas_height : s.height = '300'; } else { const a = document.createElement('p'); a.innerHTML = 'Signature pad is not available, please include SignaturePad from https://github.com/szimek/signature_pad', this.container.appendChild(a); } }, setValue(t) { if (typeof SignaturePad === 'function') { const e = this.sanitize(t); if (this.value === e) return; return this.value = e, this.input.value = this.value, this.signaturePad.clear(), t && t !== '' && this.signaturePad.fromDataURL(t), this.watch_listener(), this.jsoneditor.notifyWatchers(this.path), !1; } }, destroy() { this.signaturePad.off(), delete this.signaturePad; } }); const ot = A.extend({
    setValue(t, e, i) { const s = this._super(t, e, i); void 0 !== s && s.changed && this.simplemde_instance && this.simplemde_instance.value(s.value); }, build() { this.options.format = 'textarea', this._super(), this.input_type = this.schema.format, this.input.setAttribute('data-schemaformat', this.input_type); }, afterInputReady() { let t; const e = this; window.SimpleMDE ? (t = this.expandCallbacks('simplemde', r({}, { height: 300 }, this.defaults.options.simplemde || {}, this.options.simplemde || {}, { element: this.input })), this.simplemde_instance = new window.SimpleMDE(t), (this.schema.readOnly || this.schema.readonly || this.schema.template) && (this.simplemde_instance.codemirror.options.readOnly = !0), this.simplemde_instance.codemirror.on('change', (() => { e.value = e.simplemde_instance.value(), e.is_dirty = !0, e.onChange(!0); })), t.autorefresh && this.startListening(this.simplemde_instance.codemirror, this.simplemde_instance.codemirror.state.autoRefresh = { delay: 250 }), this.theme.afterInputReady(e.input)) : this._super(); }, getNumColumns() { return 6; }, enable() { !this.always_disabled && this.simplemde_instance && (this.simplemde_instance.codemirror.options.readOnly = !1), this._super(); }, disable(t) { this.simplemde_instance && (this.simplemde_instance.codemirror.options.readOnly = !0), this._super(t); }, destroy() { this.simplemde_instance && (this.simplemde_instance.toTextArea(), this.simplemde_instance = null), this._super(); }, startListening(t, e) { const i = this; function s() { t.display.wrapper.offsetHeight ? (i.stopListening(t, e), t.display.lastWrapHeight !== t.display.wrapper.clientHeight && t.refresh()) : e.timeout = window.setTimeout(s, e.delay); }e.timeout = window.setTimeout(s, e.delay), e.hurry = function () { window.clearTimeout(e.timeout), e.timeout = window.setTimeout(s, 50); }, t.on(window, 'mouseup', e.hurry), t.on(window, 'keyup', e.hurry); }, stopListening(t, e) { window.clearTimeout(e.timeout), t.off(window, 'mouseup', e.hurry), t.off(window, 'keyup', e.hurry); },
  }); const at = A.extend({
    build() { const t = this; if (this.options.compact || (this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired())), this.schema.description && (this.description = this.theme.getFormInputDescription(this.schema.description)), this.options.infoText && (this.infoButton = this.theme.getInfoButton(this.options.infoText)), this.options.compact && this.container.classList.add('compact'), this.ratingContainer = document.createElement('div'), this.ratingContainer.classList.add('starrating'), void 0 === this.schema.enum) { let e = this.schema.maximum ? this.schema.maximum : 5; this.schema.exclusiveMaximum && e--, this.enum_values = []; for (let i = 0; i < e; i++) this.enum_values.push(i + 1); } else this.enum_values = this.schema.enum; this.radioGroup = []; for (let s = function (e) { e.preventDefault(), e.stopPropagation(), t.setValue(this.value), t.onChange(!0); }, n = this.enum_values.length - 1; n > -1; n--) { const r = this.formname + (n + 1); const o = this.theme.getFormInputField('radio'); o.name = `${this.formname}[starrating]`, o.value = this.enum_values[n], o.id = r, o.addEventListener('change', s, !1), this.radioGroup.push(o); const a = document.createElement('label'); a.htmlFor = r, a.title = this.enum_values[n], this.options.displayValue && a.classList.add('starrating-display-enabled'), this.ratingContainer.appendChild(o), this.ratingContainer.appendChild(a); } if (this.options.displayValue && (this.displayRating = document.createElement('div'), this.displayRating.classList.add('starrating-display'), this.displayRating.innerText = this.enum_values[0], this.ratingContainer.appendChild(this.displayRating)), this.schema.readOnly || this.schema.readonly) { this.always_disabled = !0; for (let l = 0; l < this.radioGroup.length; l++) this.radioGroup[l].disabled = !0; this.ratingContainer.classList.add('readonly'); } const h = this.theme.getContainer(); h.appendChild(this.ratingContainer), this.input = h, this.control = this.theme.getFormControl(this.label, h, this.description, this.infoButton), this.container.appendChild(this.control), this.refreshValue(); }, enable() { if (!this.always_disabled) { for (let t = 0; t < this.radioGroup.length; t++) this.radioGroup[t].disabled = !1; this.ratingContainer.classList.remove('readonly'), this._super(); } }, disable(t) { t && (this.always_disabled = !0); for (let e = 0; e < this.radioGroup.length; e++) this.radioGroup[e].disabled = !0; this.ratingContainer.classList.add('readonly'), this._super(); }, destroy() { this.ratingContainer.parentNode && this.ratingContainer.parentNode.parentNode && this.ratingContainer.parentNode.parentNode.removeChild(this.ratingContainer.parentNode), this.label && this.label.parentNode && this.label.parentNode.removeChild(this.label), this.description && this.description.parentNode && this.description.parentNode.removeChild(this.description), this._super(); }, getNumColumns() { return 2; }, getValue() { if (this.dependenciesFulfilled) return this.schema.type === 'integer' ? this.value === '' ? void 0 : 1 * this.value : this.value; }, setValue(t) { for (let e = 0; e < this.radioGroup.length; e++) if (this.radioGroup[e].value == t) { this.radioGroup[e].checked = !0, this.value = t, this.options.displayValue && (this.displayRating.innerHTML = this.value), this.onChange(!0); break; } },
  }); const lt = S.extend({
    register() { if (this._super(), this.rows) for (let t = 0; t < this.rows.length; t++) this.rows[t].register(); },
    unregister() { if (this._super(), this.rows) for (let t = 0; t < this.rows.length; t++) this.rows[t].unregister(); },
    getNumColumns() { return Math.max(Math.min(12, this.width), 3); },
    preBuild() { const t = this.jsoneditor.expandRefs(this.schema.items || {}); this.item_title = t.title || 'row', this.item_default = t.default || null, this.item_has_child_editors = t.properties || t.items, this.width = 12, this._super(); },
    build() { this.table = this.theme.getTable(), this.container.appendChild(this.table), this.thead = this.theme.getTableHead(), this.table.appendChild(this.thead), this.header_row = this.theme.getTableRow(), this.thead.appendChild(this.header_row), this.row_holder = this.theme.getTableBody(), this.table.appendChild(this.row_holder); const t = this.getElementEditor(0, !0); if (this.item_default = t.getDefault(), this.width = t.getNumColumns() + 2, this.options.compact ? (this.panel = document.createElement('div'), this.container.appendChild(this.panel)) : (this.header = document.createElement('label'), this.header.textContent = this.getTitle(), this.title = this.theme.getHeader(this.header), this.container.appendChild(this.title), this.title_controls = this.theme.getHeaderButtonHolder(), this.title.appendChild(this.title_controls), this.schema.description && (this.description = this.theme.getDescription(this.schema.description), this.container.appendChild(this.description)), this.panel = this.theme.getIndentedPanel(), this.container.appendChild(this.panel), this.error_holder = document.createElement('div'), this.panel.appendChild(this.error_holder)), this.panel.appendChild(this.table), this.controls = this.theme.getButtonHolder(), this.panel.appendChild(this.controls), this.item_has_child_editors) for (let e = t.getChildEditors(), i = t.property_order || Object.keys(e), s = 0; s < i.length; s++) { const n = this.theme.getTableHeaderCell(e[i[s]].getTitle()); e[i[s]].options.hidden && (n.style.display = 'none'), this.header_row.appendChild(n); } else this.header_row.appendChild(this.theme.getTableHeaderCell(this.item_title)); t.destroy(), this.row_holder.innerHTML = '', this.controls_header_cell = this.theme.getTableHeaderCell(' '), this.header_row.appendChild(this.controls_header_cell), this.addControls(); },
    onChildEditorChange(t) { this.refreshValue(), this._super(); },
    getItemDefault() { return r({}, { default: this.item_default }).default; },
    getItemTitle() { return this.item_title; },
    getElementEditor(t, e) {
      const i = r({}, this.schema.items); const s = this.jsoneditor.getEditorClass(i, this.jsoneditor); const n = this.row_holder.appendChild(this.theme.getTableRow()); let o = n; this.item_has_child_editors || (o = this.theme.getTableCell(), n.appendChild(o)); const a = this.jsoneditor.createEditor(s, {
        jsoneditor: this.jsoneditor, schema: i, container: o, path: `${this.path}.${t}`, parent: this, compact: !0, table_row: !0,
      }); return a.preBuild(), e || (a.build(), a.postBuild(), a.controls_cell = n.appendChild(this.theme.getTableCell()), a.row = n, a.table_controls = this.theme.getButtonHolder(), a.controls_cell.appendChild(a.table_controls), a.table_controls.style.margin = 0, a.table_controls.style.padding = 0), a;
    },
    destroy() { this.innerHTML = '', this.title && this.title.parentNode && this.title.parentNode.removeChild(this.title), this.description && this.description.parentNode && this.description.parentNode.removeChild(this.description), this.row_holder && this.row_holder.parentNode && this.row_holder.parentNode.removeChild(this.row_holder), this.table && this.table.parentNode && this.table.parentNode.removeChild(this.table), this.panel && this.panel.parentNode && this.panel.parentNode.removeChild(this.panel), this.rows = this.title = this.description = this.row_holder = this.table = this.panel = null, this._super(); },
    setValue(t, e) { if (t = t || [], this.schema.minItems) for (;t.length < this.schema.minItems;)t.push(this.getItemDefault()); if (this.schema.maxItems && t.length > this.schema.maxItems && (t = t.slice(0, this.schema.maxItems)), JSON.stringify(t) !== this.serialized) { let i = !1; const s = this; o(t, ((t, e) => { s.rows[t] ? s.rows[t].setValue(e) : (s.addRow(e), i = !0); })); for (let n = t.length; n < s.rows.length; n++) { const r = s.rows[n].container; s.item_has_child_editors || s.rows[n].row.parentNode.removeChild(s.rows[n].row), s.rows[n].destroy(), r.parentNode && r.parentNode.removeChild(r), s.rows[n] = null, i = !0; }s.rows = s.rows.slice(0, t.length), s.refreshValue(), (i || e) && s.refreshRowButtons(), s.onChange(); } },
    refreshRowButtons() { const t = this; const e = this.schema.minItems && this.schema.minItems >= this.rows.length; let i = !1; o(this.rows, ((s, n) => { n.movedown_button && (s === t.rows.length - 1 ? n.movedown_button.style.display = 'none' : (i = !0, n.movedown_button.style.display = '')), n.delete_button && (e ? n.delete_button.style.display = 'none' : (i = !0, n.delete_button.style.display = '')), n.moveup_button && (i = !0); })), o(this.rows, ((t, e) => { e.controls_cell.style.display = i ? '' : 'none'; })), this.controls_header_cell.style.display = i ? '' : 'none'; let s = !1; this.value.length ? this.value.length === 1 ? (this.table.style.display = '', this.remove_all_rows_button.style.display = 'none', e || this.hide_delete_last_row_buttons ? this.delete_last_row_button.style.display = 'none' : (this.delete_last_row_button.style.display = '', s = !0)) : (this.table.style.display = '', e || this.hide_delete_last_row_buttons ? this.delete_last_row_button.style.display = 'none' : (this.delete_last_row_button.style.display = '', s = !0), e || this.hide_delete_all_rows_buttons ? this.remove_all_rows_button.style.display = 'none' : (this.remove_all_rows_button.style.display = '', s = !0)) : (this.delete_last_row_button.style.display = 'none', this.remove_all_rows_button.style.display = 'none', this.table.style.display = 'none'), this.schema.maxItems && this.schema.maxItems <= this.rows.length || this.hide_add_button ? this.add_row_button.style.display = 'none' : (this.add_row_button.style.display = '', s = !0), this.controls.style.display = s ? '' : 'none'; },
    refreshValue() { const t = this; this.value = [], o(this.rows, ((e, i) => { t.value[e] = i.getValue(); })), this.serialized = JSON.stringify(this.value); },
    addRow(t) { const e = this; const i = this.rows.length; e.rows[i] = this.getElementEditor(i); const s = e.rows[i].table_controls; this.hide_delete_buttons || (e.rows[i].delete_button = this.getButton('', 'delete', this.translate('button_delete_row_title_short')), e.rows[i].delete_button.classList.add('delete', 'json-editor-btntype-delete'), e.rows[i].delete_button.setAttribute('data-i', i), e.rows[i].delete_button.addEventListener('click', (function (t) { if (t.preventDefault(), t.stopPropagation(), !e.askConfirmation()) return !1; const i = 1 * this.getAttribute('data-i'); const s = e.getValue(); const n = []; o(s, ((t, e) => { t !== i && n.push(e); })), e.setValue(n), e.onChange(!0), e.jsoneditor.trigger('deleteRow', e.rows[i]); })), s.appendChild(e.rows[i].delete_button)), i && !this.hide_move_buttons && (e.rows[i].moveup_button = this.getButton('', 'moveup', this.translate('button_move_up_title')), e.rows[i].moveup_button.classList.add('moveup', 'json-editor-btntype-move'), e.rows[i].moveup_button.setAttribute('data-i', i), e.rows[i].moveup_button.addEventListener('click', (function (t) { t.preventDefault(), t.stopPropagation(); const i = 1 * this.getAttribute('data-i'); if (!(i <= 0)) { const s = e.getValue(); const n = s[i - 1]; s[i - 1] = s[i], s[i] = n, e.setValue(s), e.onChange(!0), e.jsoneditor.trigger('moveRow', e.rows[i - 1]); } })), s.appendChild(e.rows[i].moveup_button)), this.hide_move_buttons || (e.rows[i].movedown_button = this.getButton('', 'movedown', this.translate('button_move_down_title')), e.rows[i].movedown_button.classList.add('movedown', 'json-editor-btntype-move'), e.rows[i].movedown_button.setAttribute('data-i', i), e.rows[i].movedown_button.addEventListener('click', (function (t) { t.preventDefault(), t.stopPropagation(); const i = 1 * this.getAttribute('data-i'); const s = e.getValue(); if (!(i >= s.length - 1)) { const n = s[i + 1]; s[i + 1] = s[i], s[i] = n, e.setValue(s), e.onChange(!0), e.jsoneditor.trigger('moveRow', e.rows[i + 1]); } })), s.appendChild(e.rows[i].movedown_button)), t && e.rows[i].setValue(t); },
    addControls() { const t = this; this.collapsed = !1, this.toggle_button = this.getButton('', 'collapse', this.translate('button_collapse')), this.toggle_button.classList.add('json-editor-btntype-toggle'), this.toggle_button.style.margin = '0 10px 0 0', this.title_controls && (this.title.insertBefore(this.toggle_button, this.title.childNodes[0]), this.toggle_button.addEventListener('click', (function (e) { e.preventDefault(), e.stopPropagation(), t.collapsed ? (t.collapsed = !1, t.panel.style.display = '', t.setButtonText(this, '', 'collapse', t.translate('button_collapse'))) : (t.collapsed = !0, t.panel.style.display = 'none', t.setButtonText(this, '', 'expand', t.translate('button_expand'))); })), this.options.collapsed && a(this.toggle_button, 'click'), this.schema.options && void 0 !== this.schema.options.disable_collapse ? this.schema.options.disable_collapse && (this.toggle_button.style.display = 'none') : this.jsoneditor.options.disable_collapse && (this.toggle_button.style.display = 'none')), this.add_row_button = this.getButton(this.getItemTitle(), 'add', this.translate('button_add_row_title', [this.getItemTitle()])), this.add_row_button.classList.add('json-editor-btntype-add'), this.add_row_button.addEventListener('click', ((e) => { e.preventDefault(), e.stopPropagation(); const i = t.addRow(); t.refreshValue(), t.refreshRowButtons(), t.onChange(!0), t.jsoneditor.trigger('addRow', i); })), t.controls.appendChild(this.add_row_button), this.delete_last_row_button = this.getButton(this.translate('button_delete_last', [this.getItemTitle()]), 'subtract', this.translate('button_delete_last_title', [this.getItemTitle()])), this.delete_last_row_button.classList.add('json-editor-btntype-deletelast'), this.delete_last_row_button.addEventListener('click', ((e) => { if (e.preventDefault(), e.stopPropagation(), !t.askConfirmation()) return !1; const i = t.getValue(); const s = i.pop(); t.setValue(i), t.onChange(!0), t.jsoneditor.trigger('deleteRow', s); })), t.controls.appendChild(this.delete_last_row_button), this.remove_all_rows_button = this.getButton(this.translate('button_delete_all'), 'delete', this.translate('button_delete_all_title')), this.remove_all_rows_button.classList.add('json-editor-btntype-deleteall'), this.remove_all_rows_button.addEventListener('click', ((e) => { if (e.preventDefault(), e.stopPropagation(), !t.askConfirmation()) return !1; t.setValue([]), t.onChange(!0), t.jsoneditor.trigger('deleteAllRows'); })), t.controls.appendChild(this.remove_all_rows_button); },
  }); const ht = O.extend({
    getNumColumns() { return 4; },
    build() {
      const t = this; if (this.options.compact || (this.header = this.label = this.theme.getFormInputLabel(this.getTitle(), this.isRequired())), this.schema.description && (this.description = this.theme.getFormInputDescription(this.schema.description)), this.options.infoText && (this.infoButton = this.theme.getInfoButton(this.options.infoText)), this.options = this.expandCallbacks('upload', r({}, {
        title: 'Browse', icon: '', auto_upload: !1, hide_input: !1, enable_drag_drop: !1, drop_zone_text: 'Drag & Drop file here', drop_zone_top: !1, alt_drop_zone: '', mime_type: '', max_upload_size: 0, upload_handler: function (t, e, i, s) { window.alert(`No upload_handler defined for "${t.path}". You must create your own handler to enable upload to server`); }.bind(null, this),
      }, this.defaults.options.upload || {}, this.options.upload || {})), this.options.mime_type = this.options.mime_type ? [].concat(this.options.mime_type) : [], this.input = this.theme.getFormInputField('hidden'), this.container.appendChild(this.input), !this.schema.readOnly && !this.schema.readonly) { if (typeof this.options.upload_handler !== 'function') throw new Error('Upload handler required for upload editor'); if (this.uploader = this.theme.getFormInputField('file'), this.uploader.style.display = 'none', this.options.mime_type.length && this.uploader.setAttribute('accept', this.options.mime_type), !0 === this.options.enable_drag_drop && !0 === this.options.hide_input || (this.clickHandler = function (e) { t.uploader.dispatchEvent(new window.MouseEvent('click', { view: window, bubbles: !0, cancelable: !1 })); }, this.browseButton = this.getButton(this.options.title, this.options.icon, this.options.title), this.browseButton.addEventListener('click', this.clickHandler), this.fileDisplay = this.theme.getFormInputField('input'), this.fileDisplay.setAttribute('readonly', !0), this.fileDisplay.value = 'No file selected.', this.fileDisplay.addEventListener('dblclick', this.clickHandler), this.fileUploadGroup = this.theme.getInputGroup(this.fileDisplay, [this.browseButton]), this.fileUploadGroup || (this.fileUploadGroup = document.createElement('div'), this.fileUploadGroup.appendChild(this.fileDisplay), this.fileUploadGroup.appendChild(this.browseButton))), !0 === this.options.enable_drag_drop) { if (this.options.alt_drop_zone !== '') { if (this.altDropZone = document.querySelector(this.options.alt_drop_zone), !this.altDropZone) throw new Error(`Error: alt_drop_zone selector "${this.options.alt_drop_zone}" not found!`); this.dropZone = this.altDropZone; } else this.dropZone = this.theme.getDropZone(this.options.drop_zone_text); this.dropZone && (this.dropZone.classList.add('upload-dropzone'), this.dropZone.addEventListener('dblclick', this.clickHandler)); } this.uploadHandler = function (e) { e.preventDefault(), e.stopPropagation(); const i = e.target.files || e.dataTransfer.files; if (i && i.length) if (t.options.max_upload_size !== 0 && i[0].size > t.options.max_upload_size)t.theme.addInputError(t.uploader, `Filesize too large. Max size is ${t.options.max_upload_size}`); else if (t.options.mime_type.length === 0 || t.isValidMimeType(i[0].type, t.options.mime_type)) { t.fileDisplay && (t.fileDisplay.value = i[0].name); let s = new window.FileReader(); s.onload = function (i) { t.preview_value = i.target.result, t.refreshPreview(e), t.onChange(!0), s = null; }, s.readAsDataURL(i[0]); } else t.theme.addInputError(t.uploader, `Wrong file format. Allowed format(s): ${t.options.mime_type.toString()}`); }, this.uploader.addEventListener('change', this.uploadHandler), this.dragHandler = function (e) { const i = e.dataTransfer.items || e.dataTransfer.files; const s = i && i.length && (t.options.mime_type.length === 0 || t.isValidMimeType(i[0].type, t.options.mime_type)); const n = e.currentTarget.classList && e.currentTarget.classList.contains('upload-dropzone') && s; switch ((this === window ? 'w_' : 'e_') + e.type) { case 'w_drop': case 'w_dragover': n || (e.dataTransfer.dropEffect = 'none'); break; case 'e_dragenter': n ? (t.dropZone.classList.add('valid-dropzone'), e.dataTransfer.dropEffect = 'copy') : t.dropZone.classList.add('invalid-dropzone'); break; case 'e_dragover': n && (e.dataTransfer.dropEffect = 'copy'); break; case 'e_dragleave': t.dropZone.classList.remove('valid-dropzone', 'invalid-dropzone'); break; case 'e_drop': t.dropZone.classList.remove('valid-dropzone', 'invalid-dropzone'), n && t.uploadHandler(e); }n || e.preventDefault(); }, !0 === this.options.enable_drag_drop && (['dragover', 'drop'].forEach(((e) => { window.addEventListener(e, t.dragHandler, !0); })), ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(((e) => { t.dropZone.addEventListener(e, t.dragHandler, !0); }))); } this.preview = document.createElement('div'), this.control = this.input.controlgroup = this.theme.getFormControl(this.label, this.uploader || this.input, this.description, this.infoButton), this.uploader && (this.uploader.controlgroup = this.control); const e = this.uploader || this.input; const i = document.createElement('div'); this.dropZone && !this.altDropZone && !0 === this.options.drop_zone_top && i.appendChild(this.dropZone), this.fileUploadGroup && i.appendChild(this.fileUploadGroup), this.dropZone && !this.altDropZone && !0 !== this.options.drop_zone_top && i.appendChild(this.dropZone), i.appendChild(this.preview), e.parentNode.insertBefore(i, e.nextSibling), this.container.appendChild(this.control), window.requestAnimationFrame((() => { t.afterInputReady(); }));
    },
    afterInputReady() { const t = this; if (t.value) { const e = document.createElement('img'); e.style.maxWidth = '100%', e.style.maxHeight = '100px', e.onload = function (i) { t.preview.appendChild(e); }, e.onerror = function (t) { console.error('upload error', t, this); }, e.src = t.container.querySelector('a').href; }t.theme.afterInputReady(t.input); },
    refreshPreview(t) { if (this.last_preview !== this.preview_value && (this.last_preview = this.preview_value, this.preview.innerHTML = '', this.preview_value)) { const e = this; const i = (t.target.files || t.dataTransfer.files)[0]; const s = this.preview_value.match(/^data:([^;,]+)[;,]/); if (i.mimeType = s ? s[1] : 'unknown', i.size > 0) { const n = Math.floor(Math.log(i.size) / Math.log(1024)); i.formattedSize = `${parseFloat((i.size / Math.pow(1024, n)).toFixed(2))} ${['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'][n]}`; } else i.formattedSize = '0 Bytes'; const r = this.getButton('Upload', 'upload', 'Upload'); r.addEventListener('click', ((t) => { t.preventDefault(), r.setAttribute('disabled', 'disabled'), e.theme.removeInputError(e.uploader), e.theme.getProgressBar && (e.progressBar = e.theme.getProgressBar(), e.preview.appendChild(e.progressBar)), e.options.upload_handler(e.path, i, { success(t) { e.setValue(t), e.parent ? e.parent.onChildEditorChange(e) : e.jsoneditor.onChange(), e.progressBar && e.preview.removeChild(e.progressBar), r.removeAttribute('disabled'); }, failure(t) { e.theme.addInputError(e.uploader, t), e.progressBar && e.preview.removeChild(e.progressBar), r.removeAttribute('disabled'); }, updateProgress(t) { e.progressBar && (t ? e.theme.updateProgressBar(e.progressBar, t) : e.theme.updateProgressBarUnknown(e.progressBar)); } }); })), this.preview.appendChild(this.theme.getUploadPreview(i, r, this.preview_value)), this.options.auto_upload && (r.dispatchEvent(new window.MouseEvent('click')), this.preview.removeChild(r)); } },
    enable() { this.always_disabled || (this.uploader && (this.uploader.disabled = !1), this._super()); },
    disable(t) { t && (this.always_disabled = !0), this.uploader && (this.uploader.disabled = !0), this._super(); },
    setValue(t) { this.value !== t && (this.value = t, this.input.value = this.value, this.onChange()); },
    destroy() { const t = this; !0 === this.options.enable_drag_drop && (['dragover', 'drop'].forEach(((e) => { window.removeEventListener(e, t.dragHandler, !0); })), ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(((e) => { t.dropZone.removeEventListener(e, t.dragHandler, !0); })), this.dropZone.removeEventListener('dblclick', this.clickHandler), this.dropZone && this.dropZone.parentNode && this.dropZone.parentNode.removeChild(this.dropZone)), this.uploader && this.uploader.parentNode && (this.uploader.removeEventListener('change', this.uploadHandler), this.uploader.parentNode.removeChild(this.uploader)), this.browseButton && this.browseButton.parentNode && (this.browseButton.removeEventListener('click', this.clickHandler), this.browseButton.parentNode.removeChild(this.browseButton)), this.fileDisplay && this.fileDisplay.parentNode && (this.fileDisplay.removeEventListener('dblclick', this.clickHandler), this.fileDisplay.parentNode.removeChild(this.fileDisplay)), this.fileUploadGroup && this.fileUploadGroup.parentNode && this.fileUploadGroup.parentNode.removeChild(this.fileUploadGroup), this.preview && this.preview.parentNode && this.preview.parentNode.removeChild(this.preview), this.header && this.header.parentNode && this.header.parentNode.removeChild(this.header), this.input && this.input.parentNode && this.input.parentNode.removeChild(this.input), this._super(); },
    isValidMimeType(t, e) { return e.reduce(((e, i) => e || new RegExp(i.replace(/\*/g, '.*'), 'gi').test(t)), !1); },
  }); const dt = O.extend({
    preBuild() { this._super(), this.schema.default = this.uuid = this.getUuid(), this.jsoneditor.validator.schema.properties[this.key].pattern = this.schema.pattern = '^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[1-5][0-9a-fA-F]{3}-[89abAB][0-9a-fA-F]{3}-[0-9a-fA-F]{12}$', this.schema.options || (this.schema.options = {}), this.schema.options.cleave || (this.schema.options.cleave = { delimiters: ['-'], blocks: [8, 4, 4, 4, 12] }); }, sanitize(t) { return this.testUuid(t) || (t = this.uuid), t; }, setValue(t, e, i) { this.testUuid(t) || (t = this.uuid), this.uuid = t, this._super(t, e, i); }, getUuid() { let t = (new Date()).getTime(); return typeof performance !== 'undefined' && typeof performance.now === 'function' && (t += performance.now()), 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, ((e) => { const i = (t + 16 * Math.random()) % 16 | 0; return t = Math.floor(t / 16), (e === 'x' ? i : 3 & i | 8).toString(16); })); }, testUuid(t) { return /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(t); },
  }); const ct = A.extend({
    postBuild() { window.Picker && (this.input.type = 'text'); },
    setValue(t, e, i) { const s = this._super(t, e, i); return this.picker_instance && this.picker_instance.domElement && s && s.changed && this.picker_instance.setColor(s.value, !0), s; },
    getNumColumns() { return 2; },
    afterInputReady() { this._super(), this.createPicker(!0); },
    disable() { if (this._super(), this.picker_instance && this.picker_instance.domElement) { this.picker_instance.domElement.style.pointerEvents = 'none'; for (let t = this.picker_instance.domElement.querySelectorAll('button'), e = 0; e < t.length; e++)t[e].disabled = !0; } },
    enable() { if (this._super(), this.picker_instance && this.picker_instance.domElement) { this.picker_instance.domElement.style.pointerEvents = 'auto'; for (let t = this.picker_instance.domElement.querySelectorAll('button'), e = 0; e < t.length; e++)t[e].disabled = !1; } },
    destroy() { this.createPicker(!1), this._super(); },
    createPicker(t) {
      if (t) {
        if (window.Picker && !this.picker_instance) {
          const t = this; const e = this.expandCallbacks('colorpicker', r({}, {
            editor: !1, alpha: !1, color: this.value, popup: 'bottom',
          }, this.defaults.options.colorpicker || {}, this.options.colorpicker || {}, { parent: this.container })); const i = function (e) { const i = this.settings.editorFormat; const s = this.settings.alpha; t.setValue(i === 'hex' ? s ? e.hex : e.hex.slice(0, 7) : e[`${i + (s ? 'a' : '')}String`]); }; e.popup || typeof e.onChange === 'function' ? e.popup && typeof e.onDone !== 'function' && (e.onDone = i) : e.onChange = i, this.picker_instance = new window.Picker(e), e.popup || (this.input.style.display = 'none', this.theme.afterInputReady(this.picker_instance.domElement));
        }
      } else this.picker_instance && (this.picker_instance.destroy(), this.picker_instance = null, this.input.style.display = '');
    },
  }); const ut = function () { return { compile(t) { const e = t.match(/{{\s*([a-zA-Z0-9\-_ .]+)\s*}}/g); const i = e && e.length; if (!i) return function () { return t; }; for (var s = [], n = function (t) { let i; let n; let r = e[t].replace(/[{}]+/g, '').trim().split('.'); const o = r.length; o > 1 ? i = function (e) { for (n = e, t = 0; t < o && (n = n[r[t]]); t++);return n; } : (r = r[0], i = function (t) { return t[r]; }); s.push({ s: e[t], r: i }); }, r = 0; r < i; r++)n(r); return function (e) { let n; let o = `${t}`; for (r = 0; r < i; r++)n = s[r], o = o.replace(n.s, n.r(e)); return o; }; } }; }; const pt = function () { return !!window.EJS && { compile(t) { const e = new window.EJS({ text: t }); return function (t) { return e.render(t); }; } }; }; const mt = function () { return window.Handlebars; }; const ft = function () { return !!window.Hogan && { compile(t) { const e = window.Hogan.compile(t); return function (t) { return e.render(t); }; } }; }; const bt = function () { return !!window._ && { compile(t) { return function (e) { return window._.template(t)(e); }; } }; }; const gt = function () { return !(!window.Mark || !window.Mark.up) && { compile(t) { return function (e) { return window.Mark.up(t, e); }; } }; }; const _t = function () { return !!window.Mustache && { compile(t) { return function (e) { return window.Mustache.render(t, e); }; } }; }; const vt = function () { return window.swig; }; const yt = function () { return !!window._ && { compile(t) { return function (e) { return window._.template(t)(e); }; } }; }; const wt = g.extend({
    mapping: {
      collapse: 'chevron-down', expand: 'chevron-right', delete: 'trash', edit: 'pencil', add: 'plus', subtract: 'minus', cancel: 'ban-circle', save: 'save', moveup: 'arrow-up', moveright: 'arrow-right', movedown: 'arrow-down', moveleft: 'arrow-left', copy: 'copy', clear: 'remove-circle', time: 'time', calendar: 'calendar', edit_properties: 'list',
    },
    icon_prefix: 'icon-',
  }); const xt = g.extend({
    mapping: {
      collapse: 'caret-square-o-down', expand: 'caret-square-o-right', delete: 'times', edit: 'pencil', add: 'plus', subtract: 'minus', cancel: 'ban', save: 'save', moveup: 'arrow-up', moveright: 'arrow-right', movedown: 'arrow-down', moveleft: 'arrow-left', copy: 'files-o', clear: 'times-circle-o', time: 'clock-o', calendar: 'calendar', edit_properties: 'list',
    },
    icon_prefix: 'fa fa-',
  }); const Ct = g.extend({
    mapping: {
      collapse: 'caret-down', expand: 'caret-right', delete: 'trash', edit: 'pen', add: 'plus', subtract: 'minus', cancel: 'ban', save: 'save', moveup: 'arrow-up', moveright: 'arrow-right', movedown: 'arrow-down', moveleft: 'arrow-left', copy: 'copy', clear: 'times-circle', time: 'clock', calendar: 'calendar', edit_properties: 'list',
    },
    icon_prefix: 'fas fa-',
  }); const kt = g.extend({
    mapping: {
      collapse: 'triangle-1-s', expand: 'triangle-1-e', delete: 'trash', edit: 'pencil', add: 'plusthick', subtract: 'minusthick', cancel: 'closethick', save: 'disk', moveup: 'arrowthick-1-n', moveright: 'arrowthick-1-e', movedown: 'arrowthick-1-s', moveleft: 'arrowthick-1-w', copy: 'copy', clear: 'circle-close', time: 'time', calendar: 'calendar', edit_properties: 'note',
    },
    icon_prefix: 'ui-icon ui-icon-',
  }); const Lt = g.extend({
    mapping: {
      collapse: 'arrow-down', expand: 'arrow-right', delete: 'delete', edit: 'edit', add: 'plus', subtract: 'minus', cancel: 'cross', save: 'check', moveup: 'upward', moveright: 'forward', movedown: 'downward', moveleft: 'back', copy: 'copy', clear: 'close', time: 'time', calendar: 'bookmark', edit_properties: 'menu',
    },
    icon_prefix: 'icon icon-',
  }); i.d(e, 'JSONEditor', (() => It)); let jt; let Et; let Tt; let Ot; let At; var It = function (t, e) { if (!(t instanceof Element)) throw new Error('element should be an instance of Element'); e = r({}, It.defaults.options, e || {}), this.element = t, this.options = e, this.init(); }; It.prototype = {
    constructor: It,
    init() {
      const t = this; this.ready = !1, this.copyClipboard = null; const e = this.options.theme || It.defaults.theme; const i = It.defaults.themes[e]; if (!i) throw new Error(`Unknown theme ${e}`); this.schema = this.options.schema, this.theme = new i(this), this.element.setAttribute('data-theme', e), this.theme.options.disable_theme_rules || this.addNewStyleRules(e, this.theme.rules), this.template = this.options.template, this.uuid = 0, this.__data = {}; const s = It.defaults.iconlibs[this.options.iconlib || It.defaults.iconlib]; s && (this.iconlib = new s()), this.root_container = this.theme.getContainer(), this.element.appendChild(this.root_container), this.translate = this.options.translate || It.defaults.translate; const n = document.location.origin + document.location.pathname.toString(); const r = new p(t.options); const o = document.location.toString(); this.expandSchema = function (t, e) { return r.expandSchema(t, e); }, this.expandRefs = function (t, e) { return r.expandRefs(t, e); }, this.refs = r.refs, r.load(t.options.schema, ((e) => {
        const i = {}; t.options.custom_validators && (i.custom_validators = t.options.custom_validators), t.validator = new u(t, null, i, It.defaults); const s = t.getEditorClass(e); t.root = t.createEditor(s, {
          jsoneditor: t, schema: e, required: !0, container: t.root_container,
        }), t.root.preBuild(), t.root.build(), t.root.postBuild(), t.options.hasOwnProperty('startval') && t.root.setValue(t.options.startval), t.validation_results = t.validator.validate(t.root.getValue()), t.root.showValidationErrors(t.validation_results), t.ready = !0, window.requestAnimationFrame((() => { t.ready && (t.validation_results = t.validator.validate(t.root.getValue()), t.root.showValidationErrors(t.validation_results), t.trigger('ready'), t.trigger('change')); }));
      }), n, o);
    },
    getValue() { if (!this.ready) throw new Error("JSON Editor not ready yet.  Listen for 'ready' event before getting the value"); return this.root.getValue(); },
    setValue(t) { if (!this.ready) throw new Error("JSON Editor not ready yet.  Listen for 'ready' event before setting the value"); return this.root.setValue(t), this; },
    validate(t) { if (!this.ready) throw new Error("JSON Editor not ready yet.  Listen for 'ready' event before validating"); return arguments.length === 1 ? this.validator.validate(t) : this.validation_results; },
    destroy() { this.destroyed || this.ready && (this.schema = null, this.options = null, this.root.destroy(), this.root = null, this.root_container = null, this.validator = null, this.validation_results = null, this.theme = null, this.iconlib = null, this.template = null, this.__data = null, this.ready = !1, this.element.innerHTML = '', this.element.removeAttribute('data-theme'), this.destroyed = !0); },
    on(t, e) { return this.callbacks = this.callbacks || {}, this.callbacks[t] = this.callbacks[t] || [], this.callbacks[t].push(e), this; },
    off(t, e) { if (t && e) { this.callbacks = this.callbacks || {}, this.callbacks[t] = this.callbacks[t] || []; for (var i = [], s = 0; s < this.callbacks[t].length; s++) this.callbacks[t][s] !== e && i.push(this.callbacks[t][s]); this.callbacks[t] = i; } else t ? (this.callbacks = this.callbacks || {}, this.callbacks[t] = []) : this.callbacks = {}; return this; },
    trigger(t, e) { if (this.callbacks && this.callbacks[t] && this.callbacks[t].length) for (let i = 0; i < this.callbacks[t].length; i++) this.callbacks[t][i].apply(this, [e]); return this; },
    setOption(t, e) { if (t !== 'show_errors') throw new Error(`Option ${t} must be set during instantiation and cannot be changed later`); return this.options.show_errors = e, this.onChange(), this; },
    getEditorClass(t) { let e; if (t = this.expandSchema(t), o(It.defaults.resolvers, ((i, s) => { const n = s(t); if (n && It.defaults.editors[n]) return e = n, !1; })), !e) throw new Error(`Unknown editor for schema ${JSON.stringify(t)}`); if (!It.defaults.editors[e]) throw new Error(`Unknown editor ${e}`); return It.defaults.editors[e]; },
    createEditor(t, e) { return new t(e = r({}, t.options || {}, e), It.defaults); },
    onChange() { if (this.ready && !this.firing_change) { this.firing_change = !0; const t = this; return window.requestAnimationFrame((() => { t.firing_change = !1, t.ready && (t.validation_results = t.validator.validate(t.root.getValue()), t.options.show_errors !== 'never' ? t.root.showValidationErrors(t.validation_results) : t.root.showValidationErrors([]), t.trigger('change')); })), this; } },
    compileTemplate(t, e) { let i; if (typeof (e = e || It.defaults.template) === 'string') { if (!It.defaults.templates[e]) throw new Error(`Unknown template engine ${e}`); if (!(i = It.defaults.templates[e]())) throw new Error(`Template engine ${e} missing required library.`); } else i = e; if (!i) throw new Error('No template engine set'); if (!i.compile) throw new Error('Invalid template engine set'); return i.compile(t); },
    _data(t, e, i) { if (arguments.length !== 3) return t.hasAttribute(`data-jsoneditor-${e}`) ? this.__data[t.getAttribute(`data-jsoneditor-${e}`)] : null; let s; t.hasAttribute(`data-jsoneditor-${e}`) ? s = t.getAttribute(`data-jsoneditor-${e}`) : (s = this.uuid++, t.setAttribute(`data-jsoneditor-${e}`, s)), this.__data[s] = i; },
    registerEditor(t) { return this.editors = this.editors || {}, this.editors[t.path] = t, this; },
    unregisterEditor(t) { return this.editors = this.editors || {}, this.editors[t.path] = null, this; },
    getEditor(t) { if (this.editors) return this.editors[t]; },
    watch(t, e) { return this.watchlist = this.watchlist || {}, this.watchlist[t] = this.watchlist[t] || [], this.watchlist[t].push(e), this; },
    unwatch(t, e) { if (!this.watchlist || !this.watchlist[t]) return this; if (!e) return this.watchlist[t] = null, this; for (var i = [], s = 0; s < this.watchlist[t].length; s++) this.watchlist[t][s] !== e && i.push(this.watchlist[t][s]); return this.watchlist[t] = i.length ? i : null, this; },
    notifyWatchers(t) { if (!this.watchlist || !this.watchlist[t]) return this; for (let e = 0; e < this.watchlist[t].length; e++) this.watchlist[t][e](); },
    isEnabled() { return !this.root || this.root.isEnabled(); },
    enable() { this.root.enable(); },
    disable() { this.root.disable(); },
    setCopyClipboardContents(t) { this.copyClipboard = t; },
    getCopyClipboardContents() { return this.copyClipboard; },
    addNewStyleRules(t, e) { let i = document.querySelector(`#theme-${t}`); i || ((i = document.createElement('style')).setAttribute('id', `theme-${t}`), i.appendChild(document.createTextNode('')), document.head.appendChild(i)); const s = i.sheet ? i.sheet : i.styleSheet; const n = this.element.nodeName.toLowerCase(); for (const r in e) if (e.hasOwnProperty(r)) { const o = `${n}[data-theme="${t}"] ${r}`; s.insertRule ? s.insertRule(`${o} {${e[r]}}`, 0) : s.addRule && s.addRule(o, e[r], 0); } },
  }, It.defaults = ((jt = {
    defaults: {
      themes: {}, templates: {}, iconlibs: {}, editors: {}, languages: {}, resolvers: [], custom_validators: [],
    },
  }).defaults.theme = 'html', jt.defaults.template = 'default', jt.defaults.options = {}, jt.defaults.options.prompt_before_delete = !0, jt.defaults.options.upload = function (t, e, i) { console.log('Upload handler required for upload editor'); }, jt.defaults.translate = function (t, e) { const i = jt.defaults.languages[jt.defaults.language]; if (!i) throw new Error(`Unknown language ${jt.defaults.language}`); let s = i[t] || jt.defaults.languages[jt.defaults.default_language][t]; if (void 0 === s) throw new Error(`Unknown translate string ${t}`); if (e) for (let n = 0; n < e.length; n++)s = s.replace(new RegExp(`\\{\\{${n}}}`, 'g'), e[n]); return s; }, jt.defaults.default_language = 'en', jt.defaults.language = jt.defaults.default_language, jt.defaults.languages.en = {
    error_notset: 'Property must be set', error_notempty: 'Value required', error_enum: 'Value must be one of the enumerated values', error_anyOf: 'Value must validate against at least one of the provided schemas', error_oneOf: 'Value must validate against exactly one of the provided schemas. It currently validates against {{0}} of the schemas.', error_not: 'Value must not validate against the provided schema', error_type_union: 'Value must be one of the provided types', error_type: 'Value must be of type {{0}}', error_disallow_union: 'Value must not be one of the provided disallowed types', error_disallow: 'Value must not be of type {{0}}', error_multipleOf: 'Value must be a multiple of {{0}}', error_maximum_excl: 'Value must be less than {{0}}', error_maximum_incl: 'Value must be at most {{0}}', error_minimum_excl: 'Value must be greater than {{0}}', error_minimum_incl: 'Value must be at least {{0}}', error_maxLength: 'Value must be at most {{0}} characters long', error_minLength: 'Value must be at least {{0}} characters long', error_pattern: 'Value must match the pattern {{0}}', error_additionalItems: 'No additional items allowed in this array', error_maxItems: 'Value must have at most {{0}} items', error_minItems: 'Value must have at least {{0}} items', error_uniqueItems: 'Array must have unique items', error_maxProperties: 'Object must have at most {{0}} properties', error_minProperties: 'Object must have at least {{0}} properties', error_required: "Object is missing the required property '{{0}}'", error_additional_properties: 'No additional properties allowed, but property {{0}} is set', error_dependency: 'Must have property {{0}}', error_date: 'Date must be in the format {{0}}', error_time: 'Time must be in the format {{0}}', error_datetime_local: 'Datetime must be in the format {{0}}', error_invalid_epoch: 'Date must be greater than 1 January 1970', error_ipv4: 'Value must be a valid IPv4 address in the form of 4 numbers between 0 and 255, separated by dots', error_ipv6: 'Value must be a valid IPv6 address', error_hostname: 'The hostname has the wrong format', button_delete_all: 'All', button_delete_all_title: 'Delete All', button_delete_last: 'Last {{0}}', button_delete_last_title: 'Delete Last {{0}}', button_add_row_title: 'Add {{0}}', button_move_down_title: 'Move down', button_move_up_title: 'Move up', button_object_properties: 'Object Properties', button_delete_row_title: 'Delete {{0}}', button_delete_row_title_short: 'Delete', button_collapse: 'Collapse', button_expand: 'Expand', flatpickr_toggle_button: 'Toggle', flatpickr_clear_button: 'Clear', choices_placeholder_text: 'Start typing to add value', default_array_item_title: 'item',
  }, jt.defaults.callbacks = {}, o(jt.defaults.editors, ((t, e) => { jt.defaults.editors[t].options = e.options || {}; })), jt.defaults.resolvers.unshift(((t) => { if (typeof t.type !== 'string') return 'multiple'; })), jt.defaults.resolvers.unshift(((t) => { if (!t.type && t.properties) return 'object'; })), jt.defaults.resolvers.unshift(((t) => { if (typeof t.type === 'string') return t.type; })), jt.defaults.resolvers.unshift(((t) => { if (t.type === 'string' && t.format === 'signature') return 'signature'; })), jt.defaults.resolvers.unshift(((t) => { if (t.type === 'boolean') return t.format === 'checkbox' || t.options && t.options.checkbox ? 'checkbox' : t.format === 'select2' ? 'select2' : t.format === 'selectize' ? 'selectize' : t.format === 'choices' ? 'choices' : 'select'; })), jt.defaults.resolvers.unshift(((t) => { if (t.type === 'any') return 'multiple'; })), jt.defaults.resolvers.unshift(((t) => { if (t.type === 'string' && t.media && t.media.binaryEncoding === 'base64') return 'base64'; })), jt.defaults.resolvers.unshift(((t) => { if (t.type === 'string' && t.format === 'url' && window.FileReader && t.options && t.options.upload === Object(t.options.upload)) return 'upload'; })), jt.defaults.resolvers.unshift(((t) => { if (t.type === 'array' && t.format === 'table') return 'table'; })), jt.defaults.resolvers.unshift(((t) => { if (t.enumSource) return t.format === 'radio' ? 'radio' : t.format === 'select2' ? 'select2' : t.format === 'selectize' ? 'selectize' : t.format === 'choices' ? 'choices' : 'select'; })), jt.defaults.resolvers.unshift(((t) => { if (t.enum) { if (t.type === 'array' || t.type === 'object') return 'enum'; if (t.type === 'number' || t.type === 'integer' || t.type === 'string') return t.format === 'radio' ? 'radio' : t.format === 'select2' ? 'select2' : t.format === 'selectize' ? 'selectize' : t.format === 'choices' ? 'choices' : 'select'; } })), jt.defaults.resolvers.unshift(((t) => { if (t.type === 'array' && t.items && !Array.isArray(t.items) && ['string', 'number', 'integer'].indexOf(t.items.type) >= 0) { if (t.format === 'choices') return 'arrayChoices'; if (t.uniqueItems) { if (t.format === 'selectize') return 'arraySelectize'; if (t.format === 'select2') return 'arraySelect2'; if (t.format !== 'table') return 'multiselect'; } } })), jt.defaults.resolvers.unshift(((t) => { if (t.oneOf || t.anyOf) return 'multiple'; })), jt.defaults.resolvers.unshift(((t) => { if (['string', 'integer'].indexOf(t.type) !== -1 && ['date', 'time', 'datetime-local'].indexOf(t.format) !== -1) return 'datetime'; })), jt.defaults.resolvers.unshift(((t) => { if (['string', 'integer'].indexOf(t.type) !== -1 && ['starrating', 'rating'].indexOf(t.format) !== -1) return 'starrating'; })), jt.defaults.resolvers.unshift(((t) => { if (t.links) for (let e = 0; e < t.links.length; e++) if (t.links[e].rel && t.links[e].rel.toLowerCase() === 'describedby') return 'describedBy'; })), jt.defaults.resolvers.unshift(((t) => { if (t.format === 'button') return 'button'; })), jt.defaults.resolvers.unshift(((t) => { if (t.format === 'info') return 'info'; })), jt.defaults.resolvers.unshift(((t) => { if (t.type === 'string' && t.format === 'uuid') return 'uuid'; })), jt.defaults.resolvers.unshift(((t) => { if (t.type === 'string' && t.format === 'autocomplete') return 'autocomplete'; })), jt.defaults.resolvers.unshift(((t) => { if (t.type === 'string' && t.format === 'jodit') return 'jodit'; })), jt.defaults.resolvers.unshift(((t) => { if (t.type === 'string' && t.format === 'markdown') return 'simplemde'; })), jt.defaults.resolvers.unshift(((t) => { if (t.type === 'string' && ['xhtml', 'bbcode'].indexOf(t.format) !== -1) return 'sceditor'; })), jt.defaults.resolvers.unshift(((t) => { if (t.type === 'string' && ['actionscript', 'batchfile', 'c', 'c++', 'cpp', 'coffee', 'csharp', 'css', 'dart', 'django', 'ejs', 'erlang', 'golang', 'groovy', 'handlebars', 'haskell', 'haxe', 'html', 'ini', 'jade', 'java', 'javascript', 'json', 'less', 'lisp', 'lua', 'makefile', 'matlab', 'mysql', 'objectivec', 'pascal', 'perl', 'pgsql', 'php', 'python', 'r', 'ruby', 'sass', 'scala', 'scss', 'smarty', 'sql', 'sqlserver', 'stylus', 'svg', 'twig', 'vbscript', 'xml', 'yaml'].indexOf(t.format) !== -1) return 'ace'; })), jt.defaults.resolvers.unshift(((t) => { if (t.type === 'string' && ['ip', 'ipv4', 'ipv6', 'hostname'].indexOf(t.format) !== -1) return 'ip'; })), jt.defaults.resolvers.unshift(((t) => { if (t.type === 'string' && t.format === 'color') return 'colorpicker'; })), jt.defaults), (Et = It.defaults.themes).html = v, Et.bootstrap4 = w, Et.jqueryui = x, Et.barebones = k, Et.spectre = j, Et.tailwind = T, It.AbstractEditor = O, It.AbstractTheme = b, It.AbstractIconLib = g, (Tt = It.defaults.editors).ace = I, Tt.array = S, Tt.arrayChoices = P, Tt.arraySelect2 = B, Tt.arraySelectize = V, Tt.autocomplete = H, Tt.base64 = F, Tt.button = z, Tt.checkbox = R, Tt.choices = D, Tt.datetime = q, Tt.describedBy = G, Tt.enum = J, Tt.hidden = U, Tt.info = W, Tt.integer = $, Tt.ip = Q, Tt.jodit = Y, Tt.multiple = X, Tt.multiselect = N, Tt.null = K, Tt.number = Z, Tt.object = tt, Tt.radio = et, Tt.sceditor = it, Tt.select = M, Tt.select2 = st, Tt.selectize = nt, Tt.signature = rt, Tt.simplemde = ot, Tt.starrating = at, Tt.string = A, Tt.table = lt, Tt.upload = ht, Tt.uuid = dt, Tt.colorpicker = ct, (Ot = It.defaults.templates).default = ut, Ot.ejs = pt, Ot.handlebars = mt, Ot.hogan = ft, Ot.hogan = bt, Ot.markup = gt, Ot.mustache = _t, Ot.swig = vt, Ot.underscore = yt, (At = It.defaults.iconlibs).fontawesome3 = wt, At.fontawesome4 = xt, At.fontawesome5 = Ct, At.jqueryui = kt, At.spectre = Lt, window.JSONEditor = It;
}]));
