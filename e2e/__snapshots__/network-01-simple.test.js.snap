// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`network-01-simple should create proper e2e/__tmp__/network-01-simple/fabrica-target/fabric-config/.gitignore from samples/fabricaConfig-1org-1channel-1chaincode.json 1`] = `
"/config
/crypto-config
"
`;

exports[`network-01-simple should create proper e2e/__tmp__/network-01-simple/fabrica-target/fabric-config/collections/chaincode1.json from samples/fabricaConfig-1org-1channel-1chaincode.json 1`] = `"[]"`;

exports[`network-01-simple should create proper e2e/__tmp__/network-01-simple/fabrica-target/fabric-config/configtx.yaml from samples/fabricaConfig-1org-1channel-1chaincode.json 1`] = `
"################################################################################
#   SECTION: Capabilities
################################################################################
Capabilities:
    Channel: &ChannelCapabilities
        V1_4_3: true
    Orderer: &OrdererCapabilities
        V1_4_2: true
    Application: &ApplicationCapabilities
        V1_4_2: true

################################################################################
#   CHANNEL Defaults
################################################################################
Channel: &ChannelDefaults
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: \\"ANY Readers\\"
        Writers:
            Type: ImplicitMeta
            Rule: \\"ANY Writers\\"
        Admins:
            Type: ImplicitMeta
            Rule: \\"MAJORITY Admins\\"

    Capabilities:
        <<: *ChannelCapabilities

################################################################################
#   Section: Organizations
################################################################################
Organizations:
    - &OrdererOrg
      Name: Orderer
      ID: OrdererMSP
      MSPDir: crypto-config/ordererOrganizations/root.com/msp

      Policies:
          Readers:
              Type: Signature
              Rule: \\"OR('OrdererMSP.member')\\"
          Writers:
              Type: Signature
              Rule: \\"OR('OrdererMSP.member')\\"
          Admins:
              Type: Signature
              Rule: \\"OR('OrdererMSP.admin')\\"

    - &Org1
      Name: Org1MSP
      ID: Org1MSP
      MSPDir: crypto-config/peerOrganizations/org1.com/msp

      Policies:
          Readers:
              Type: Signature
              Rule: \\"OR('Org1MSP.member')\\"
          Writers:
              Type: Signature
              Rule: \\"OR('Org1MSP.member')\\"
          Admins:
              Type: Signature
              Rule: \\"OR('Org1MSP.admin')\\"
          Endorsement:
              Type: Signature
              Rule: \\"OR('Org1MSP.member')\\"

      AnchorPeers:
          - Host: peer0.org1.com
            Port: 7060

################################################################################
#   SECTION: Application
################################################################################
Application: &ApplicationDefaults
    Organizations:
    # Policies defines the set of policies at this level of the config tree
    # For Application policies, their canonical path is
    #   /Channel/Application/<PolicyName>
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: \\"ANY Readers\\"
        Writers:
            Type: ImplicitMeta
            Rule: \\"ANY Writers\\"
        Admins:
            Type: ImplicitMeta
            Rule: \\"MAJORITY Admins\\"
        Endorsement:
            Type: ImplicitMeta
            Rule: \\"MAJORITY Endorsement\\"

    Capabilities:
        <<: *ApplicationCapabilities

################################################################################
#   SECTION: Orderer
################################################################################
Orderer: &OrdererDefaults
    OrdererType: solo
    Addresses:
        - orderer0.root.com:7050
    BatchTimeout: 2s
    BatchSize:
        MaxMessageCount: 10
        AbsoluteMaxBytes: 99 MB
        PreferredMaxBytes: 512 KB
    Organizations:
    # Policies defines the set of policies at this level of the config tree
    # For Orderer policies, their canonical path is
    #   /Channel/Orderer/<PolicyName>
    Policies:
        Readers:
            Type: ImplicitMeta
            Rule: \\"ANY Readers\\"
        Writers:
            Type: ImplicitMeta
            Rule: \\"ANY Writers\\"
        Admins:
            Type: ImplicitMeta
            Rule: \\"MAJORITY Admins\\"
        # BlockValidation specifies what signatures must be included in the block
        # from the orderer for the peer to validate it.
        BlockValidation:
            Type: ImplicitMeta
            Rule: \\"ANY Writers\\"

    Capabilities:
        <<: *OrdererCapabilities

################################################################################
#   Profile
################################################################################
# https://github:com/hyperledger/fabric/blob/master/sampleconfig/configtx.yaml

Profiles:
    # Profile used to create Genesis block for Orderer #
    OrdererGenesis:
        <<: *ChannelDefaults
        Orderer:
            <<: *OrdererDefaults
            Organizations:
                - *OrdererOrg

            Capabilities:
                <<: *OrdererCapabilities

        Consortiums:
            SampleConsortium:
                Organizations:
                    - *Org1

    # Profile used to create channeltx for my-channel1 #
    MyChannel1:
        <<: *ChannelDefaults
        Consortium: SampleConsortium
        Consortiums:
            SampleConsortium:
                Organizations:
                    - *Org1
        Application:
            <<: *ApplicationDefaults
            Organizations:
                - *Org1
        Orderer:
            <<: *OrdererDefaults
            Organizations:
                - *Org1

            Capabilities:
                <<: *ApplicationCapabilities
"
`;

exports[`network-01-simple should create proper e2e/__tmp__/network-01-simple/fabrica-target/fabric-config/crypto-config-org1.yaml from samples/fabricaConfig-1org-1channel-1chaincode.json 1`] = `
"PeerOrgs:
  - Name: Org1
    Domain: org1.com
    Template:
      Count: 2
    Users:
      Count: 1
"
`;

exports[`network-01-simple should create proper e2e/__tmp__/network-01-simple/fabrica-target/fabric-config/crypto-config-root.yaml from samples/fabricaConfig-1org-1channel-1chaincode.json 1`] = `
"OrdererOrgs:
  - Name: Orderer
    Domain: root.com
    Specs:
      - Hostname: orderer0
"
`;

exports[`network-01-simple should create proper e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker.sh from samples/fabricaConfig-1org-1channel-1chaincode.json 1`] = `
"#!/usr/bin/env bash

set -eu

FABRICA_NETWORK_ROOT=\\"$(cd \\"$(dirname \\"$0\\")\\" && pwd)\\"

source \\"$FABRICA_NETWORK_ROOT/fabric-docker/scripts/base-help.sh\\"
source \\"$FABRICA_NETWORK_ROOT/fabric-docker/scripts/base-functions.sh\\"
source \\"$FABRICA_NETWORK_ROOT/fabric-docker/scripts/chaincode-functions.sh\\"
source \\"$FABRICA_NETWORK_ROOT/fabric-docker/channel-query-scripts.sh\\"
source \\"$FABRICA_NETWORK_ROOT/fabric-docker/commands-generated.sh\\"
source \\"$FABRICA_NETWORK_ROOT/fabric-docker/.env\\"

function networkUp() {
  generateArtifacts
  prepareChaincodeDirs
  startNetwork
  generateChannelsArtifacts
  installChannels
  installChaincodes
  notifyOrgsAboutChannels
  printHeadline \\"Done! Enjoy your fresh network\\" \\"U1F984\\"
}

if [ \\"$1\\" = \\"up\\" ]; then
  networkUp
elif [ \\"$1\\" = \\"down\\" ]; then
  networkDown
elif [ \\"$1\\" = \\"reboot\\" ]; then
  networkDown
  networkUp
elif [ \\"$1\\" = \\"start\\" ]; then
  startNetwork
elif [ \\"$1\\" = \\"stop\\" ]; then
  stopNetwork
elif [ \\"$1\\" = \\"chaincode\\" ] && [ \\"$2\\" = \\"upgrade\\" ]; then
  upgradeChaincode \\"$3\\" \\"$4\\"
elif [ \\"$1\\" = \\"channel\\" ]; then
  channelQuery \\"\${@:2}\\"
elif [ \\"$1\\" = \\"help\\" ]; then
  printHelp
elif [ \\"$1\\" = \\"--help\\" ]; then
  printHelp
else
  echo \\"No command specified\\"
  echo \\"Basic commands are: up, down, start, stop, reboot\\"
  echo \\"To list channel query helper commands type: 'fabrica channel --help'\\"
  echo \\"Also check: 'chaincodes install'\\"
  echo \\"Use 'help' or '--help' for more information\\"
fi
"
`;

exports[`network-01-simple should create proper e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/.env from samples/fabricaConfig-1org-1channel-1chaincode.json 1`] = `
"FABRICA_VERSION=\\"0.1.0-unstable\\"
FABRICA_BUILD=<date with git hash>

FABRICA_CONFIG=<absolute path>
CHAINCODES_BASE_DIR=<absolute path>

COMPOSE_PROJECT_NAME=<name with timestamp>
LOGGING_LEVEL=info

FABRIC_VERSION=1.4.6
FABRIC_CA_VERSION=1.4.6

ROOT_CA_ADMIN_NAME=admin
ROOT_CA_ADMIN_PASSWORD=adminpw

ORG1_CA_ADMIN_NAME=admin
ORG1_CA_ADMIN_PASSWORD=adminpw

"
`;

exports[`network-01-simple should create proper e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/channel-query-scripts.sh from samples/fabricaConfig-1org-1channel-1chaincode.json 1`] = `
"#!/usr/bin/env bash

source \\"$FABRICA_NETWORK_ROOT/fabric-docker/scripts/channel-query-functions.sh\\"

set -eu

function channelQuery() {
  echo \\"-> Channel query: \\" + \\"$@\\"

  if [ \\"$#\\" -eq 1 ]; then
    printChannelsHelp

  elif [ \\"$1\\" = \\"list\\" ] && [ \\"$2\\" = \\"org1\\" ] && [ \\"$3\\" = \\"peer0\\" ]; then

    peerChannelList \\"cli.org1.com\\" \\"peer0.org1.com:7060\\"

  elif
    [ \\"$1\\" = \\"list\\" ] && [ \\"$2\\" = \\"org1\\" ] && [ \\"$3\\" = \\"peer1\\" ]
  then

    peerChannelList \\"cli.org1.com\\" \\"peer1.org1.com:7061\\"

  elif

    [ \\"$1\\" = \\"getinfo\\" ] && [ \\"$2\\" = \\"my-channel1\\" ] && [ \\"$3\\" = \\"org1\\" ] && [ \\"$4\\" = \\"peer0\\" ]
  then

    peerChannelGetInfo \\"my-channel1\\" \\"cli.org1.com\\" \\"peer0.org1.com:7060\\"

  elif [ \\"$1\\" = \\"fetch\\" ] && [ \\"$2\\" = \\"config\\" ] && [ \\"$3\\" = \\"my-channel1\\" ] && [ \\"$4\\" = \\"org1\\" ] && [ \\"$5\\" = \\"peer0\\" ] && [ \\"$#\\" = 7 ]; then
    FILE_NAME=$6

    peerChannelFetchConfig \\"my-channel1\\" \\"cli.org1.com\\" \\"\${FILE_NAME}\\" \\"peer0.org1.com:7060\\"

  elif [ \\"$1\\" = \\"fetch\\" ] && [ \\"$2\\" = \\"lastBlock\\" ] && [ \\"$3\\" = \\"my-channel1\\" ] && [ \\"$4\\" = \\"org1\\" ] && [ \\"$5\\" = \\"peer0\\" ] && [ \\"$#\\" = 7 ]; then
    FILE_NAME=$6

    peerChannelFetchLastBlock \\"my-channel1\\" \\"cli.org1.com\\" \\"\${FILE_NAME}\\" \\"peer0.org1.com:7060\\"

  elif [ \\"$1\\" = \\"fetch\\" ] && [ \\"$2\\" = \\"firstBlock\\" ] && [ \\"$3\\" = \\"my-channel1\\" ] && [ \\"$4\\" = \\"org1\\" ] && [ \\"$5\\" = \\"peer0\\" ] && [ \\"$#\\" = 7 ]; then
    FILE_NAME=$6

    peerChannelFetchFirstBlock \\"my-channel1\\" \\"cli.org1.com\\" \\"\${FILE_NAME}\\" \\"peer0.org1.com:7060\\"

  elif [ \\"$1\\" = \\"fetch\\" ] && [ \\"$2\\" = \\"block\\" ] && [ \\"$3\\" = \\"my-channel1\\" ] && [ \\"$4\\" = \\"org1\\" ] && [ \\"$5\\" = \\"peer0\\" ] && [ \\"$#\\" = 8 ]; then
    FILE_NAME=$6
    BLOCK_NUMBER=$7

    peerChannelFetchBlock \\"my-channel1\\" \\"cli.org1.com\\" \\"\${FILE_NAME}\\" \\"\${BLOCK_NUMBER}\\" \\"peer0.org1.com:7060\\"

  elif
    [ \\"$1\\" = \\"getinfo\\" ] && [ \\"$2\\" = \\"my-channel1\\" ] && [ \\"$3\\" = \\"org1\\" ] && [ \\"$4\\" = \\"peer1\\" ]
  then

    peerChannelGetInfo \\"my-channel1\\" \\"cli.org1.com\\" \\"peer1.org1.com:7061\\"

  elif [ \\"$1\\" = \\"fetch\\" ] && [ \\"$2\\" = \\"config\\" ] && [ \\"$3\\" = \\"my-channel1\\" ] && [ \\"$4\\" = \\"org1\\" ] && [ \\"$5\\" = \\"peer1\\" ] && [ \\"$#\\" = 7 ]; then
    FILE_NAME=$6

    peerChannelFetchConfig \\"my-channel1\\" \\"cli.org1.com\\" \\"\${FILE_NAME}\\" \\"peer1.org1.com:7061\\"

  elif [ \\"$1\\" = \\"fetch\\" ] && [ \\"$2\\" = \\"lastBlock\\" ] && [ \\"$3\\" = \\"my-channel1\\" ] && [ \\"$4\\" = \\"org1\\" ] && [ \\"$5\\" = \\"peer1\\" ] && [ \\"$#\\" = 7 ]; then
    FILE_NAME=$6

    peerChannelFetchLastBlock \\"my-channel1\\" \\"cli.org1.com\\" \\"\${FILE_NAME}\\" \\"peer1.org1.com:7061\\"

  elif [ \\"$1\\" = \\"fetch\\" ] && [ \\"$2\\" = \\"firstBlock\\" ] && [ \\"$3\\" = \\"my-channel1\\" ] && [ \\"$4\\" = \\"org1\\" ] && [ \\"$5\\" = \\"peer1\\" ] && [ \\"$#\\" = 7 ]; then
    FILE_NAME=$6

    peerChannelFetchFirstBlock \\"my-channel1\\" \\"cli.org1.com\\" \\"\${FILE_NAME}\\" \\"peer1.org1.com:7061\\"

  elif [ \\"$1\\" = \\"fetch\\" ] && [ \\"$2\\" = \\"block\\" ] && [ \\"$3\\" = \\"my-channel1\\" ] && [ \\"$4\\" = \\"org1\\" ] && [ \\"$5\\" = \\"peer1\\" ] && [ \\"$#\\" = 8 ]; then
    FILE_NAME=$6
    BLOCK_NUMBER=$7

    peerChannelFetchBlock \\"my-channel1\\" \\"cli.org1.com\\" \\"\${FILE_NAME}\\" \\"\${BLOCK_NUMBER}\\" \\"peer1.org1.com:7061\\"

  else

    printChannelsHelp
  fi

}

function printChannelsHelp() {
  echo \\"Channel management commands:\\"
  echo \\"\\"

  echo \\"fabrica channel list org1 peer0\\"
  echo -e \\"\\\\t List channels on 'peer0' of 'Org1'\\".
  echo \\"\\"

  echo \\"fabrica channel list org1 peer1\\"
  echo -e \\"\\\\t List channels on 'peer1' of 'Org1'\\".
  echo \\"\\"

  echo \\"fabrica channel getinfo my-channel1 org1 peer0\\"
  echo -e \\"\\\\t Get channel info on 'peer0' of 'Org1'\\".
  echo \\"\\"
  echo \\"fabrica channel fetch config my-channel1 org1 peer0 <fileName.json>\\"
  echo -e \\"\\\\t Download latest config block to current dir. Uses first peer 'peer0' of 'Org1'\\".
  echo \\"\\"
  echo \\"fabrica channel fetch lastBlock my-channel1 org1 peer0 <fileName.json>\\"
  echo -e \\"\\\\t Download last, decrypted block to current dir. Uses first peer 'peer0' of 'Org1'\\".
  echo \\"\\"
  echo \\"fabrica channel fetch firstBlock my-channel1 org1 peer0 <fileName.json>\\"
  echo -e \\"\\\\t Download first, decrypted block to current dir. Uses first peer 'peer0' of 'Org1'\\".
  echo \\"\\"

  echo \\"fabrica channel getinfo my-channel1 org1 peer1\\"
  echo -e \\"\\\\t Get channel info on 'peer1' of 'Org1'\\".
  echo \\"\\"
  echo \\"fabrica channel fetch config my-channel1 org1 peer1 <fileName.json>\\"
  echo -e \\"\\\\t Download latest config block to current dir. Uses first peer 'peer1' of 'Org1'\\".
  echo \\"\\"
  echo \\"fabrica channel fetch lastBlock my-channel1 org1 peer1 <fileName.json>\\"
  echo -e \\"\\\\t Download last, decrypted block to current dir. Uses first peer 'peer1' of 'Org1'\\".
  echo \\"\\"
  echo \\"fabrica channel fetch firstBlock my-channel1 org1 peer1 <fileName.json>\\"
  echo -e \\"\\\\t Download first, decrypted block to current dir. Uses first peer 'peer1' of 'Org1'\\".
  echo \\"\\"

}
"
`;

exports[`network-01-simple should create proper e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/commands-generated.sh from samples/fabricaConfig-1org-1channel-1chaincode.json 1`] = `
"#!/usr/bin/env bash

function prepareChaincodeDirs() {

  mkdir -p \\"$CHAINCODES_BASE_DIR/./chaincodes/chaincode-kv-node\\"
}

function installChaincodes() {
  printHeadline \\"Building 'chaincode1'\\" \\"U1F60B\\"
  curr_chaincode_dir=\\"$CHAINCODES_BASE_DIR/./chaincodes/chaincode-kv-node\\"
  if [ -n \\"$(ls \\"$curr_chaincode_dir\\")\\" ]; then
    if [ -f \\"$curr_chaincode_dir/yarn.lock\\" ]; then
      (cd \\"$curr_chaincode_dir\\" && yarn install && yarn build)
    else
      (cd \\"$curr_chaincode_dir\\" && npm install --unsafe-perm=true && npm run build)
    fi
  else
    echo \\"Skipping chaincode './chaincodes/chaincode-kv-node' build. Directory $curr_chaincode_dir is empty.\\"
  fi
  printHeadline \\"Installing 'chaincode1' on my-channel1/Org1/peer0\\" \\"U1F60E\\"
  chaincodeInstall \\\\
    \\"cli.org1.com\\" \\\\
    \\"peer0.org1.com:7060\\" \\\\
    \\"my-channel1\\" \\\\
    \\"chaincode1\\" \\\\
    \\"0.0.1\\" \\\\
    \\"node\\" \\\\
    \\"$CHAINCODES_BASE_DIR/./chaincodes/chaincode-kv-node\\" \\\\
    \\"orderer0.root.com:7050\\" \\\\
    \\"\\"
  printHeadline \\"Installing 'chaincode1' on my-channel1/Org1/peer1\\" \\"U1F60E\\"
  chaincodeInstall \\\\
    \\"cli.org1.com\\" \\\\
    \\"peer1.org1.com:7061\\" \\\\
    \\"my-channel1\\" \\\\
    \\"chaincode1\\" \\\\
    \\"0.0.1\\" \\\\
    \\"node\\" \\\\
    \\"$CHAINCODES_BASE_DIR/./chaincodes/chaincode-kv-node\\" \\\\
    \\"orderer0.root.com:7050\\" \\\\
    \\"\\"

  printItalics \\"Instantiating chaincode 'chaincode1' on channel 'my-channel1' as 'Org1'\\" \\"U1F618\\"
  chaincodeInstantiate \\\\
    \\"cli.org1.com\\" \\\\
    \\"peer0.org1.com:7060\\" \\\\
    \\"my-channel1\\" \\\\
    \\"chaincode1\\" \\\\
    \\"0.0.1\\" \\\\
    \\"node\\" \\\\
    \\"$CHAINCODES_BASE_DIR/./chaincodes/chaincode-kv-node\\" \\\\
    \\"orderer0.root.com:7050\\" \\\\
    '{\\"Args\\":[]}' \\\\
    \\"AND ('Org1MSP.member')\\" \\\\
    \\"\\" \\\\
    \\"\\"

}

function upgradeChaincode() {
  chaincodeName=\\"$1\\"
  version=\\"$2\\"

  if [ -z \\"$chaincodeName\\" ]; then
    echo \\"Error: chaincode name is not provided\\"
    exit 1
  fi

  if [ -z \\"$version\\" ]; then
    echo \\"Error: chaincode version is not provided\\"
    exit 1
  fi

  if [ \\"$chaincodeName\\" = \\"chaincode1\\" ]; then
    printHeadline \\"Building 'chaincode1'\\" \\"U1F60B\\"
    curr_chaincode_dir=\\"$CHAINCODES_BASE_DIR/./chaincodes/chaincode-kv-node\\"
    if [ -n \\"$(ls \\"$curr_chaincode_dir\\")\\" ]; then
      if [ -f \\"$curr_chaincode_dir/yarn.lock\\" ]; then
        (cd \\"$curr_chaincode_dir\\" && yarn install && yarn build)
      else
        (cd \\"$curr_chaincode_dir\\" && npm install --unsafe-perm=true && npm run build)
      fi
    else
      echo \\"Skipping chaincode './chaincodes/chaincode-kv-node' build. Directory $curr_chaincode_dir is empty.\\"
    fi
    printHeadline \\"Installing 'chaincode1' on my-channel1/Org1/peer0\\" \\"U1F60E\\"
    chaincodeInstall \\\\
      \\"cli.org1.com\\" \\\\
      \\"peer0.org1.com:7060\\" \\\\
      \\"my-channel1\\" \\\\
      \\"chaincode1\\" \\\\
      \\"$version\\" \\\\
      \\"node\\" \\\\
      \\"$CHAINCODES_BASE_DIR/./chaincodes/chaincode-kv-node\\" \\\\
      \\"orderer0.root.com:7050\\" \\\\
      \\"\\"
    printHeadline \\"Installing 'chaincode1' on my-channel1/Org1/peer1\\" \\"U1F60E\\"
    chaincodeInstall \\\\
      \\"cli.org1.com\\" \\\\
      \\"peer1.org1.com:7061\\" \\\\
      \\"my-channel1\\" \\\\
      \\"chaincode1\\" \\\\
      \\"$version\\" \\\\
      \\"node\\" \\\\
      \\"$CHAINCODES_BASE_DIR/./chaincodes/chaincode-kv-node\\" \\\\
      \\"orderer0.root.com:7050\\" \\\\
      \\"\\"

    printItalics \\"Upgrading as 'Org1'. 'chaincode1' on channel 'my-channel1'\\" \\"U1F618\\"
    chaincodeUpgrade \\\\
      \\"cli.org1.com\\" \\\\
      \\"peer0.org1.com:7060\\" \\\\
      \\"my-channel1\\" \\"chaincode1\\" \\\\
      \\"$version\\" \\\\
      \\"node\\" \\\\
      \\"$CHAINCODES_BASE_DIR/./chaincodes/chaincode-kv-node\\" \\\\
      \\"orderer0.root.com:7050\\" \\\\
      '{\\"Args\\":[]}' \\\\
      \\"AND ('Org1MSP.member')\\" \\\\
      \\"\\" \\\\
      \\"\\"
  fi

}

function notifyOrgsAboutChannels() {
  printHeadline \\"Creating new channel config blocks\\" \\"U1F537\\"
  createNewChannelUpdateTx \\\\
    \\"my-channel1\\" \\\\
    \\"Org1MSP\\" \\\\
    \\"MyChannel1\\" \\\\
    \\"$FABRICA_NETWORK_ROOT/fabric-config\\" \\\\
    \\"$FABRICA_NETWORK_ROOT/fabric-config/config\\"

  printHeadline \\"Notyfing orgs about channels\\" \\"U1F4E2\\"
  notifyOrgAboutNewChannel \\\\
    \\"my-channel1\\" \\\\
    \\"Org1MSP\\" \\\\
    \\"cli.org1.com\\" \\\\
    \\"peer0.org1.com\\" \\\\
    \\"orderer0.root.com:7050\\"

  printHeadline \\"Deleting new channel config blocks\\" \\"U1F52A\\"
  deleteNewChannelUpdateTx \\"my-channel1\\" \\"Org1MSP\\" \\"cli.org1.com\\"
}

function generateArtifacts() {
  printHeadline \\"Generating basic configs\\" \\"U1F913\\"
  printItalics \\"Generating crypto material for org Orderer\\" \\"U1F512\\"
  certsGenerate \\\\
    \\"$FABRICA_NETWORK_ROOT/fabric-config\\" \\\\
    \\"crypto-config-root.yaml\\" \\\\
    \\"ordererOrganizations/root.com\\" \\\\
    \\"$FABRICA_NETWORK_ROOT/fabric-config/crypto-config/\\"

  printItalics \\"Generating crypto material for Org1\\" \\"U1F512\\"
  certsGenerate \\\\
    \\"$FABRICA_NETWORK_ROOT/fabric-config\\" \\\\
    \\"crypto-config-org1.yaml\\" \\\\
    \\"peerOrganizations/org1.com\\" \\\\
    \\"$FABRICA_NETWORK_ROOT/fabric-config/crypto-config/\\"

  printItalics \\"Generating genesis block\\" \\"U1F3E0\\"
  genesisBlockCreate \\"$FABRICA_NETWORK_ROOT/fabric-config\\" \\"$FABRICA_NETWORK_ROOT/fabric-config/config\\"
}

function startNetwork() {
  printHeadline \\"Starting network\\" \\"U1F680\\"
  (
    cd \\"$FABRICA_NETWORK_ROOT\\"/fabric-docker &&
      docker-compose up -d &&
      sleep 4
  )
}

function stopNetwork() {
  printHeadline \\"Stopping network\\" \\"U1F68F\\"
  (
    cd \\"$FABRICA_NETWORK_ROOT\\"/fabric-docker &&
      docker-compose stop &&
      sleep 4
  )
}

function generateChannelsArtifacts() {
  printHeadline \\"Generating config for 'my-channel1'\\" \\"U1F913\\"
  createChannelTx \\"my-channel1\\" \\"$FABRICA_NETWORK_ROOT/fabric-config\\" \\"MyChannel1\\" \\"$FABRICA_NETWORK_ROOT/fabric-config/config\\"
}

function installChannels() {
  printHeadline \\"Creating 'my-channel1' on Org1/peer0\\" \\"U1F63B\\"
  docker exec -i cli.org1.com bash -c \\\\
    \\"source scripts/channel_fns.sh; createChannelAndJoin 'my-channel1' 'Org1MSP' 'peer0.org1.com:7060' 'crypto/users/Admin@org1.com/msp' 'orderer0.root.com:7050';\\"

  printItalics \\"Joining 'my-channel1' on  Org1/peer1\\" \\"U1F638\\"
  docker exec -i cli.org1.com bash -c \\\\
    \\"source scripts/channel_fns.sh; fetchChannelAndJoin 'my-channel1' 'Org1MSP' 'peer1.org1.com:7061' 'crypto/users/Admin@org1.com/msp' 'orderer0.root.com:7050';\\"
}

function networkDown() {
  printHeadline \\"Destroying network\\" \\"U1F916\\"
  (
    cd \\"$FABRICA_NETWORK_ROOT\\"/fabric-docker &&
      docker-compose down
  )

  printf \\"\\\\nRemoving chaincode containers & images... \\\\U1F5D1 \\\\n\\"
  docker rm -f $(docker ps -a | grep dev-peer0.org1.com-chaincode1-0.0.1-* | awk '{print $1}') || {
    echo \\"docker rm failed, Check if all fabric dockers properly was deleted\\"
  }
  docker rmi $(docker images dev-peer0.org1.com-chaincode1-0.0.1-* -q) || {
    echo \\"docker rm failed, Check if all fabric dockers properly was deleted\\"
  }
  docker rm -f $(docker ps -a | grep dev-peer1.org1.com-chaincode1-0.0.1-* | awk '{print $1}') || {
    echo \\"docker rm failed, Check if all fabric dockers properly was deleted\\"
  }
  docker rmi $(docker images dev-peer1.org1.com-chaincode1-0.0.1-* -q) || {
    echo \\"docker rm failed, Check if all fabric dockers properly was deleted\\"
  }

  printf \\"\\\\nRemoving generated configs... \\\\U1F5D1 \\\\n\\"
  rm -rf \\"$FABRICA_NETWORK_ROOT\\"/fabric-config/config
  rm -rf \\"$FABRICA_NETWORK_ROOT\\"/fabric-config/crypto-config

  printHeadline \\"Done! Network was purged\\" \\"U1F5D1\\"
}
"
`;

exports[`network-01-simple should create proper e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/docker-compose.yaml from samples/fabricaConfig-1org-1channel-1chaincode.json 1`] = `
"version: '2.2'

networks:
  basic:

services:
  ca.root.com:
    container_name: ca.root.com
    image: hyperledger/fabric-ca:\${FABRIC_CA_VERSION}
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca.root.com
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server/crypto/ca.root.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server/crypto/priv-key.pem
      - FABRIC_LOGGING_SPEC=\${LOGGING_LEVEL}
    ports:
      - 7030:7054
    working_dir: /etc/hyperledger/fabric-ca-server
    command: sh -c 'fabric-ca-server start -b \${ROOT_CA_ADMIN_NAME}:\${ROOT_CA_ADMIN_PASSWORD} -d'
    volumes:
      - ../fabric-config/crypto-config/ordererOrganizations/root.com/ca/:/etc/hyperledger/fabric-ca-server/crypto
    networks:
      - basic

  orderer0.root.com:
    container_name: orderer0.root.com
    image: hyperledger/fabric-orderer:\${FABRIC_VERSION}
    environment:
      - FABRIC_LOGGING_SPEC=\${LOGGING_LEVEL}
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7050
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/config/genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - GODEBUG=netdns=go
    working_dir: /var/hyperledger/orderer
    command: orderer
    ports:
      - 7050:7050
    volumes:
      - ../fabric-config/config/:/var/hyperledger/config
      - ../fabric-config/crypto-config/ordererOrganizations/root.com/orderers/orderer0.root.com/msp/:/var/hyperledger/orderer/msp
      - ../fabric-config/crypto-config/ordererOrganizations/root.com/orderers/orderer0.root.com/tls/:/var/hyperledger/orderer/tls
    networks:
      - basic

  ca.org1.com:
    container_name: ca.org1.com
    image: hyperledger/fabric-ca:\${FABRIC_CA_VERSION}
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=ca.org1.com
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server/crypto/ca.org1.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server/crypto/priv-key.pem
      - FABRIC_LOGGING_SPEC=\${LOGGING_LEVEL}
    ports:
      - 7031:7054
    working_dir: /etc/hyperledger/fabric-ca-server
    command: sh -c 'fabric-ca-server start -b \${ORG1_CA_ADMIN_NAME}:\${ORG1_CA_ADMIN_PASSWORD} -d'
    volumes:
      - ../fabric-config/crypto-config/peerOrganizations/org1.com/ca/:/etc/hyperledger/fabric-ca-server/crypto
    networks:
      - basic

  cli.org1.com:
    container_name: cli.org1.com
    image: hyperledger/fabric-tools:\${FABRIC_VERSION}
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - FABRIC_LOGGING_SPEC=\${LOGGING_LEVEL}
      - CORE_PEER_ID=cli.org1.com
      - CORE_CHAINCODE_KEEPALIVE=10
      #
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_MSPCONFIGPATH=/var/hyperledger/cli/crypto/users/Admin@org1.com/msp
      - CORE_PEER_ADDRESS=peer0.org1.com:7060
    working_dir: /var/hyperledger/cli/
    command: /bin/bash
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - ../fabric-docker/scripts/cli:/var/hyperledger/cli/scripts/
      - ../fabric-config/crypto-config/peerOrganizations/org1.com:/var/hyperledger/cli/crypto/
      - ../fabric-config/config:/var/hyperledger/cli/config/ # genesis.block and channel.tx's
      - \\"$CHAINCODES_BASE_DIR/./chaincodes/chaincode-kv-node/:/var/hyperledger/cli/chaincode1/\\"
    networks:
      - basic

  peer0.org1.com:
    container_name: peer0.org1.com
    image: hyperledger/fabric-peer:\${FABRIC_VERSION}
    environment:
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_ID=peer0.org1.com
      - CORE_PEER_ADDRESS=peer0.org1.com:7060
      - CORE_PEER_LISTENADDRESS=peer0.org1.com:7060
      - CORE_PEER_GOSSIP_ENDPOINT=peer0.org1.com:7060
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.com:7060
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.com:7060
      - CORE_PEER_CHAINCODELISTENADDRESS=peer0.org1.com:7050
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/peer/msp
      - CORE_CHAINCODE_BUILDER=hyperledger/fabric-ccenv:\${FABRIC_VERSION}
      #
      - CORE_CHAINCODE_LOGGING_LEVEL=\${LOGGING_LEVEL}
      - CORE_CHAINCODE_LOGGING_SHIM=\${LOGGING_LEVEL}
      - FABRIC_LOGGING_SPEC=\${LOGGING_LEVEL}
      #
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=\${COMPOSE_PROJECT_NAME}_basic
      - CORE_VM_DOCKER_ATTACHSTDOUT=true
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - GODEBUG=netdns=go

    working_dir: /etc/hyperledger/fabric/peer/
    command: peer node start
    ports:
      - 7060:7060
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - ../fabric-config/crypto-config/peerOrganizations/org1.com/peers/peer0.org1.com/msp:/etc/hyperledger/fabric/peer/msp
      - ../fabric-config/crypto-config/peerOrganizations/org1.com/peers/peer0.org1.com/tls:/etc/hyperledger/fabric/peer/tls
      - ../fabric-config/crypto-config/peerOrganizations/org1.com/users:/etc/hyperledger/fabric/peer/msp/users
      - ../fabric-config/config:/etc/hyperledger/fabric/config
    depends_on:
      - orderer0.root.com
    networks:
      - basic

  peer1.org1.com:
    container_name: peer1.org1.com
    image: hyperledger/fabric-peer:\${FABRIC_VERSION}
    environment:
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_ID=peer1.org1.com
      - CORE_PEER_ADDRESS=peer1.org1.com:7061
      - CORE_PEER_LISTENADDRESS=peer1.org1.com:7061
      - CORE_PEER_GOSSIP_ENDPOINT=peer1.org1.com:7061
      - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.com:7060
      - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org1.com:7050
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/peer/msp
      - CORE_CHAINCODE_BUILDER=hyperledger/fabric-ccenv:\${FABRIC_VERSION}
      #
      - CORE_CHAINCODE_LOGGING_LEVEL=\${LOGGING_LEVEL}
      - CORE_CHAINCODE_LOGGING_SHIM=\${LOGGING_LEVEL}
      - FABRIC_LOGGING_SPEC=\${LOGGING_LEVEL}
      #
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=\${COMPOSE_PROJECT_NAME}_basic
      - CORE_VM_DOCKER_ATTACHSTDOUT=true
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - GODEBUG=netdns=go

    working_dir: /etc/hyperledger/fabric/peer/
    command: peer node start
    ports:
      - 7061:7061
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - ../fabric-config/crypto-config/peerOrganizations/org1.com/peers/peer1.org1.com/msp:/etc/hyperledger/fabric/peer/msp
      - ../fabric-config/crypto-config/peerOrganizations/org1.com/peers/peer1.org1.com/tls:/etc/hyperledger/fabric/peer/tls
      - ../fabric-config/crypto-config/peerOrganizations/org1.com/users:/etc/hyperledger/fabric/peer/msp/users
      - ../fabric-config/config:/etc/hyperledger/fabric/config
    depends_on:
      - orderer0.root.com
    networks:
      - basic
"
`;

exports[`network-01-simple should create proper e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/scripts/base-functions.sh from samples/fabricaConfig-1org-1channel-1chaincode.json 1`] = `
"#!/usr/bin/env bash

function certsGenerate() {
  local CONTAINER_NAME=certsGenerate

  local CONFIG_PATH=$1
  local CRYPTO_CONFIG_FILE_NAME=$2
  local ORG_PATH=$3
  local OUTPUT_PATH=$4
  local FULL_CERT_PATH=$OUTPUT_PATH$ORG_PATH

  echo \\"Generating certs...\\"
  inputLog \\"CONFIG_PATH: $CONFIG_PATH\\"
  inputLog \\"CRYPTO_CONFIG_FILE_NAME: $CRYPTO_CONFIG_FILE_NAME\\"
  inputLog \\"ORG_PATH: $ORG_PATH\\"
  inputLog \\"OUTPUT_PATH: $OUTPUT_PATH\\"
  inputLog \\"FULL_CERT_PATH: $FULL_CERT_PATH\\"

  if [ -d \\"$FULL_CERT_PATH\\" ]; then
    echo \\"Can't generate certs, directory already exists : $FULL_CERT_PATH\\"
    echo \\"Try using 'reboot' or 'down' to remove whole network or 'start' to reuse it\\"
    exit 1
  fi

  docker run -i -d -w=\\"/\\" --name $CONTAINER_NAME hyperledger/fabric-tools:\\"\${FABRIC_VERSION}\\" bash || removeContainer $CONTAINER_NAME
  docker cp \\"$CONFIG_PATH\\" $CONTAINER_NAME:/fabric-config || removeContainer $CONTAINER_NAME

  docker exec -i $CONTAINER_NAME cryptogen generate --config=./fabric-config/\\"$CRYPTO_CONFIG_FILE_NAME\\" || removeContainer $CONTAINER_NAME

  docker cp $CONTAINER_NAME:/crypto-config/. \\"$OUTPUT_PATH\\" || removeContainer $CONTAINER_NAME

  removeContainer $CONTAINER_NAME

  # shellcheck disable=2044
  for file in $(find \\"$OUTPUT_PATH\\"/ -iname '*_sk'); do
    dir=$(dirname \\"$file\\")
    mv \\"\${dir}\\"/*_sk \\"\${dir}\\"/priv-key.pem
  done
}

function genesisBlockCreate() {
  local CONTAINER_NAME=genesisBlockCreate

  local CONFIG_PATH=$1
  local OUTPUT_PATH=$2

  echo \\"Creating genesis block...\\"
  inputLog \\"CONFIG_PATH: $CONFIG_PATH\\"
  inputLog \\"OUTPUT_PATH: $OUTPUT_PATH\\"

  if [ -d \\"$OUTPUT_PATH\\" ]; then
    echo \\"Cant't generate genesis block, directory already exists : $OUTPUT_PATH\\"
    echo \\"Try using 'reboot' or 'down' to remove whole network or 'start' to reuse it\\"
    exit 1
  fi

  docker run -i -d -w=\\"/\\" --name $CONTAINER_NAME hyperledger/fabric-tools:\\"\${FABRIC_VERSION}\\" bash || removeContainer $CONTAINER_NAME
  docker cp \\"$CONFIG_PATH\\" $CONTAINER_NAME:/fabric-config || removeContainer $CONTAINER_NAME

  docker exec -i $CONTAINER_NAME mkdir /config || removeContainer $CONTAINER_NAME
  docker exec -i $CONTAINER_NAME configtxgen --configPath ./fabric-config -profile OrdererGenesis -outputBlock ./config/genesis.block -channelID system-channel || removeContainer $CONTAINER_NAME

  docker cp $CONTAINER_NAME:/config \\"$OUTPUT_PATH\\" || removeContainer $CONTAINER_NAME

  removeContainer $CONTAINER_NAME
}

function createChannelTx() {
  local CONTAINER_NAME=createChannelTx

  local CHANNEL_NAME=$1
  local CONFIG_PATH=$2
  local CONFIG_PROFILE=$3
  local OUTPUT_PATH=$4
  local CHANNEL_TX_PATH=\\"$OUTPUT_PATH/$CHANNEL_NAME\\".tx

  echo \\"Creating channelTx for $CHANNEL_NAME...\\"
  inputLog \\"CONFIG_PATH: $CONFIG_PATH\\"
  inputLog \\"CONFIG_PROFILE: $CONFIG_PROFILE\\"
  inputLog \\"OUTPUT_PATH: $OUTPUT_PATH\\"
  inputLog \\"CHANNEL_TX_PATH: $CHANNEL_TX_PATH\\"

  if [ -f \\"$CHANNEL_TX_PATH\\" ]; then
    echo \\"Can't create channel configuration, it already exists : $CHANNEL_TX_PATH\\"
    echo \\"Try using 'reboot' or 'down' to remove whole network or 'start' to reuse it\\"
    exit 1
  fi

  docker run -i -d -w=\\"/\\" --name $CONTAINER_NAME hyperledger/fabric-tools:\\"\${FABRIC_VERSION}\\" bash || removeContainer $CONTAINER_NAME
  docker cp \\"$CONFIG_PATH\\" $CONTAINER_NAME:/fabric-config || removeContainer $CONTAINER_NAME

  docker exec -i $CONTAINER_NAME mkdir /config || removeContainer $CONTAINER_NAME
  docker exec -i $CONTAINER_NAME configtxgen --configPath ./fabric-config -profile \\"\${CONFIG_PROFILE}\\" -outputCreateChannelTx ./config/channel.tx -channelID \\"\${CHANNEL_NAME}\\" || removeContainer $CONTAINER_NAME

  docker cp $CONTAINER_NAME:/config/channel.tx \\"$CHANNEL_TX_PATH\\" || removeContainer $CONTAINER_NAME

  removeContainer $CONTAINER_NAME
}

function createNewChannelUpdateTx() {
  local CONTAINER_NAME=createAnchorPeerUpdateTx

  local CHANNEL_NAME=$1
  local MSP_NAME=$2
  local CONFIG_PROFILE=$3
  local CONFIG_PATH=$4
  local OUTPUT_PATH=$5
  local ANCHOR_PEER_UPDATE_PATH=\\"$OUTPUT_PATH/\${MSP_NAME}anchors-$CHANNEL_NAME.tx\\"

  echo \\"Creating new channel config block. Channel: $CHANNEL_NAME for organization $MSP_NAME...\\"
  inputLog \\"CHANNEL_NAME: $CHANNEL_NAME\\"
  inputLog \\"MSP_NAME: $MSP_NAME\\"
  inputLog \\"CONFIG_PROFILE: $CONFIG_PROFILE\\"
  inputLog \\"CONFIG_PATH: $CONFIG_PATH\\"
  inputLog \\"OUTPUT_PATH: $OUTPUT_PATH\\"
  inputLog \\"ANCHOR_PEER_UPDATE_PATH: $ANCHOR_PEER_UPDATE_PATH\\"

  if [ -f \\"$ANCHOR_PEER_UPDATE_PATH\\" ]; then
    echo \\"Cant't create anchor peer update, it already exists : $ANCHOR_PEER_UPDATE_PATH\\"
    echo \\"Try using 'reboot' or 'down' to remove whole network or 'start' to reuse it\\"
    exit 1
  fi

  docker run -i -d -w=\\"/\\" --name $CONTAINER_NAME hyperledger/fabric-tools:\\"\${FABRIC_VERSION}\\" bash || removeContainer $CONTAINER_NAME
  docker cp \\"$CONFIG_PATH\\" $CONTAINER_NAME:/fabric-config || removeContainer $CONTAINER_NAME

  docker exec -i $CONTAINER_NAME mkdir /config || removeContainer $CONTAINER_NAME
  docker exec -i $CONTAINER_NAME configtxgen \\\\
    --configPath ./fabric-config \\\\
    -profile \\"\${CONFIG_PROFILE}\\" \\\\
    -outputAnchorPeersUpdate ./config/\\"\${MSP_NAME}\\"anchors.tx \\\\
    -channelID \\"\${CHANNEL_NAME}\\" \\\\
    -asOrg \\"\${MSP_NAME}\\" || removeContainer $CONTAINER_NAME

  docker cp $CONTAINER_NAME:/config/\\"\${MSP_NAME}\\"anchors.tx \\"$ANCHOR_PEER_UPDATE_PATH\\" || removeContainer $CONTAINER_NAME

  removeContainer $CONTAINER_NAME
}

function notifyOrgAboutNewChannel() {
  local CHANNEL_NAME=$1
  local MSP_NAME=$2
  local CLI_NAME=$3
  local PEER_ADDRESS=$4
  local ORDERER_URL=$5
  local ANCHOR_PEER_UPDATE_PATH=\\"/var/hyperledger/cli/config/\${MSP_NAME}anchors-$CHANNEL_NAME.tx\\"

  echo \\"Updating channel $CHANNEL_NAME for organization $MSP_NAME...\\"
  inputLog \\"CHANNEL_NAME: $CHANNEL_NAME\\"
  inputLog \\"MSP_NAME: $MSP_NAME\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"
  inputLog \\"ORDERER_URL: $ORDERER_URL\\"
  inputLog \\"ANCHOR_PEER_UPDATE_PATH: $ANCHOR_PEER_UPDATE_PATH\\"

  if [ -n \\"$ANCHOR_PEER_UPDATE_PATH\\" ]; then
    docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
      \\"$CLI_NAME\\" peer channel update \\\\
      -c \\"$CHANNEL_NAME\\" \\\\
      -o \\"$ORDERER_URL\\" \\\\
      -f \\"$ANCHOR_PEER_UPDATE_PATH\\"
  else
    echo \\"channel update tx not found! Looked for: $ANCHOR_PEER_UPDATE_PATH\\"
  fi
}

function notifyOrgAboutNewChannelTls() {
  local CHANNEL_NAME=$1
  local MSP_NAME=$2
  local CLI_NAME=$3
  local PEER_ADDRESS=$4
  local ORDERER_URL=$5
  local ANCHOR_PEER_UPDATE_PATH=\\"/var/hyperledger/cli/config/\${MSP_NAME}anchors-$CHANNEL_NAME.tx\\"
  local CA_CERT=\\"/var/hyperledger/cli/\\"\${6}

  echo \\"Updating channel $CHANNEL_NAME for organization $MSP_NAME (TLS)...\\"
  inputLog \\"CHANNEL_NAME: $CHANNEL_NAME\\"
  inputLog \\"MSP_NAME: $MSP_NAME\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"
  inputLog \\"ORDERER_URL: $ORDERER_URL\\"
  inputLog \\"ANCHOR_PEER_UPDATE_PATH: $ANCHOR_PEER_UPDATE_PATH\\"

  if [ -n \\"$ANCHOR_PEER_UPDATE_PATH\\" ]; then
    docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
      \\"$CLI_NAME\\" peer channel update \\\\
      -c \\"$CHANNEL_NAME\\" \\\\
      -o \\"$ORDERER_URL\\" \\\\
      -f \\"$ANCHOR_PEER_UPDATE_PATH\\" \\\\
      --tls --cafile \\"$CA_CERT\\"
  else
    echo \\"channel update tx not found! Looked for: $ANCHOR_PEER_UPDATE_PATH\\"
  fi
}

function deleteNewChannelUpdateTx() {
  local CHANNEL_NAME=$1
  local MSP_NAME=$2
  local CLI_NAME=$3
  local ANCHOR_PEER_UPDATE_PATH=\\"/var/hyperledger/cli/config/\${MSP_NAME}anchors-$CHANNEL_NAME.tx\\"

  echo \\"Deleting new channel config block. Channel: $CHANNEL_NAME, Organization: $MSP_NAME\\"
  inputLogShort \\"CHANNEL_NAME: $CHANNEL_NAME, MSP_NAME: $MSP_NAME, CLI_NAME: $CLI_NAME, ANCHOR_PEER_UPDATE_PATH: $ANCHOR_PEER_UPDATE_PATH\\"

  if [ -n \\"$ANCHOR_PEER_UPDATE_PATH\\" ]; then
    docker exec \\"$CLI_NAME\\" rm \\"$ANCHOR_PEER_UPDATE_PATH\\"
  else
    echo \\"channel update tx not found! Looked for: $ANCHOR_PEER_UPDATE_PATH\\"
  fi
}

function printHeadline() {
  bold=$'\\\\e[1m'
  end=$'\\\\e[0m'

  TEXT=$1
  EMOJI=$2
  printf \\"\${bold}============ %b %s %b ==============\${end}\\\\n\\" \\"\\\\\\\\$EMOJI\\" \\"$TEXT\\" \\"\\\\\\\\$EMOJI\\"
}

function printItalics() {
  italics=$'\\\\e[3m'
  end=$'\\\\e[0m'

  TEXT=$1
  EMOJI=$2
  printf \\"\${italics}==== %b %s %b ====\${end}\\\\n\\" \\"\\\\\\\\$EMOJI\\" \\"$TEXT\\" \\"\\\\\\\\$EMOJI\\"
}

function inputLog() {
  end=$'\\\\e[0m'
  darkGray=$'\\\\e[90m'

  echo \\"\${darkGray}   $1 \${end}\\"
}

function inputLogShort() {
  end=$'\\\\e[0m'
  darkGray=$'\\\\e[90m'

  echo \\"\${darkGray}   $1 \${end}\\"
}

function certsRemove() {
  local CERTS_DIR_PATH=$1
  rm -rf \\"$CERTS_DIR_PATH\\"
}

function removeContainer() {
  CONTAINER_NAME=$1
  docker rm -f \\"$CONTAINER_NAME\\"
}
"
`;

exports[`network-01-simple should create proper e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/scripts/base-help.sh from samples/fabricaConfig-1org-1channel-1chaincode.json 1`] = `
"#!/usr/bin/env bash

function printHelp() {
  echo \\"Fabrica is powered by SoftwareMill\\"

  echo \\"\\"
  echo \\"usage: ./fabric-docker.sh <command>\\"
  echo \\"\\"

  echo \\"Commands: \\"
  echo \\"\\"
  echo \\"./fabric-docker.sh up\\"
  echo -e \\"\\\\t Use for first run. Creates all needed artifacts (certs, genesis block) and starts network for the first time.\\"
  echo -e \\"\\\\t After 'up' commands start/stop are used to manage network and rerun to rerun it\\"
  echo \\"\\"
  echo \\"./fabric-docker.sh down\\"
  echo -e \\"\\\\t Back to empty state - destorys created containers, prunes generated certificates, configs.\\"
  echo \\"\\"
  echo \\"./fabric-docker.sh start\\"
  echo -e \\"\\\\t Starts already created network.\\"
  echo \\"\\"
  echo \\"./fabric-docker.sh stop\\"
  echo -e \\"\\\\t Stops already running network.\\"
  echo \\"\\"
  echo \\"./fabric-docker.sh reboot\\"
  echo -e \\"\\\\t Fresh start - it destroys whole network, certs, configs and then reruns everything.\\"
  echo \\"\\"
  echo \\"./fabric-docker.sh channel --help\\"
  echo -e \\"\\\\t Detailed help for channel management scripts.\\"
  echo \\"\\"
}
"
`;

exports[`network-01-simple should create proper e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/scripts/chaincode-functions.sh from samples/fabricaConfig-1org-1channel-1chaincode.json 1`] = `
"#!/usr/bin/env bash

function chaincodeInstall() {
  local CLI_NAME=$1
  local PEER_ADDRESS=$2
  local CHANNEL_NAME=$3

  local CHAINCODE_NAME=$4
  local CHAINCODE_VERSION=$5
  local CHAINCODE_LANG=$6
  local CHAINCODE_DIR_PATH=$7

  local ORDERER_URL=$8

  local CA_CERT
  local CA_CERT_PARAMS

  if [ -n \\"$9\\" ]; then
    CA_CERT=\\"/var/hyperledger/cli/$9\\"
    CA_CERT_PARAMS=(--tls --cafile \\"$CA_CERT\\")
  else
    CA_CERT=\\"<none>\\"
    CA_CERT_PARAMS=()
  fi

  echo \\"Installing chaincode on $CHANNEL_NAME (TLS)...\\"
  inputLog \\"CHAINCODE_NAME: $CHAINCODE_NAME\\"
  inputLog \\"CHAINCODE_VERSION: $CHAINCODE_VERSION\\"
  inputLog \\"CHAINCODE_LANG: $CHAINCODE_LANG\\"
  inputLog \\"CHAINCODE_DIR_PATH: $CHAINCODE_DIR_PATH\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"
  inputLog \\"ORDERER_URL: $ORDERER_URL\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"CA_CERT: $CA_CERT\\"

  if [ -n \\"$(ls \\"$CHAINCODE_DIR_PATH\\")\\" ]; then
    docker exec -e CHANNEL_NAME=\\"$CHANNEL_NAME\\" -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
      \\"$CLI_NAME\\" peer chaincode install \\\\
      -n \\"$CHAINCODE_NAME\\" \\\\
      -v \\"$CHAINCODE_VERSION\\" \\\\
      -l \\"$CHAINCODE_LANG\\" \\\\
      -p /var/hyperledger/cli/\\"$CHAINCODE_NAME\\"/ \\\\
      -o \\"$ORDERER_URL\\" \\\\
      \\"\${CA_CERT_PARAMS[@]}\\"
  else
    echo \\"Warning! Skipping chaincode '$CHAINCODE_NAME' installation (TLS). Chaincode's directory is empty.\\"
  fi
}

function chaincodeInstantiate() {
  local CLI_NAME=$1
  local PEER_ADDRESS=$2
  local CHANNEL_NAME=$3

  local CHAINCODE_NAME=$4
  local CHAINCODE_VERSION=$5
  local CHAINCODE_LANG=$6
  local CHAINCODE_DIR_PATH=$7

  local ORDERER_URL=$8
  local INIT_PARAMS=$9
  local ENDORSEMENT=\${10}

  local CA_CERT
  local CA_CERT_PARAMS

  if [ -n \\"\${11}\\" ]; then
    CA_CERT=\\"/var/hyperledger/cli/\${11}\\"
    CA_CERT_PARAMS=(--tls --cafile \\"$CA_CERT\\")
  else
    CA_CERT=\\"<none>\\"
    CA_CERT_PARAMS=()
  fi

  local COLLECTIONS_CONFIG
  local COLLECTIONS_CONFIG_PARAMS

  if [ -n \\"\${12}\\" ]; then
    COLLECTIONS_CONFIG=\\"/var/hyperledger/cli/\${12}\\"
    COLLECTIONS_CONFIG_PARAMS=(--collections-config \\"$COLLECTIONS_CONFIG\\")
  else
    COLLECTIONS_CONFIG=\\"<none>\\"
    COLLECTIONS_CONFIG_PARAMS=()
  fi

  echo \\"Instantiating chaincode on $CHANNEL_NAME (TLS)...\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"
  inputLog \\"CHAINCODE_NAME: $CHAINCODE_NAME\\"
  inputLog \\"CHAINCODE_VERSION: $CHAINCODE_VERSION\\"
  inputLog \\"CHAINCODE_LANG: $CHAINCODE_LANG\\"
  inputLog \\"CHAINCODE_DIR_PATH: $CHAINCODE_DIR_PATH\\"
  inputLog \\"COLLECTIONS_CONFIG: $COLLECTIONS_CONFIG\\"
  inputLog \\"INIT_PARAMS: $INIT_PARAMS\\"
  inputLog \\"ENDORSEMENT: $ENDORSEMENT\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"
  inputLog \\"ORDERER_URL: $ORDERER_URL\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"CA_CERT: $CA_CERT\\"

  if [ -n \\"$(ls \\"$CHAINCODE_DIR_PATH\\")\\" ]; then
    docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\"$CLI_NAME\\" peer chaincode instantiate \\\\
      -C \\"$CHANNEL_NAME\\" \\\\
      -n \\"$CHAINCODE_NAME\\" \\\\
      -v \\"$CHAINCODE_VERSION\\" \\\\
      -l \\"$CHAINCODE_LANG\\" \\\\
      -o \\"$ORDERER_URL\\" \\\\
      -c \\"$INIT_PARAMS\\" \\\\
      -P \\"$ENDORSEMENT\\" \\\\
      \\"\${COLLECTIONS_CONFIG_PARAMS[@]}\\" \\\\
      \\"\${CA_CERT_PARAMS[@]}\\"
  else
    echo \\"Warning! Skipping chaincode '$CHAINCODE_NAME' instantiate (TLS). Chaincode's directory is empty.\\"
    echo \\"Looked in dir: '$CHAINCODE_DIR_PATH'\\"
  fi
}

function chaincodeUpgrade() {
  local CLI_NAME=$1
  local PEER_ADDRESS=$2
  local CHANNEL_NAME=$3

  local CHAINCODE_NAME=$4
  local CHAINCODE_VERSION=$5
  local CHAINCODE_LANG=$6
  local CHAINCODE_DIR_PATH=$7

  local ORDERER_URL=$8
  local INIT_PARAMS=$9
  local ENDORSEMENT=\${10}

  local CA_CERT
  local CA_CERT_PARAMS

  if [ -n \\"\${11}\\" ]; then
    CA_CERT=\\"/var/hyperledger/cli/\${11}\\"
    CA_CERT_PARAMS=(--tls --cafile \\"$CA_CERT\\")
  else
    CA_CERT=\\"<none>\\"
    CA_CERT_PARAMS=()
  fi

  local COLLECTIONS_CONFIG
  local COLLECTIONS_CONFIG_PARAMS

  if [ -n \\"\${12}\\" ]; then
    COLLECTIONS_CONFIG=\\"/var/hyperledger/cli/\${12}\\"
    COLLECTIONS_CONFIG_PARAMS=(--collections-config \\"$COLLECTIONS_CONFIG\\")
  else
    COLLECTIONS_CONFIG=\\"<none>\\"
    COLLECTIONS_CONFIG_PARAMS=()
  fi

  echo \\"Upgrading chaincode on $CHANNEL_NAME (TLS)...\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"
  inputLog \\"CHAINCODE_NAME: $CHAINCODE_NAME\\"
  inputLog \\"CHAINCODE_VERSION: $CHAINCODE_VERSION\\"
  inputLog \\"CHAINCODE_LANG: $CHAINCODE_LANG\\"
  inputLog \\"CHAINCODE_DIR_PATH: $CHAINCODE_DIR_PATH\\"
  inputLog \\"COLLECTIONS_CONFIG: $COLLECTIONS_CONFIG\\"
  inputLog \\"INIT_PARAMS: $INIT_PARAMS\\"
  inputLog \\"ENDORSEMENT: $ENDORSEMENT\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"
  inputLog \\"ORDERER_URL: $ORDERER_URL\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"CA_CERT: $CA_CERT\\"

  if [ -n \\"$(ls \\"$CHAINCODE_DIR_PATH\\")\\" ]; then
    docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\"$CLI_NAME\\" peer chaincode upgrade \\\\
      -C \\"$CHANNEL_NAME\\" \\\\
      -n \\"$CHAINCODE_NAME\\" \\\\
      -v \\"$CHAINCODE_VERSION\\" \\\\
      -l \\"$CHAINCODE_LANG\\" \\\\
      -p /var/hyperledger/cli/\\"$CHAINCODE_NAME\\"/ \\\\
      -o \\"$ORDERER_URL\\" \\\\
      -c \\"$INIT_PARAMS\\" \\\\
      -P \\"$ENDORSEMENT\\" \\\\
      \\"\${COLLECTIONS_CONFIG_PARAMS[@]}\\" \\\\
      \\"\${CA_CERT_PARAMS[@]}\\"
  else
    echo \\"Warning! Skipping chaincode '$CHAINCODE_NAME' instantiate (TLS). Chaincode's directory is empty.\\"
    echo \\"Looked in dir: '$CHAINCODE_DIR_PATH'\\"
  fi
}
"
`;

exports[`network-01-simple should create proper e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/scripts/channel-query-functions.sh from samples/fabricaConfig-1org-1channel-1chaincode.json 1`] = `
"#!/usr/bin/env bash

function peerChannelList() {
  local CLI_NAME=$1
  local PEER_ADDRESS=$2

  echo \\"Listing channels using $CLI_NAME using peer $PEER_ADDRESS...\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"

  docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\"$CLI_NAME\\" peer channel list
}

function peerChannelGetInfo() {
  local CHANNEL_NAME=$1
  local CLI_NAME=$2
  local PEER_ADDRESS=$3

  echo \\"Getting info about $CHANNEL_NAME using peer $PEER_ADDRESS...\\"
  inputLog \\"CHANNEL_NAME: $CHANNEL_NAME\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"

  docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\"$CLI_NAME\\" peer channel getinfo \\\\
    -c \\"$CHANNEL_NAME\\"
}

function peerChannelFetchConfig() {
  local CHANNEL_NAME=$1
  local CLI_NAME=$2
  local CONFIG_FILE_NAME=$3
  local PEER_ADDRESS=$4

  echo \\"Fetching config block from $CHANNEL_NAME using peer $PEER_ADDRESS...\\"
  inputLog \\"CHANNEL_NAME: $CHANNEL_NAME\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"CONFIG_FILE_NAME: $CONFIG_FILE_NAME\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"

  docker exec \\"$CLI_NAME\\" mkdir -p /tmp/hyperledger/assets/
  docker exec \\\\
    -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
    \\"$CLI_NAME\\" peer channel fetch config /tmp/hyperledger/assets/config_block_before.pb \\\\
    -c \\"$CHANNEL_NAME\\"

  docker exec \\"$CLI_NAME\\" chmod 777 /tmp/hyperledger/assets/config_block_before.pb
  docker exec \\\\
    -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
    \\"$CLI_NAME\\" configtxlator proto_decode \\\\
    --input /tmp/hyperledger/assets/config_block_before.pb \\\\
    --type common.Block |
    jq .data.data[0].payload.data.config >\\"$CONFIG_FILE_NAME\\"

  docker exec \\"$CLI_NAME\\" rm -rf /tmp/hyperledger/assets/
}

function peerChannelFetchLastBlock() {
  local CHANNEL_NAME=$1
  local CLI_NAME=$2
  local BLOCK_FILE_NAME=$3
  local PEER_ADDRESS=$4

  echo \\"Fetching last block from $CHANNEL_NAME using peer $PEER_ADDRESS...\\"
  inputLog \\"CHANNEL_NAME: $CHANNEL_NAME\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"BLOCK_FILE_NAME: $BLOCK_FILE_NAME\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"

  docker exec \\"$CLI_NAME\\" mkdir -p /tmp/hyperledger/blocks/
  docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
    \\"$CLI_NAME\\" peer channel fetch newest /tmp/hyperledger/blocks/newest.block \\\\
    -c \\"$CHANNEL_NAME\\"
  docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
    \\"$CLI_NAME\\" configtxlator proto_decode \\\\
    --input /tmp/hyperledger/blocks/newest.block \\\\
    --type common.Block |
    jq .data.data[0].payload.data.config >\\"$BLOCK_FILE_NAME\\"

  docker exec \\"$CLI_NAME\\" rm -rf /tmp/hyperledger/assets/
}

function peerChannelFetchFirstBlock() {
  local CHANNEL_NAME=$1
  local CLI_NAME=$2
  local BLOCK_FILE_NAME=$3
  local PEER_ADDRESS=$4

  echo \\"Fetching first block from $CHANNEL_NAME using peer $PEER_ADDRESS...\\"
  inputLog \\"CHANNEL_NAME: $CHANNEL_NAME\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"BLOCK_FILE_NAME: $BLOCK_FILE_NAME\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"

  docker exec \\"$CLI_NAME\\" mkdir -p /tmp/hyperledger/blocks/
  docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
    \\"$CLI_NAME\\" peer channel fetch oldest /tmp/hyperledger/blocks/oldest.block \\\\
    -c \\"$CHANNEL_NAME\\"
  docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
    \\"$CLI_NAME\\" configtxlator proto_decode \\\\
    --input /tmp/hyperledger/blocks/oldest.block \\\\
    --type common.Block |
    jq .data.data[0].payload.data.config >\\"$BLOCK_FILE_NAME\\"

  docker exec \\"$CLI_NAME\\" rm -rf /tmp/hyperledger/assets/
}

function peerChannelFetchBlock() {
  local CHANNEL_NAME=$1
  local CLI_NAME=$2
  local BLOCK_FILE_NAME=$3
  local BLOCK_NUMBER=$4
  local PEER_ADDRESS=$5

  echo \\"Fetching first block from $CHANNEL_NAME using peer $PEER_ADDRESS...\\"
  inputLog \\"CHANNEL_NAME: $CHANNEL_NAME\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"BLOCK_FILE_NAME: $BLOCK_FILE_NAME\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"

  docker exec \\"$CLI_NAME\\" mkdir -p /tmp/hyperledger/blocks/
  docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
    \\"$CLI_NAME\\" peer channel fetch oldest /tmp/hyperledger/blocks/oldest.block \\\\
    -c \\"$CHANNEL_NAME\\"
  docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
    \\"$CLI_NAME\\" configtxlator proto_decode \\\\
    --input /tmp/hyperledger/blocks/oldest.block \\\\
    --type common.Block |
    jq .data.data[0].payload.data.config >\\"$BLOCK_FILE_NAME\\"

  docker exec \\"$CLI_NAME\\" rm -rf /tmp/hyperledger/assets/
}

#=== TLS equivalents =========================================================

function peerChannelListTls() {
  local CLI_NAME=$1
  local PEER_ADDRESS=$2
  local CA_CERT=$3

  echo \\"Listing channels using $CLI_NAME using peer $PEER_ADDRESS (TLS)...\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"

  docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\"$CLI_NAME\\" peer channel list --tls --cafile \\"$CA_CERT\\"
}

function peerChannelGetInfoTls() {
  local CHANNEL_NAME=$1
  local CLI_NAME=$2
  local PEER_ADDRESS=$3
  local CA_CERT=$4

  echo \\"Getting info about $CHANNEL_NAME using peer $PEER_ADDRESS (TLS)...\\"
  inputLog \\"CHANNEL_NAME: $CHANNEL_NAME\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"

  docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\"$CLI_NAME\\" peer channel getinfo \\\\
    -c \\"$CHANNEL_NAME\\" --tls --cafile \\"$CA_CERT\\"
}

function peerChannelFetchConfigTls() {
  local CHANNEL_NAME=$1
  local CLI_NAME=$2
  local CONFIG_FILE_NAME=$3
  local PEER_ADDRESS=$4
  local CA_CERT=$5

  echo \\"Fetching config block from $CHANNEL_NAME using peer $PEER_ADDRESS (TLS)...\\"
  inputLog \\"CHANNEL_NAME: $CHANNEL_NAME\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"CONFIG_FILE_NAME: $CONFIG_FILE_NAME\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"

  docker exec \\"$CLI_NAME\\" mkdir -p /tmp/hyperledger/assets/
  docker exec \\\\
    -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
    \\"$CLI_NAME\\" peer channel fetch config /tmp/hyperledger/assets/config_block_before.pb \\\\
    -c \\"$CHANNEL_NAME\\" --tls --cafile \\"$CA_CERT\\"

  docker exec \\"$CLI_NAME\\" chmod 777 /tmp/hyperledger/assets/config_block_before.pb
  docker exec \\\\
    -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
    \\"$CLI_NAME\\" configtxlator proto_decode \\\\
    --input /tmp/hyperledger/assets/config_block_before.pb \\\\
    --type common.Block |
    jq .data.data[0].payload.data.config >\\"$CONFIG_FILE_NAME\\"

  docker exec \\"$CLI_NAME\\" rm -rf /tmp/hyperledger/assets/
}

function peerChannelFetchLastBlockTls() {
  local CHANNEL_NAME=$1
  local CLI_NAME=$2
  local BLOCK_FILE_NAME=$3
  local PEER_ADDRESS=$4
  local CA_CERT=$5

  echo \\"Fetching last block from $CHANNEL_NAME using peer $PEER_ADDRESS (TLS)...\\"
  inputLog \\"CHANNEL_NAME: $CHANNEL_NAME\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"BLOCK_FILE_NAME: $BLOCK_FILE_NAME\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"

  docker exec \\"$CLI_NAME\\" mkdir -p /tmp/hyperledger/blocks/
  docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
    \\"$CLI_NAME\\" peer channel fetch newest /tmp/hyperledger/blocks/newest.block \\\\
    -c \\"$CHANNEL_NAME\\" --tls --cafile \\"$CA_CERT\\"
  docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
    \\"$CLI_NAME\\" configtxlator proto_decode \\\\
    --input /tmp/hyperledger/blocks/newest.block \\\\
    --type common.Block |
    jq .data.data[0].payload.data.config >\\"$BLOCK_FILE_NAME\\"

  docker exec \\"$CLI_NAME\\" rm -rf /tmp/hyperledger/assets/
}

function peerChannelFetchFirstBlockTls() {
  local CHANNEL_NAME=$1
  local CLI_NAME=$2
  local BLOCK_FILE_NAME=$3
  local PEER_ADDRESS=$4
  local CA_CERT=$5

  echo \\"Fetching first block from $CHANNEL_NAME using peer $PEER_ADDRESS (TLS)...\\"
  inputLog \\"CHANNEL_NAME: $CHANNEL_NAME\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"BLOCK_FILE_NAME: $BLOCK_FILE_NAME\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"

  docker exec \\"$CLI_NAME\\" mkdir -p /tmp/hyperledger/blocks/
  docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
    \\"$CLI_NAME\\" peer channel fetch oldest /tmp/hyperledger/blocks/oldest.block \\\\
    -c \\"$CHANNEL_NAME\\" --tls --cafile \\"$CA_CERT\\"
  docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
    \\"$CLI_NAME\\" configtxlator proto_decode \\\\
    --input /tmp/hyperledger/blocks/oldest.block \\\\
    --type common.Block |
    jq .data.data[0].payload.data.config >\\"$BLOCK_FILE_NAME\\"

  docker exec \\"$CLI_NAME\\" rm -rf /tmp/hyperledger/assets/1
}

function peerChannelFetchBlockTls() {
  local CHANNEL_NAME=$1
  local CLI_NAME=$2
  local BLOCK_FILE_NAME=$3
  local BLOCK_NUMBER=$4
  local PEER_ADDRESS=$5

  echo \\"Fetching first block from $CHANNEL_NAME using peer $PEER_ADDRESS...\\"
  inputLog \\"CHANNEL_NAME: $CHANNEL_NAME\\"
  inputLog \\"CLI_NAME: $CLI_NAME\\"
  inputLog \\"BLOCK_FILE_NAME: $BLOCK_FILE_NAME\\"
  inputLog \\"BLOCK_NUMBER: $BLOCK_NUMBER\\"
  inputLog \\"PEER_ADDRESS: $PEER_ADDRESS\\"

  docker exec \\"$CLI_NAME\\" mkdir -p /tmp/hyperledger/blocks/
  docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
    \\"$CLI_NAME\\" peer channel fetch oldest /tmp/hyperledger/blocks/oldest.block \\\\
    -c \\"$CHANNEL_NAME\\" --tls --cafile \\"$CA_CERT\\"
  docker exec -e CORE_PEER_ADDRESS=\\"$PEER_ADDRESS\\" \\\\
    \\"$CLI_NAME\\" configtxlator proto_decode \\\\
    --input /tmp/hyperledger/blocks/oldest.block \\\\
    --type common.Block |
    jq .data.data[0].payload.data.config >\\"$BLOCK_FILE_NAME\\"

  docker exec \\"$CLI_NAME\\" rm -rf /tmp/hyperledger/assets/
}
"
`;

exports[`network-01-simple should create proper e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/scripts/cli/channel_fns.sh from samples/fabricaConfig-1org-1channel-1chaincode.json 1`] = `
"#!/usr/bin/env bash

set -eu

function createChannelAndJoin() {
  local CHANNEL_NAME=$1

  local CORE_PEER_LOCALMSPID=$2
  local CORE_PEER_ADDRESS=$3
  local CORE_PEER_MSPCONFIGPATH=$(realpath \\"$4\\")

  local ORDERER_URL=$5

  local DIR_NAME=step-createChannelAndJoin-$CHANNEL_NAME-$CORE_PEER_ADDRESS

  echo \\"Creating channel with name: \${CHANNEL_NAME}\\"
  echo \\"   Orderer: $ORDERER_URL\\"
  echo \\"   CORE_PEER_LOCALMSPID: $CORE_PEER_LOCALMSPID\\"
  echo \\"   CORE_PEER_ADDRESS: $CORE_PEER_ADDRESS\\"
  echo \\"   CORE_PEER_MSPCONFIGPATH: $CORE_PEER_MSPCONFIGPATH\\"

  mkdir \\"$DIR_NAME\\" && cd \\"$DIR_NAME\\"

  cp /var/hyperledger/cli/config/\\"$CHANNEL_NAME\\".tx .

  peer channel create -o \\"\${ORDERER_URL}\\" -c \\"\${CHANNEL_NAME}\\" -f ./\\"$CHANNEL_NAME\\".tx
  peer channel join -b \\"\${CHANNEL_NAME}\\".block

  rm -rf \\"$DIR_NAME\\"
}

function createChannelAndJoinTls() {
  local CHANNEL_NAME=$1

  local CORE_PEER_LOCALMSPID=$2
  local CORE_PEER_ADDRESS=$3
  local CORE_PEER_MSPCONFIGPATH=$(realpath \\"$4\\")
  local CORE_PEER_TLS_MSPCONFIGPATH=$(realpath \\"$5\\")
  local TLS_CA_CERT_PATH=$(realpath \\"$6\\")
  local ORDERER_URL=$7

  local CORE_PEER_TLS_CERT_FILE=$CORE_PEER_TLS_MSPCONFIGPATH/client.crt
  local CORE_PEER_TLS_KEY_FILE=$CORE_PEER_TLS_MSPCONFIGPATH/client.key
  local CORE_PEER_TLS_ROOTCERT_FILE=$CORE_PEER_TLS_MSPCONFIGPATH/ca.crt

  local DIR_NAME=step-createChannelAndJoinTls-$CHANNEL_NAME-$CORE_PEER_ADDRESS

  echo \\"Creating channel with name (TLS): \${CHANNEL_NAME}\\"
  echo \\"   Orderer: $ORDERER_URL\\"
  echo \\"   CORE_PEER_LOCALMSPID: $CORE_PEER_LOCALMSPID\\"
  echo \\"   CORE_PEER_ADDRESS: $CORE_PEER_ADDRESS\\"
  echo \\"   CORE_PEER_MSPCONFIGPATH: $CORE_PEER_MSPCONFIGPATH\\"
  echo \\"\\"
  echo \\"   TLS_CA_CERT_PATH is: $TLS_CA_CERT_PATH\\"
  echo \\"   CORE_PEER_TLS_CERT_FILE: $CORE_PEER_TLS_CERT_FILE\\"
  echo \\"   CORE_PEER_TLS_KEY_FILE: $CORE_PEER_TLS_KEY_FILE\\"
  echo \\"   CORE_PEER_TLS_ROOTCERT_FILE: $CORE_PEER_TLS_ROOTCERT_FILE\\"

  mkdir \\"$DIR_NAME\\" && cd \\"$DIR_NAME\\"

  cp /var/hyperledger/cli/config/\\"$CHANNEL_NAME\\".tx .

  peer channel create -o \\"\${ORDERER_URL}\\" -c \\"\${CHANNEL_NAME}\\" -f ./\\"$CHANNEL_NAME\\".tx --tls --cafile \\"$TLS_CA_CERT_PATH\\"
  peer channel join -b \\"\${CHANNEL_NAME}\\".block --tls --cafile \\"$TLS_CA_CERT_PATH\\"

  rm -rf \\"$DIR_NAME\\"
}

function fetchChannelAndJoin() {
  local CHANNEL_NAME=$1

  local CORE_PEER_LOCALMSPID=$2
  local CORE_PEER_ADDRESS=$3
  local CORE_PEER_MSPCONFIGPATH=$(realpath \\"$4\\")

  local ORDERER_URL=$5

  local DIR_NAME=step-fetchChannelAndJoin-$CHANNEL_NAME-$CORE_PEER_ADDRESS

  echo \\"Fetching channel with name: \${CHANNEL_NAME}\\"
  echo \\"   Orderer: $ORDERER_URL\\"
  echo \\"   CORE_PEER_LOCALMSPID: $CORE_PEER_LOCALMSPID\\"
  echo \\"   CORE_PEER_ADDRESS: $CORE_PEER_ADDRESS\\"
  echo \\"   CORE_PEER_MSPCONFIGPATH: $CORE_PEER_MSPCONFIGPATH\\"

  mkdir \\"$DIR_NAME\\" && cd \\"$DIR_NAME\\"

  peer channel fetch newest -c \\"\${CHANNEL_NAME}\\" --orderer \\"\${ORDERER_URL}\\"
  peer channel join -b \\"\${CHANNEL_NAME}\\"_newest.block

  rm -rf \\"$DIR_NAME\\"
}

function fetchChannelAndJoinTls() {
  local CHANNEL_NAME=$1

  local CORE_PEER_LOCALMSPID=$2
  local CORE_PEER_ADDRESS=$3
  local CORE_PEER_MSPCONFIGPATH=$(realpath \\"$4\\")
  local CORE_PEER_TLS_MSPCONFIGPATH=$(realpath \\"$5\\")
  local TLS_CA_CERT_PATH=$(realpath \\"$6\\")
  local ORDERER_URL=$7

  local CORE_PEER_TLS_CERT_FILE=$CORE_PEER_TLS_MSPCONFIGPATH/client.crt
  local CORE_PEER_TLS_KEY_FILE=$CORE_PEER_TLS_MSPCONFIGPATH/client.key
  local CORE_PEER_TLS_ROOTCERT_FILE=$CORE_PEER_TLS_MSPCONFIGPATH/ca.crt

  local DIR_NAME=step-fetchChannelAndJoinTls-$CHANNEL_NAME-$CORE_PEER_ADDRESS

  echo \\"Fetching channel with name (TLS): \${CHANNEL_NAME}\\"
  echo \\"   Orderer: $ORDERER_URL\\"
  echo \\"   CORE_PEER_LOCALMSPID: $CORE_PEER_LOCALMSPID\\"
  echo \\"   CORE_PEER_ADDRESS: $CORE_PEER_ADDRESS\\"
  echo \\"   CORE_PEER_MSPCONFIGPATH: $CORE_PEER_MSPCONFIGPATH\\"
  echo \\"\\"
  echo \\"   TLS_CA_CERT_PATH is: $TLS_CA_CERT_PATH\\"
  echo \\"   CORE_PEER_TLS_CERT_FILE: $CORE_PEER_TLS_CERT_FILE\\"
  echo \\"   CORE_PEER_TLS_KEY_FILE: $CORE_PEER_TLS_KEY_FILE\\"
  echo \\"   CORE_PEER_TLS_ROOTCERT_FILE: $CORE_PEER_TLS_ROOTCERT_FILE\\"

  mkdir \\"$DIR_NAME\\" && cd \\"$DIR_NAME\\"

  peer channel fetch newest -c \\"\${CHANNEL_NAME}\\" --orderer \\"\${ORDERER_URL}\\" --tls --cafile \\"$TLS_CA_CERT_PATH\\"
  peer channel join -b \\"\${CHANNEL_NAME}\\"_newest.block --tls --cafile \\"$TLS_CA_CERT_PATH\\"

  rm -rf \\"$DIR_NAME\\"
}
"
`;

exports[`network-01-simple should create proper files from samples/fabricaConfig-1org-1channel-1chaincode.json 1`] = `
Array [
  "e2e/__tmp__/network-01-simple/fabrica-target/fabric-config/.gitignore",
  "e2e/__tmp__/network-01-simple/fabrica-target/fabric-config/collections/chaincode1.json",
  "e2e/__tmp__/network-01-simple/fabrica-target/fabric-config/configtx.yaml",
  "e2e/__tmp__/network-01-simple/fabrica-target/fabric-config/crypto-config-org1.yaml",
  "e2e/__tmp__/network-01-simple/fabrica-target/fabric-config/crypto-config-root.yaml",
  "e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker.sh",
  "e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/.env",
  "e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/channel-query-scripts.sh",
  "e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/commands-generated.sh",
  "e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/docker-compose.yaml",
  "e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/scripts/base-functions.sh",
  "e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/scripts/base-help.sh",
  "e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/scripts/chaincode-functions.sh",
  "e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/scripts/channel-query-functions.sh",
  "e2e/__tmp__/network-01-simple/fabrica-target/fabric-docker/scripts/cli/channel_fns.sh",
]
`;
