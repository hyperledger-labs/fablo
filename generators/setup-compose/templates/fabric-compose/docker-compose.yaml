version: '2.2'

networks:
  basic:

services:
  <%= rootOrg.ca.address %>:
    container_name: <%= rootOrg.ca.address %>
    image: hyperledger/fabric-ca:${FABRIC_CA_VERSION}
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=<%= rootOrg.ca.address %>
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server/crypto/ca.<%= rootOrg.domain %>-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server/crypto/priv-key.pem
      - FABRIC_LOGGING_SPEC=${LOGGING_LEVEL}
    ports:
      - <%= rootOrg.ca.exposePort %>:<%= rootOrg.ca.port %>
    working_dir: /etc/hyperledger/fabric-ca-server
    command: sh -c 'fabric-ca-server start -b ${ROOT_CA_ADMIN_NAME}:${ROOT_CA_ADMIN_PASSWORD} -d'
    volumes:
      - ../fabric-config/crypto-config/ordererOrganizations/<%= rootOrg.domain %>/ca/:/etc/hyperledger/fabric-ca-server/crypto
    networks:
      - basic

  <%_ ordererOrgs.forEach(function(ordererOrg) { _%>
  <%_ ordererOrg.orderers.forEach(function(orderer){ _%>
  <%= orderer.address %>:
    container_name: <%= orderer.address %>
    image: hyperledger/fabric-orderer:${FABRIC_VERSION}
    environment:
      - FABRIC_LOGGING_SPEC=${LOGGING_LEVEL}
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=<%= orderer.port %>
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/config/genesis.block
      - ORDERER_GENERAL_LOCALMSPID=<%= ordererOrg.mspName %>
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp
      - GODEBUG=netdns=go
      <%_ if(networkSettings.tls) { _%>
      # enabled TLS
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      - ORDERER_GENERAL_CLUSTER_CLIENTCERTIFICATE=/var/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_CLUSTER_CLIENTPRIVATEKEY=/var/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_CLUSTER_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]
      <%_ } _%>
    working_dir: /var/hyperledger/orderer
    command: orderer
    ports:
      - <%= orderer.port %>:<%= orderer.port %>
    volumes:
      - ../fabric-config/config/:/var/hyperledger/config
      - ../fabric-config/crypto-config/ordererOrganizations/<%= ordererOrg.domain %>/orderers/<%= orderer.address %>/msp/:/var/hyperledger/orderer/msp
      - ../fabric-config/crypto-config/ordererOrganizations/<%= ordererOrg.domain %>/orderers/<%= orderer.address %>/tls/:/var/hyperledger/orderer/tls
    networks:
      - basic

  <%_ }) _%>
  <%_ }) _%>

<% orgs.forEach(function(org){ %>
  <%= org.ca.address %>:
    container_name: <%= org.ca.address %>
    image: hyperledger/fabric-ca:${FABRIC_CA_VERSION}
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME=<%= org.ca.address %>
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server/crypto/ca.<%= org.domain %>-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server/crypto/priv-key.pem
      - FABRIC_LOGGING_SPEC=${LOGGING_LEVEL}
    ports:
      - <%= org.ca.exposePort %>:<%= org.ca.port %>
    working_dir: /etc/hyperledger/fabric-ca-server
    command: sh -c 'fabric-ca-server start -b ${<%= org.ca.caAdminNameVar %>}:${<%= org.ca.caAdminPassVar %>} -d'
    volumes:
      - ../fabric-config/crypto-config/peerOrganizations/<%= org.domain %>/ca/:/etc/hyperledger/fabric-ca-server/crypto
    depends_on:
      - <%= rootOrg.ca.address %>
    networks:
      - basic

  <%= org.cli.address %>:
    container_name: <%= org.cli.address %>
    image: hyperledger/fabric-tools:${FABRIC_VERSION}
    tty: true
    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - FABRIC_LOGGING_SPEC=${LOGGING_LEVEL}
      - CORE_PEER_ID=<%= org.cli.address %>
      - CORE_CHAINCODE_KEEPALIVE=10
      #
      - CORE_PEER_LOCALMSPID=<%= org.mspName %>
      - CORE_PEER_MSPCONFIGPATH=/var/hyperledger/cli/crypto/users/Admin@<%= org.domain %>/msp
      - CORE_PEER_ADDRESS=<%= org.headPeer.fullAddress %><% if(networkSettings.tls) { %>
      # enabled TLS
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/var/hyperledger/cli/crypto/users/Admin@<%= org.domain %>/tls/client.crt
      - CORE_PEER_TLS_KEY_FILE=/var/hyperledger/cli/crypto/users/Admin@<%= org.domain %>/tls/client.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/var/hyperledger/cli/crypto/users/Admin@<%= org.domain %>/tls/ca.crt
      - TLS_CA_CERT_PATH=/var/hyperledger/cli/crypto-orderer/tlsca.<%= ordererOrgHead.domain %>-cert.pem<% } %>
    working_dir: /var/hyperledger/cli/
    command: /bin/bash
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - ../fabric-docker/scripts/cli:/var/hyperledger/cli/scripts/
      - ../fabric-config/config:/var/hyperledger/cli/config/ # genesis.block and channel.tx's
      - ../fabric-config/crypto-config/peerOrganizations/<%= org.domain %>:/var/hyperledger/cli/crypto/
      <%_ if(networkSettings.tls) { _%>
      - ../fabric-config/crypto-config/ordererOrganizations/<%= ordererOrgHead.domain %>/orderers/<%= ordererOrgHead.ordererHead.address %>/msp/tlscacerts/:/var/hyperledger/cli/crypto-orderer:ro
      <%_ orgs.forEach(function(org) { _%>
      <%_ org.peers.forEach(function(peer) { _%>
      - ../fabric-config/crypto-config/peerOrganizations/<%= org.domain %>/peers/<%= peer.address %>/tls/ca.crt:/var/hyperledger/cli/crypto-peer/<%= peer.address %>/tls/ca.crt:ro
      <%_ }) _%>
      <%_ }) _%>
      <%_ } _%>
      - ../fabric-config/chaincode-packages:/var/hyperledger/cli/chaincode-packages/
      <%_ chaincodes.forEach(function(chaincode) { _%>
      - "$CHAINCODES_BASE_DIR/<%= chaincode.directory %>/:/var/hyperledger/cli/<%= chaincode.name %>/"
      <%_ if(chaincode.privateDataConfigFile) { _%>
      - "../fabric-config/<%= chaincode.privateDataConfigFile %>:/var/hyperledger/cli/<%= chaincode.privateDataConfigFile %>"
      <%_ } _%>
      <%_ }) _%>
    depends_on:
      - <%= org.ca.address %>
      <%_ org.peers.forEach(function(peer){ _%>
      - <%= peer.address %>
      <%_ }) _%>
    networks:
      - basic

  <%_ if (org.tools.fabloRest) { _%>
  <%= org.tools.fabloRest.address %>:
    container_name: <%= org.tools.fabloRest.address %>
    image: softwaremill/fablo-rest:${FABLO_REST_VERSION}
    tty: true
    environment:
      - PORT=8000
      - MSP_ID=<%= org.tools.fabloRest.mspId %>
      - FABRIC_CA_URL=<%= org.tools.fabloRest.fabricCaUrl %>
      - FABRIC_CA_NAME=<%= org.tools.fabloRest.fabricCaName %>
      - AS_LOCALHOST=false
      - DISCOVERY_URLS=<%= org.tools.fabloRest.discoveryUrls %>
    <%_ if(networkSettings.tls) { _%>
      - DISCOVERY_SSL_TARGET_NAME_OVERRIDES=<%= org.tools.fabloRest.discoverySslTargetNameOverrides %>
      - DISCOVERY_TLS_CA_CERT_FILES=<%= org.tools.fabloRest.discoveryTlsCaCertFiles %>
    <%_ } _%>
      - HFC_LOGGING=<%- JSON.stringify(org.tools.fabloRest.logging) %>
    <%_ if(networkSettings.tls) { _%>
    volumes:
      # note: fablo needs access to all anchor peer certs
      - ../fabric-config/crypto-config/peerOrganizations:/crypto:ro
    <%_ } _%>
    ports:
      - <%= org.tools.fabloRest.port %>:8000
    depends_on:
      - <%= org.ca.address %>
      <%_ org.peers.forEach(function(peer){ _%>
      - <%= peer.address %>
      <%_ }) _%>
    networks:
      - basic
  <%_ } _%>

  <%_ org.peers.forEach(function(peer){ _%>
  <%= peer.address %>:
    container_name: <%= peer.address %>
    image: hyperledger/fabric-peer:${FABRIC_VERSION}
    environment:
      - CORE_PEER_LOCALMSPID=<%= org.mspName %>
      - CORE_PEER_ID=<%= peer.address %>
      - CORE_PEER_ADDRESS=<%= peer.fullAddress %>
      - CORE_PEER_LISTENADDRESS=<%= peer.fullAddress %>
      - CORE_PEER_GOSSIP_ENDPOINT=<%= peer.fullAddress %><% if(peer.isAnchorPeer) { %>
      - CORE_PEER_GOSSIP_EXTERNALENDPOINT=<%= peer.fullAddress %><% } %>
      - CORE_PEER_GOSSIP_BOOTSTRAP=<%- org.bootstrapPeers %>
      - CORE_PEER_CHAINCODELISTENADDRESS=<%= peer.address %>:7050
      - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/peer/msp
      - CORE_CHAINCODE_BUILDER=hyperledger/fabric-ccenv:${FABRIC_CCENV_VERSION}
      - CORE_CHAINCODE_GOLANG_RUNTIME=hyperledger/fabric-baseos:${FABRIC_BASEOS_VERSION}
      - CORE_CHAINCODE_JAVA_RUNTIME=hyperledger/fabric-javaenv:${FABRIC_JAVAENV_VERSION}
      #
      - CORE_CHAINCODE_LOGGING_LEVEL=${LOGGING_LEVEL}
      - CORE_CHAINCODE_LOGGING_SHIM=${LOGGING_LEVEL}
      - FABRIC_LOGGING_SPEC=${LOGGING_LEVEL}
      #
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_basic
      - CORE_VM_DOCKER_ATTACHSTDOUT=true
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - GODEBUG=netdns=go
      <%_ if(networkSettings.tls) { _%>
      # enabled TLS
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/peer/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/peer/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/peer/tls/ca.crt
      <%_ } _%>
      <%_ if(peer.db==="CouchDb") { _%>
      # CouchDB
      - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
      - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb.<%= peer.name %>.<%= org.domain %>:5984
      - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=<%= peer.name %>
      - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=<%= peer.name %>Password
      <%_ } _%>
    working_dir: /etc/hyperledger/fabric/peer/
    command: peer node start
    ports:
      - <%= peer.port %>:<%= peer.port %>
    volumes:
      - /var/run/docker.sock:/host/var/run/docker.sock
      - ../fabric-config/crypto-config/peerOrganizations/<%= org.domain %>/peers/<%= peer.address %>/msp:/etc/hyperledger/fabric/peer/msp
      - ../fabric-config/crypto-config/peerOrganizations/<%= org.domain %>/peers/<%= peer.address %>/tls:/etc/hyperledger/fabric/peer/tls
      - ../fabric-config/crypto-config/peerOrganizations/<%= org.domain %>/users:/etc/hyperledger/fabric/peer/msp/users
      - ../fabric-config/config:/etc/hyperledger/fabric/config
    depends_on:
      - <%= org.ca.address %>
      <%_ if(peer.db==="CouchDb") { _%>
      - couchdb.<%= peer.name %>.<%= org.domain %>
      <%_ } %>
    networks:
      - basic

  <%_ if(peer.db==="CouchDb") { _%>
  couchdb.<%= peer.name %>.<%= org.domain %>:
    container_name: couchdb.<%= peer.name %>.<%= org.domain %>
    image: hyperledger/fabric-couchdb:0.4.18
    environment:
      - COUCHDB_USER=<%= peer.name %>
      - COUCHDB_PASSWORD=<%= peer.name %>Password
    ports:
      - <%= peer.couchDbExposePort %>:5984
    networks:
      - basic
  <%_ } _%>
  <%_ }) _%>
<%_ }) _%>
